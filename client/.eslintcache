[{"C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\index.js":"1","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\App.js":"2","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\reportWebVitals.js":"3","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\pages\\Login.js":"4","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\pages\\Register.js":"5","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\util\\hooks.js":"6","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\ApolloProvider.js":"7","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\pages\\ManageUserRoles.js":"8"},{"size":149,"mtime":1611893308074,"results":"9","hashOfConfig":"10"},{"size":795,"mtime":1612598235564,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1610613282086,"results":"12","hashOfConfig":"10"},{"size":5582,"mtime":1612244793097,"results":"13","hashOfConfig":"10"},{"size":7303,"mtime":1612103213710,"results":"14","hashOfConfig":"10"},{"size":414,"mtime":1611818257144,"results":"15","hashOfConfig":"10"},{"size":675,"mtime":1611895579123,"results":"16","hashOfConfig":"10"},{"size":4379,"mtime":1612669469063,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"5x54uh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\index.js",[],["39","40"],"C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\App.js",[],"C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\reportWebVitals.js",[],["41","42"],"C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\pages\\Login.js",["43","44","45","46"],"\r\nimport { React, useState}from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport '../App.css'; \r\nimport { Link } from 'react-router-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {useForm } from '../util/hooks';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginTop: 300,\r\n      alignContent: \"center\"\r\n    },\r\n    fontType:{\r\n        fontFamily: font,\r\n        fontSize: 16\r\n    },\r\n    '@global': {\r\n        body: {\r\n            backgroundColor: theme.palette.common.white,\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(5, 0, 4),\r\n    },\r\n    container:{\r\n        alignItems:\"center\",\r\n        justify:\"center\",\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n\r\n  }));\r\n\r\n\r\n  const font =  \"'Merriweather', serif\";\r\n  \r\n  function Login (props) {\r\n\r\n    const [errors, setErrors ] = useState({});\r\n    const {onChange,onSubmit, values } = useForm(loginUser,{\r\n        username: '',\r\n        password: ''\r\n    });\r\n\r\n    const [login, {loading} ] = useMutation (LOGIN_USER, {\r\n        update(_,{data})\r\n        {\r\n            console.log(\"In the update function of the login page\");\r\n            console.log(\"Data from login\",data);\r\n            props.history.push('/ManageUserRoles');\r\n        }, \r\n        onError(err){\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n        }, variables : values\r\n    });\r\n\r\n    function loginUser() {\r\n        login();\r\n    }\r\n\r\n    const history = useHistory();\r\n    function handleClick() {\r\n        history.push(\"/Register\");\r\n      }\r\n\r\n      \r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" className={useStyles.container} class=\"background\">\r\n            <CssBaseline />\r\n            <div class=\"form\" >\r\n            <div className={useStyles.paper} class=\"innerForm\">\r\n            <Typography component=\"h1\" variant=\"h5\" className={styles.fontType} style={{ marginBottom : \"10px\" }}>\r\n            </Typography>\r\n                <form className={useStyles.form} class=\"formContainer\" onSubmit={onSubmit}>\r\n                    <Grid container spacing={2}>\r\n                       \r\n                        <Grid item xs={12} sm={12} >\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Username\"\r\n                                type=\"text\"\r\n                                autoComplete=\"username\"\r\n                                name=\"username\"\r\n                                error={errors.username ? true: false}\r\n                                value={values.username}\r\n                                onChange={onChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                error={errors.password ? true: false}\r\n                                value={values.password}\r\n                                onChange={onChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        className={useStyles.submit}\r\n                        color=\"primary\"\r\n                        style={{ marginTop : \"10px\" }}>\r\n                    <Typography component=\"h1\" variant=\"h5\" className={styles.fontType}>\r\n                    Login\r\n                    </Typography>\r\n                    </Button>\r\n                    \r\n                    <a href=\"#\" onClick={handleClick}> Don't have an account? Sign Up ? </a>\r\n                 </form>\r\n                 <div className=\"ui error message\">\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value=>(\r\n                            <li key={value}>{value}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div> \r\n            </div>\r\n        </Container>\r\n     \r\n    )\r\n}\r\n\r\n\r\nconst LOGIN_USER = gql `\r\nmutation  login($username:String! $password: String! ) {\r\n    login(username: $username password: $password){\r\n    id\r\n    email\r\n    username\r\n    creationTime\r\n    }\r\n}`;\r\n\r\nexport default Login;","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\pages\\Register.js",["47","48"],"import {React, useState, useContext }from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport  gql  from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginTop: 300,\r\n      alignContent: \"center\"\r\n    },\r\n    fontType:{\r\n        fontFamily: font,\r\n        fontSize: 16\r\n    },\r\n    '@global': {\r\n        body: {\r\n            backgroundColor: theme.palette.common.white,\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(5, 0, 4),\r\n    },\r\n    container:{\r\n        alignItems:\"center\",\r\n        justify:\"center\",\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n\r\n  }));\r\n\r\n  const font =  \"'Merriweather', serif\";  \r\n  function Register (props) {\r\n\r\n    const [ errors, setErrors ] = useState({});\r\n    const { onChange, onSubmit, values} = useForm (registerUser, {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    });\r\n\r\n\r\n    const [addUser, { loading }] = useMutation (REGISTER_USER,{\r\n        update(_, { data}){\r\n            console.log(data)\r\n            props.history.push('/');\r\n        },\r\n        onError(err){\r\n           setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n           console.log(\"setting erorrs:\",errors)\r\n        },\r\n        variables: values\r\n    });\r\n\r\n    console.log(\"Adduser\", addUser);\r\n    /*\r\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update(_, { data: { register: userData }}){\r\n              console.log(userData)\r\n              props.history.push('/');\r\n          },\r\n          onError(err){\r\n             setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n          },\r\n          variables: values\r\n      });\r\n      */\r\n    \r\n    function registerUser() {\r\n        addUser();\r\n    }\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" className={useStyles.container} class=\"background\">\r\n            <CssBaseline />\r\n            <div className=\"form\">\r\n            <div className={useStyles.paper} class=\"innerForm\">\r\n            <Typography component=\"h1\" variant=\"h5\" className={styles.fontType} style={{ marginBottom : \"10px\" }}>\r\n            </Typography>\r\n                <form className={useStyles.form} class=\"formContainer\" onSubmit={onSubmit}>\r\n                    <Grid container spacing={2}>\r\n                       \r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Name\"\r\n                                type=\"text\"\r\n                                error = { errors.username ? true:false }\r\n                                value = { values.username }\r\n                                onChange = { onChange }\r\n                                autoComplete=\"username\"\r\n                                name=\"username\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Email\"\r\n                                type=\"text\"\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                error = { errors.email ? true : false}\r\n                                value = { values.email }\r\n                                onChange= { onChange }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                autoComplete=\"password\"\r\n                                error = { errors.password ? true : false}\r\n                                value = { values.password }\r\n                                onChange = { onChange }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Confirm Password\"\r\n                                type=\"password\"\r\n                                id=\"confirmPassword\"\r\n                                name=\"confirmPassword\"\r\n                                autoComplete=\"confirmPassword\"\r\n                                error={ errors.confirmPassword ? true:false }\r\n                                value={ values.confirmPassword }\r\n                                onChange={onChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={useStyles.submit}\r\n                        style={{ marginTop : \"10px\" }}>\r\n                    <Typography component=\"h1\" variant=\"h5\" className={styles.fontType}>\r\n                    Register\r\n                    </Typography>\r\n                    </Button>\r\n                </form>\r\n                <div className=\"ui error message\">\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value=>(\r\n                            <li key={value}>{value}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                \r\n            </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n        email: $email\r\n      }\r\n    ) {\r\n      username\r\n      email\r\n      creationTime\r\n    }\r\n  }`;\r\n\r\nexport default Register;","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\util\\hooks.js",[],"C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\ApolloProvider.js",["49"],"import React from 'react';\r\nimport App from './App';\r\nimport  ApolloClient from 'apollo-client';\r\nimport { InMemoryCache } from '@apollo/client';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { setContext } from 'apollo-link-context';\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n    uri:'http://localhost:5000'\r\n})\r\n\r\n/*\r\nconst authLink = setContext(()=>{\r\n    const token = localStorage.getItem('jwtToken');\r\n\r\n})\r\n*/\r\n\r\nconst client = new ApolloClient({\r\n    link: httpLink,\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n\r\nexport default (\r\n    <ApolloProvider client={client}>\r\n   <App/> \r\n    </ApolloProvider>\r\n)","C:\\Users\\61468\\Desktop\\bugTracker\\client\\src\\pages\\ManageUserRoles.js",["50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":11,"column":10,"nodeType":"74","messageId":"75","endLine":11,"endColumn":14},{"ruleId":"72","severity":1,"message":"76","line":12,"column":27,"nodeType":"74","messageId":"75","endLine":12,"endColumn":33},{"ruleId":"72","severity":1,"message":"77","line":70,"column":20,"nodeType":"74","messageId":"75","endLine":70,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":144,"column":21,"nodeType":"80","endLine":144,"endColumn":55},{"ruleId":"72","severity":1,"message":"81","line":1,"column":26,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"77","line":66,"column":23,"nodeType":"74","messageId":"75","endLine":66,"endColumn":30},{"ruleId":"72","severity":1,"message":"82","line":7,"column":10,"nodeType":"74","messageId":"75","endLine":7,"endColumn":20},{"ruleId":"72","severity":1,"message":"83","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":20},{"ruleId":"72","severity":1,"message":"84","line":7,"column":8,"nodeType":"74","messageId":"75","endLine":7,"endColumn":12},{"ruleId":"72","severity":1,"message":"85","line":11,"column":8,"nodeType":"74","messageId":"75","endLine":11,"endColumn":27},{"ruleId":"72","severity":1,"message":"86","line":13,"column":8,"nodeType":"74","messageId":"75","endLine":13,"endColumn":26},{"ruleId":"78","severity":1,"message":"79","line":64,"column":9,"nodeType":"80","endLine":64,"endColumn":40},{"ruleId":"87","severity":1,"message":"88","line":65,"column":9,"nodeType":"80","endLine":65,"endColumn":65},{"ruleId":"78","severity":1,"message":"79","line":69,"column":9,"nodeType":"80","endLine":69,"endColumn":40},{"ruleId":"87","severity":1,"message":"88","line":71,"column":9,"nodeType":"80","endLine":71,"endColumn":70},{"ruleId":"78","severity":1,"message":"79","line":74,"column":9,"nodeType":"80","endLine":74,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":75,"column":9,"nodeType":"80","endLine":75,"endColumn":74},{"ruleId":"78","severity":1,"message":"79","line":78,"column":9,"nodeType":"80","endLine":78,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":79,"column":9,"nodeType":"80","endLine":79,"endColumn":69},{"ruleId":"78","severity":1,"message":"79","line":82,"column":9,"nodeType":"80","endLine":82,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":83,"column":9,"nodeType":"80","endLine":83,"endColumn":69},{"ruleId":"78","severity":1,"message":"79","line":86,"column":9,"nodeType":"80","endLine":86,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":87,"column":11,"nodeType":"80","endLine":87,"endColumn":80},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],["89"],["90"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useContext' is defined but never used.","'setContext' is defined but never used.","'makeStyles' is defined but never used.","'list' is defined but never used.","'personCircleOutline' is defined but never used.","'reorderFourOutline' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]