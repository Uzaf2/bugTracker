[{"/Users/usmanzafar/Desktop/bugTracker/client/src/index.js":"1","/Users/usmanzafar/Desktop/bugTracker/client/src/ApolloProvider.js":"2","/Users/usmanzafar/Desktop/bugTracker/client/src/App.js":"3","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Login.js":"4","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ViewProjectsList.js":"5","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateProject.js":"6","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Register.js":"7","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser.js":"8","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails.js":"9","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Users.js":"10","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageUserRoles.js":"11","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable2.js":"12","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateTicket.js":"13","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable.js":"14","/Users/usmanzafar/Desktop/bugTracker/client/src/components/SideAndNavbar.js":"15","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserTable.js":"16","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable.js":"17","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnel.js":"18","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnelQuery.js":"19","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable2.js":"20","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserList.js":"21","/Users/usmanzafar/Desktop/bugTracker/client/src/util/hooks.js":"22","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Accounts.js":"23","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TestUserRoles.js":"24","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TestUserTable.js":"25","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails2.js":"26","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Dashboard.js":"27","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketStatusBarChart.js":"28","/Users/usmanzafar/Desktop/bugTracker/client/src/components/DeveloperTicketsPieChart.js":"29","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketTypePieChart.js":"30","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketPriorityBarChart.js":"31","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageProjectUsers.js":"32","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectUserAssign.js":"33","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser2.js":"34","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TicketDetails.js":"35","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/NewLogin.js":"36","/Users/usmanzafar/Desktop/bugTracker/client/src/context/auth.js":"37","/Users/usmanzafar/Desktop/bugTracker/client/src/util/ProtectedRoute.js":"38","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketDetailsComponent.js":"39"},{"size":149,"mtime":1619586322423,"results":"40","hashOfConfig":"41"},{"size":895,"mtime":1619844131640,"results":"42","hashOfConfig":"41"},{"size":4710,"mtime":1619947800287,"results":"43","hashOfConfig":"41"},{"size":6301,"mtime":1620715332738,"results":"44","hashOfConfig":"41"},{"size":225,"mtime":1619692948729,"results":"45","hashOfConfig":"41"},{"size":3728,"mtime":1619702286979,"results":"46","hashOfConfig":"41"},{"size":7126,"mtime":1619692889554,"results":"47","hashOfConfig":"41"},{"size":4054,"mtime":1619693036266,"results":"48","hashOfConfig":"41"},{"size":1449,"mtime":1619692979527,"results":"49","hashOfConfig":"41"},{"size":406,"mtime":1619586263040,"results":"50","hashOfConfig":"41"},{"size":4767,"mtime":1619692989683,"results":"51","hashOfConfig":"41"},{"size":4181,"mtime":1619586238243,"results":"52","hashOfConfig":"41"},{"size":8315,"mtime":1619702439429,"results":"53","hashOfConfig":"41"},{"size":5618,"mtime":1619952917199,"results":"54","hashOfConfig":"41"},{"size":4932,"mtime":1619936880716,"results":"55","hashOfConfig":"41"},{"size":4021,"mtime":1619693162840,"results":"56","hashOfConfig":"41"},{"size":5830,"mtime":1619586238242,"results":"57","hashOfConfig":"41"},{"size":5122,"mtime":1619693071965,"results":"58","hashOfConfig":"41"},{"size":996,"mtime":1618575330299,"results":"59","hashOfConfig":"60"},{"size":4924,"mtime":1619693144480,"results":"61","hashOfConfig":"41"},{"size":1023,"mtime":1618575330300,"results":"62","hashOfConfig":"60"},{"size":414,"mtime":1619586263058,"results":"63","hashOfConfig":"41"},{"size":3358,"mtime":1619693197415,"results":"64","hashOfConfig":"41"},{"size":3052,"mtime":1619692934138,"results":"65","hashOfConfig":"41"},{"size":3586,"mtime":1619586238243,"results":"66","hashOfConfig":"41"},{"size":2182,"mtime":1620378433438,"results":"67","hashOfConfig":"41"},{"size":1247,"mtime":1619586263035,"results":"68","hashOfConfig":"41"},{"size":1892,"mtime":1619693152125,"results":"69","hashOfConfig":"41"},{"size":2726,"mtime":1619693087368,"results":"70","hashOfConfig":"41"},{"size":1957,"mtime":1619693158633,"results":"71","hashOfConfig":"41"},{"size":1789,"mtime":1619693125207,"results":"72","hashOfConfig":"41"},{"size":5478,"mtime":1619857913274,"results":"73","hashOfConfig":"41"},{"size":2477,"mtime":1619857291755,"results":"74","hashOfConfig":"41"},{"size":4030,"mtime":1619696940189,"results":"75","hashOfConfig":"41"},{"size":1268,"mtime":1619692869333,"results":"76","hashOfConfig":"41"},{"size":3806,"mtime":1619540247420,"results":"77","hashOfConfig":"60"},{"size":1426,"mtime":1619835756255,"results":"78","hashOfConfig":"41"},{"size":619,"mtime":1619867410816,"results":"79","hashOfConfig":"41"},{"size":7379,"mtime":1620385221384,"results":"80","hashOfConfig":"41"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1x5ez3q",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"83"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"83"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"83"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"83"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"83"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"83"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"83"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"83"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"83"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"83"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"83"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"83"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"83"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"83"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},"l0fpne",{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"83"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"135"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"83"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"83"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"83"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"83"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"83"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"83"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"83"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"83"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"83"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"83"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"83"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"83"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"83"},"/Users/usmanzafar/Desktop/bugTracker/client/src/index.js",[],["191","192"],"/Users/usmanzafar/Desktop/bugTracker/client/src/ApolloProvider.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/App.js",["193","194"],"import './App.css';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport { BrowserRouter as Router , Route, Switch } from 'react-router-dom';\nimport ProtectedRoute from './util/ProtectedRoute';\n\nimport {AuthProvider} from './context/auth';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\n\nimport ManageUserRoles from './pages/ManageUserRoles';\nimport UserTable from './components/UserTable';\nimport ViewProjectList from './pages/ViewProjectsList';\nimport SideAndNavbar from './components/SideAndNavbar';\nimport Users from './pages/Users';\nimport ProjectTable2 from './components/ProjectTable2';\nimport TicketsTable from './components/TicketsTable';\n\nimport AssignedPersonnel from './components/AssignedPersonnel';\nimport ProjectTable from './components/ProjectTable';\nimport Accounts from './pages/Accounts';\nimport TestUserTable from './components/TestUserTable';\nimport TestUserRoles from './pages/TestUserRoles';\nimport ProjectDetails2 from './pages/ProjectDetails2';\nimport Dashboard from './pages/Dashboard';\nimport TicketPriorityBarChart from './components/TicketPriorityBarChart';\nimport TicketTypePieChart from './components/TicketTypePieChart';\nimport TicketStatusBarChart from './components/TicketStatusBarChart';\nimport DeveloperTicketsPieChart from './components/DeveloperTicketsPieChart';\nimport ManageProjectUsers from './pages/ManageProjectUsers';\nimport TicketDetails from './pages/TicketDetails';\nimport TicketDetailsComponent from './components/TicketDetailsComponent';\n//////////////// They are causing problems with TextFields//////\nimport AssignUser from './pages/AssignUser';\nimport ProjectUserAssign from './pages/ProjectUserAssign';\nimport AssignUser2 from './pages/AssignUser2';\nimport CreateTicket from './pages/CreateTicket';\nimport ProjectDetails from './pages/ProjectDetails';\nimport CreateProject from './pages/CreateProject';\n///////////////////////////////////////////////////////////\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n        <AuthProvider>\n        <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route exact path=\"/Register\" component={Register} />\n          <ProtectedRoute exact path=\"/ManageUserRoles\" component={ManageUserRoles} />\n          <ProtectedRoute exact path=\"/UserTable\" component={UserTable} />\n          <ProtectedRoute exact path=\"/ViewProjectList\" component={ViewProjectList} />\n          <ProtectedRoute exact path=\"/SideAndNavbar\" component={SideAndNavbar} />\n          <ProtectedRoute exact path=\"/Users\" component={Users} />\n          <ProtectedRoute exact path=\"/ProjectTable2\" component={ProjectTable2} />\n          <ProtectedRoute exact path=\"/TicketsTable\" component={TicketsTable} />\n          <ProtectedRoute exact path=\"/AssignedPersonnel\" component={AssignedPersonnel} />\n          <ProtectedRoute exact path=\"/ProjectTable\" component={ProjectTable} />\n          <ProtectedRoute exact path=\"/Accounts\" component={Accounts} />\n          <ProtectedRoute exact path=\"/TestUserTable\" component={TestUserTable} />\n          <ProtectedRoute exact path=\"/TestUserRoles\" component={TestUserRoles} />\n          <ProtectedRoute exact path=\"/ProjectDetails2\" component={ProjectDetails2} />\n          <ProtectedRoute exact path=\"/Dashboard\" component={Dashboard} />\n          <ProtectedRoute exact path=\"/TicketPriorityBarChart\" component={TicketPriorityBarChart} />\n          <ProtectedRoute exact path=\"/TicketTypePieChart\" component={TicketTypePieChart} />\n          <ProtectedRoute exact path=\"/TicketStatusBarChart\" component={TicketStatusBarChart} />\n          <ProtectedRoute exact path=\"/DeveloperTicketsPieChart\" component={DeveloperTicketsPieChart} />\n          <ProtectedRoute exact path=\"/ManageProjectUsers\" component={ManageProjectUsers} />\n          <ProtectedRoute exact path=\"/TicketDetails\" component={TicketDetails} />\n          <ProtectedRoute exact path=\"/TicketDetailsComponent\" component={TicketDetailsComponent} />\n          <ProtectedRoute exact path=\"/CreateTicket\" component={CreateTicket} />\n          <ProtectedRoute exact path=\"/ProjectDetails\" component={ProjectDetails} />\n          <ProtectedRoute exact path=\"/AssignUser\" component={AssignUser} />\n          <ProtectedRoute exact path=\"/AssignUser2\" component={AssignUser2} />\n          <ProtectedRoute exact path=\"/ProjectUserAssign\" component={ProjectUserAssign} />\n          <ProtectedRoute exact path=\"/CreateProject\" component={CreateProject} />\n          </Switch>\n        </Router>\n        </AuthProvider>\n  );\n}\n\nexport default App;\n","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Login.js",["195","196","197","198"],"/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ViewProjectsList.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateProject.js",["199"],"import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n    label: {\r\n        fontSize: 12,\r\n        marginLeft: '30%',\r\n        fontFamily: 'sans-serif',\r\n        fontStyle:'italic',\r\n        fontWeight:'600'\r\n    },\r\n    input:{\r\n        width: '40%',\r\n        padding: '12px 20px',\r\n        margin: '8px 0',\r\n        display: 'inline-block',\r\n        borderWidth: '1px',\r\n        borderColor: '#ddd',\r\n        borderRadius: '4px', \r\n        boxSizing: 'border-box',\r\n        marginLeft: '30%',\r\n        marginRight: '30%'\r\n    },\r\n    submit:{\r\n        width: '40%',\r\n        backgroundColor: '#262B40',\r\n        color: 'white',\r\n        padding: '14px 20px',\r\n        margin: '8px 0',\r\n        display: 'inline-block',\r\n        borderWidth: '4px',\r\n        borderRadius: '4px', \r\n        marginLeft: '30%',\r\n        marginRight: '30%',\r\n        '&:hover': {\r\n            background: \" #F5A623\",\r\n         },\r\n    },\r\n description: {\r\n    width: '620px',\r\n    height: '200px',\r\n    marginLeft: '30%',\r\n    marginRight: '30%'\r\n  },\r\n  title: {\r\n      marginTop: '10%',\r\n      paddingTop: '100px',\r\n      marginLeft: \"43%\",\r\n      fontSize: 18,\r\n      fontWeight: '800',\r\n      fontFamily: 'sans-serif'\r\n  }\r\n});\r\n\r\nfunction CreateProject(props) {\r\n\r\n    const classes = useStyles();\r\n    const [errors, setErrors]= useState({});\r\n    const {onChange, onSubmit, values}= useForm(createProject, {\r\n        name:'',\r\n        description: ''\r\n    });\r\n    \r\n    const [create, {loading}] = useMutation (CREATE_PROJECT,{\r\n        update(_,  {data}){\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n        variables:values\r\n    });\r\n    \r\n    function createProject () {\r\n        create();\r\n    }\r\n\r\n return (\r\n<body>\r\n\r\n        <SideAndNavbar/>\r\n          <form onSubmit={onSubmit} class=\"inputForm\">\r\n            <label for=\"name\"\r\n            className={classes.label}>Project Name</label>\r\n            <input \r\n            type=\"text\" \r\n            id=\"name\" \r\n            name=\"name\" \r\n            className={classes.input}\r\n            placeholder=\"Project name..\" \r\n            autoComplete=\"name\"\r\n            error={errors.name ? true:false}\r\n            value={values.name}\r\n            onChange={onChange}/>\r\n            <label for=\"description\" className={classes.label}>Project Description</label>\r\n            <textarea \r\n            className={classes.description} \r\n            type=\"text\" \r\n            id=\"description\" \r\n            name=\"description\" \r\n            placeholder=\"Project desc..\" required\r\n            error={errors.description  ? true:false}\r\n            value={values.description}\r\n            onChange={onChange}></textarea>\r\n            <input class=\"submitBtn\"  className={classes.submit} type=\"submit\" value=\"Create Project\" />\r\n          </form>\r\n          <div className=\"ui error message\">\r\n                <ul className=\"list\">\r\n                    {Object.values(errors).map(value=>(\r\n                        <li key={value}>{value}</li>\r\n                    ))}\r\n                </ul>\r\n          </div>\r\n   </body>\r\n )\r\n}\r\n\r\nconst CREATE_PROJECT =  gql `\r\nmutation createProject($name: String! $description: String!) {\r\n    createProject(name:$name description: $description) {\r\n        name description\r\n    }     \r\n}`;\r\n\r\nexport default CreateProject;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Register.js",["200"],"import { React, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { TextField } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inputType:{\r\n        width: '100%'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: 300,\r\n        alignContent: \"center\"\r\n    },\r\n    fontType: {\r\n        fontFamily: font,\r\n        fontSize: 16\r\n    },\r\n    '@global': {\r\n        body: {\r\n            backgroundColor: theme.palette.common.white,\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n        height: '100%'\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(5, 0, 4),\r\n    },\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n        alignItems: \"center\",\r\n        justify: \"center\",\r\n    },\r\n\r\n}));\r\n\r\nconst font = \"'Merriweather', serif\";\r\nfunction Register(props) {\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const { onChange, onSubmit, values } = useForm(registerUser, {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    });\r\n\r\n\r\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update(_, { data }) {\r\n            props.history.push('/');\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n        variables: values\r\n    });\r\n\r\n    function registerUser() {\r\n        addUser();\r\n    }\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" className={useStyles.container} class=\"background\">\r\n            <CssBaseline />\r\n            <div className=\"form\">\r\n                <div className={useStyles.paper} class=\"innerForm\">\r\n                    <Typography component=\"h1\" variant=\"h5\" className={styles.fontType} style={{ marginBottom: \"10px\" }}>\r\n                    </Typography>\r\n                    <form className={useStyles.form} class=\"formContainer1\" onSubmit={onSubmit}>\r\n                        <Grid container spacing={2}>\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    id=\"username\"\r\n                                    label=\"Name\"\r\n                                    error={errors.username ? true : false}\r\n                                    value={values.username}\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    autoComplete=\"username\"\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email\"\r\n                                    type=\"text\"\r\n                                    error={errors.email ? true : false}\r\n                                    value={values.email}\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    id=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    error={errors.password ? true : false}\r\n                                    value={values.password}\r\n                                    name=\"password\"\r\n                                    autoComplete=\"password\"\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    label=\"Confirm Password\"\r\n                                    type=\"password\"\r\n                                    id=\"confirmPassword\"\r\n                                    name=\"confirmPassword\"\r\n                                    autoComplete=\"confirmPassword\"\r\n                                    error={errors.confirmPassword ? true : false}\r\n                                    value={values.confirmPassword}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={useStyles.submit}\r\n                            style={{ marginTop: \"10px\" }}>\r\n                            <Typography component=\"h1\" variant=\"h5\" className={styles.fontType}>\r\n                                Register\r\n                    </Typography>\r\n                        </Button>\r\n                    </form>\r\n                    <div className=\"ui error message\">\r\n                        <ul className=\"list\">\r\n                            {Object.values(errors).map(value => (\r\n                                <li key={value}>{value}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n        email: $email\r\n      }\r\n    ) {\r\n      username\r\n      email\r\n      creationTime\r\n    }\r\n  }`;\r\n\r\nexport default Register;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser.js",["201","202","203","204","205"],"import React, { useState } from 'react';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n      width: '100%',\r\n  },\r\n  container: {\r\n      maxHeight: 440,\r\n  },\r\n  label: {\r\n      fontSize: 12,\r\n      marginLeft: '30%',\r\n      fontFamily: 'sans-serif',\r\n      fontStyle:'italic',\r\n      fontWeight:'600'\r\n  },\r\n  input:{\r\n      width: '40%',\r\n      padding: '12px 20px',\r\n      margin: '8px 0',\r\n      display: 'inline-block',\r\n      borderWidth: '1px',\r\n      borderColor: '#ddd',\r\n      borderRadius: '4px', \r\n      boxSizing: 'border-box',\r\n      marginLeft: '30%',\r\n      marginRight: '30%'\r\n  },\r\n  submit:{\r\n      width: '40%',\r\n      backgroundColor: '#262B40',\r\n      color: 'white',\r\n      padding: '14px 20px',\r\n      margin: '8px 0',\r\n      display: 'inline-block',\r\n      borderWidth: '4px',\r\n      borderRadius: '4px', \r\n      marginLeft: '30%',\r\n      marginRight: '30%',\r\n      '&:hover': {\r\n          background: \" #F5A623\",\r\n       },\r\n  },\r\ndescription: {\r\n  width: '530px',\r\n  height: '200px',\r\n  marginLeft: '30%',\r\n  marginRight: '30%'\r\n},\r\ntitle: {\r\n    marginTop: '10%',\r\n    paddingTop: '100px',\r\n    marginLeft: \"43%\",\r\n    fontSize: 18,\r\n    fontWeight: '800',\r\n    fontFamily: 'sans-serif'\r\n}\r\n});\r\n\r\nfunction AssignUser(props) {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const [formError,setFormError] = useState(false);\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [projectId, setProjectId] = useState(\"\");\r\n    const index = props.location.state.index - 1;\r\n    const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n    const projectsQuery = useQuery(FETCH_PROJECTS_QUERY);\r\n\r\n    const [ errors, setErrors ] = useState({});\r\n\r\n    const [assignUser,{loading1} ] = useMutation(ASSIGN_USER, {\r\n      update(_,{data}){\r\n\r\n        success();\r\n      }, \r\n      onError(err){\r\n          setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n      }, variables: { userId, projectId }\r\n     \r\n  });\r\n  \r\n    var rows= ['Select the user'];\r\n    if (loading) \r\n         return <p>Loading...</p>;\r\n    else {\r\n        var length = data.getUsers.length;\r\n        for(var i=0;i<length;i++)\r\n        {\r\n            rows.push(data.getUsers[i].username )\r\n        }    \r\n    }\r\n\r\n    function AssignUser()\r\n    {\r\n      assignUser();\r\n    }\r\n\r\n    function success() {\r\n      alert(\"User assignned to the project\");\r\n    }\r\n\r\n    function handleOnClick(event) {\r\n\r\n        var x = document.getElementById(\"selectValue\");\r\n        const valueMatch = x.value;\r\n        var indexValue;\r\n        const length = data.getUsers.length;\r\n        for(var i=0;i<length;i++)\r\n        {\r\n            if (valueMatch === data.getUsers[i].username)\r\n            {\r\n                indexValue = i;\r\n            }\r\n        } \r\n\r\n        setUserId(data.getUsers[indexValue].id);\r\n        setProjectId(projectsQuery.data.getProjects[index].id);\r\n\r\n        AssignUser();\r\n      }  \r\n      \r\n return (\r\n<body>\r\n        <SideAndNavbar/>\r\n        <div>\r\n        <label className={classes.label} for=\"name\">Assign Users to Projects</label>\r\n         <select className={classes.input} id=\"selectValue\"  onChange={handleOnClick} >\r\n         {rows.map(time => {\r\n           return (\r\n             <option value={time}>{time}</option>\r\n           )\r\n         })}\r\n    </select>\r\n   \r\n        </div>\r\n   </body>\r\n )\r\n}\r\n\r\nconst FETCH_USERS_QUERY = gql`\r\n{\r\n  getUsers{\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getProjects{\r\n  name\r\n  description\r\n  id\r\n}\r\n}`;\r\n\r\nconst ASSIGN_USER =  gql `\r\nmutation assignUser($projectId: String! $userId: String!) {\r\n  assignUser(projectId:$projectId userId: $userId) {\r\n        name description id\r\n    }     \r\n}`;\r\nexport default AssignUser;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails.js",["206"],"import React, { useState } from 'react';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport ProjectTable2 from '../components/ProjectTable2';\r\nimport AssignedPersonnel from '../components/AssignedPersonnel';\r\nimport TicketsTable2 from '../components/TicketsTable2';\r\nimport '../css/projectDetails.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ProjectDetails(props) {\r\n  const history = useHistory();\r\nvar value =  props.history.location.state.index;\r\n\r\nfunction AssignUser() {\r\n\r\n  history.push({\r\n    pathname: '/AssignUser',\r\n    search: '?update=true',  // query string\r\n    state: {  // location state\r\n      index: value, \r\n    },\r\n  }); \r\n\r\n}\r\n\r\nfunction CreateTicket() {\r\n  history.push('/CreateTicket');\r\n}\r\n\r\n return (\r\n<body>\r\n    <SideAndNavbar/>\r\n      \r\n    <div className=\"bottomDiv\">\r\n    <Button variant=\"contained\" color=\"primary\" onClick={AssignUser} className=\"btn1\">Assign User</Button>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={CreateTicket} className=\"btn2\">Create Ticket</Button>\r\n    </div>\r\n     \r\n    <div className=\"firstDiv\">\r\n    \r\n    <ProjectTable2 index={value}/> \r\n    </div>\r\n    <div className=\"main\">\r\n    <AssignedPersonnel index={value}/>\r\n    <div className=\"secondMain\">\r\n    <TicketsTable2 className=\"ticketsTable\"/>\r\n    </div>\r\n    </div>\r\n    \r\n    \r\n   </body>\r\n )\r\n}\r\n\r\n\r\nexport default ProjectDetails;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Users.js",["207","208"],"import React from 'react';\r\nimport {useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nfunction Users () {\r\n    const { loading, data: { getUsers:users } } = useQuery(FETCH_USERS_QUERY);\r\n    return (\r\n       <div>\r\n       </div>\r\n        );\r\n}\r\n\r\nconst FETCH_USERS_QUERY = gql `\r\n{\r\n  getUsers{\r\n  id\r\n  creationTime\r\n  username\r\n  role\r\n  access\r\n}\r\n}\r\n\r\n`;\r\n\r\nexport default Users;\r\n","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageUserRoles.js",["209","210","211","212","213","214","215"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport UserTable from '../components/UserTable';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\nimport { useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n\r\n  },\r\n  banner:{\r\n    backgroundColor: '#262B40',\r\n    height: '5%',\r\n    width:'93%',\r\n    padding: '2%',\r\n    marginLeft:'1%'\r\n    },\r\n    heading:{\r\n      color: 'white'\r\n    },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  firstDiv: {\r\n    marginLeft: '60px'\r\n  },\r\n  bottomDiv: {\r\n    height:'10%',\r\n    marginLeft:'20%',\r\n    marginTop: '20px'\r\n  }, btn1: {\r\n    marginTop: '20px'\r\n  },\r\n  btn2: {\r\n    marginTop: '20px'\r\n  },\r\n  root: {\r\n    width: '100%',\r\n},\r\ncontainer: {\r\n    maxHeight: 440,\r\n},\r\nlabel: {\r\n    fontSize: 12,\r\n    marginLeft: '30%',\r\n    fontFamily: 'sans-serif',\r\n    fontStyle:'italic',\r\n    fontWeight:'600'\r\n},\r\ninput:{\r\n    width: '100%',\r\n    padding: '12px 20px',\r\n    margin: '8px 0',\r\n    display: 'inline-block',\r\n    borderWidth: '1px',\r\n    borderColor: '#ddd',\r\n    borderRadius: '4px', \r\n    boxSizing: 'border-box',\r\n    marginLeft: '25%',\r\n    marginRight: '30%'\r\n},\r\nsubmit:{\r\n    width: '60%',\r\n    height: '8%',\r\n    backgroundColor: '#262B40',\r\n    color: 'white',\r\n    padding: '14px 20px',\r\n    margin: '8px 0',\r\n    display: 'inline-block',\r\n    borderWidth: '4px',\r\n    borderRadius: '10px', \r\n    marginLeft: '15%',\r\n    marginRight: '30%',\r\n    '&:hover': {\r\n        background: \"#F5A623\",\r\n        borderRadius: '25px'\r\n     },\r\n},\r\ndescription: {\r\nwidth: '530px',\r\nheight: '200px',\r\nmarginLeft: '30%',\r\nmarginRight: '30%'\r\n},\r\ntitle: {\r\n  width: '50%',\r\n  marginLeft: \"43%\",\r\n  fontSize: 18,\r\n  fontWeight: '800',\r\n  fontFamily: 'sans-serif'\r\n}\r\n});\r\n\r\nfunction ManageUserRoles(props) {\r\n\r\n  const classes = useStyles();\r\n  const [errors, setErrors]= useState({});\r\n  const [usersValue, setUserValue] = useState({});\r\n\r\n  const {onChange, onSubmit, values}= useForm(assignRole, {\r\n      name:'',\r\n      role: ''\r\n  });\r\n  \r\n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n  \r\n  const [assign, {loading:assignLoading}] = useMutation (ASSIGN_ROLE,{\r\n      update(_,  {data}){\r\n     \r\n      },\r\n      onError(err) {\r\n      },\r\n      variables:values\r\n  });\r\n  \r\n  \r\n  var rows= ['Select the user'];\r\n  if (loading) \r\n       return <p>Loading...</p>;\r\n  else {\r\n      var length = data.getUsers.length;\r\n      for(var i=0;i<length;i++)\r\n      {\r\n          rows.push(data.getUsers[i].username)\r\n      }    \r\n  }\r\n\r\n  function assignRole () {\r\n    assign();\r\n}\r\n\r\n  return (\r\n    <body>\r\n    <SideAndNavbar/>\r\n   \r\n    <form onSubmit={onSubmit} class=\"inputForm\">\r\n   \r\n      <div id=\"main\" class=\"container\">\r\n        <div class=\"leftSide\">\r\n        \r\n          <div class=\"custom-select1\">\r\n          <h2 className={classes.title}>Manage User Roles</h2>\r\n            <label for=\"cars\" className={classes.label}>Select 1 or more Users:</label>\r\n            <br/>\r\n            <select className={classes.input} id=\"name\" name=\"name\" onChange={onChange} value={values.name}>\r\n         {rows.map(time => {\r\n           return (\r\n             <option value={time}> {time} </option>\r\n           )\r\n         })}\r\n        </select>\r\n          </div>\r\n          \r\n          <div class=\"custom-select2\">\r\n            <label for=\"cars\" class=\"label2\" className={classes.label}>Select the Role to assign:</label>\r\n            <br/>\r\n            <select className={classes.input} id=\"role\" name=\"role\" onChange={onChange} value={values.role}>\r\n              <option value=\"0\">--Select Role/None--:</option>\r\n              <option value=\"Admin\">Admin</option>\r\n              <option value=\"Demo Admin\">Demo_Admin</option>\r\n              <option value=\"Demo Developer\">Demo_Developer</option>\r\n              <option value=\"Demo Project Manager\">Demo_Project Manager</option>\r\n            </select>\r\n          </div>\r\n\r\n          <Button className={classes.submit} variant=\"contained\" color=\"primary\" onClick={assignRole()}>\r\n          Assign\r\n          </Button>\r\n         </div>\r\n       \r\n          <div class=\"rightSide\">\r\n            <UserTable class=\"userTable\" />\r\n          </div>\r\n      </div>\r\n      </form>\r\n    </body>\r\n  );\r\n}\r\n\r\nconst ASSIGN_ROLE = gql`\r\n  mutation  assignRole ($name: String! $role: String!){\r\n    assignRole (name: $name role: $role) \r\n  }`;\r\n\r\n  const FETCH_USERS_QUERY = gql`\r\n{\r\n  getUsers {\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\nexport default ManageUserRoles;\r\n","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable2.js",["216","217","218"],"import React, {useCallback} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\n\r\nconst useStyles = makeStyles({\r\n  banner:\r\n  {\r\n  backgroundColor: '#262B40',\r\n  height: '5%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  root: {\r\n    width: '170%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  { id: 'description', label: 'Description', minWidth: 100 },\r\n];\r\n\r\nfunction createData(name, description) {\r\n  return { name, description };\r\n}\r\n\r\nfunction ProjectTable2(props) {\r\n\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const index = props.index-1;\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\r\n\r\n  var rows = [];\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n    //var length = data.getProjects.length;\r\n    //for (var i = 0; i < ; i++) {\r\n      rows[index] = createData(data.getProjects[index].name, data.getProjects[index].description)\r\n    //}\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n\r\n  return (\r\n    <body>\r\n      <div className=\"Table\">\r\n        <div id=\"main\" class=\"main\">\r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n              \r\n            <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Project Details</h3>\r\n          </div>\r\n\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getProjects{\r\n  name\r\n  description\r\n}\r\n}`;\r\n\r\n\r\n\r\n\r\n\r\nexport default ProjectTable2;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateTicket.js",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\nimport { useQuery } from '@apollo/client';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n    label: {\r\n        fontSize: 12,\r\n        marginLeft: '30%',\r\n        fontFamily: 'sans-serif',\r\n        fontStyle:'italic',\r\n        fontWeight:'600'\r\n    },\r\n    input:{\r\n        width: '40%',\r\n        padding: '12px 20px',\r\n        margin: '8px 0',\r\n        display: 'inline-block',\r\n        borderWidth: '1px',\r\n        borderColor: '#ddd',\r\n        borderRadius: '4px', \r\n        boxSizing: 'border-box',\r\n        marginLeft: '30%',\r\n        marginRight: '30%'\r\n    },\r\n    submit:{\r\n        width: '40%',\r\n        backgroundColor: '#262B40',\r\n        color: 'white',\r\n        padding: '14px 20px',\r\n        margin: '8px 0',\r\n        display: 'inline-block',\r\n        borderWidth: '4px',\r\n        borderRadius: '4px', \r\n        marginLeft: '30%',\r\n        marginRight: '30%',\r\n        '&:hover': {\r\n            background: \" #F5A623\",\r\n         },\r\n    },\r\n description: {\r\n    width: '620px',\r\n    height: '200px',\r\n    marginLeft: '30%',\r\n    marginRight: '30%'\r\n  },\r\n  title: {\r\n      marginTop: '10%',\r\n      paddingTop: '100px',\r\n      marginLeft: \"43%\",\r\n      fontSize: 18,\r\n      fontWeight: '800',\r\n      fontFamily: 'sans-serif'\r\n  }\r\n});\r\n\r\nfunction CreateTicket(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [errors, setErrors]= useState({});\r\n    const {onChange, onSubmit, values}= useForm(createProject, {\r\n        \r\n        title:'',\r\n        description: '',\r\n        assignedProjectInput: '',\r\n        assignedDeveloperInput: '',\r\n        priority: '',\r\n        type: '',\r\n        status: ''\r\n    });\r\n    \r\n    const [create, {loading}] = useMutation (CREATE_TICKET,{\r\n        update(_,  {data}){\r\n        },\r\n        onError(err) {\r\n        },\r\n        variables:values\r\n    });\r\n\r\n    const {loading:usersloading, data: users} = useQuery (GET_USERS);\r\n    const {loading:projectsloading, data:projects} = useQuery (GET_PROJECTS);\r\n    \r\n    if (projects!=null)\r\n    {       \r\n        const length = projects.getProjects.length; \r\n        var projectsArray = [];\r\n        for (var i=0;i<projects.getProjects.length; i++)\r\n        {\r\n            projectsArray.push(projects.getProjects[i].name);\r\n        }\r\n    \r\n        var select = document.getElementById(\"assignedProjectInput\");   \r\n        \r\n        if (select!= null)\r\n        {\r\n            if (select.length < length)\r\n        {\r\n            // Put a check here\r\n            for(var i = 0; i < projectsArray.length; i++) {\r\n            var opt = projectsArray[i];\r\n            var el = document.createElement(\"option\");\r\n            el.textContent = opt;\r\n            el.value = opt;\r\n            select.appendChild(el);\r\n            }\r\n        }\r\n\r\n        }\r\n    }\r\n    if (users!=null)\r\n    {\r\n        const length = users.getUsers.length; \r\n        var usernames = [];\r\n        \r\n        for (var i=0;i<users.getUsers.length; i++)\r\n        {\r\n           usernames.push(users.getUsers[i].username);\r\n        }\r\n    \r\n        var select = document.getElementById(\"assignedDeveloperInput\");\r\n       \r\n        if (select != null)\r\n        {\r\n            if (select.length< length)\r\n            {\r\n                 // Put a check here\r\n                for(var i = 0; i < usernames.length; i++) {\r\n                var opt = usernames[i];\r\n                var el = document.createElement(\"option\");\r\n                el.textContent = opt;\r\n                el.value = opt;\r\n                select.appendChild(el);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function createProject () {\r\n        create();\r\n    }\r\n return (\r\n<body>\r\n\r\n        <SideAndNavbar/>\r\n          <form onSubmit={onSubmit} class=\"inputForm\">\r\n            <label className={classes.label}\r\n            for=\"title\">Ticket Title</label>\r\n            <input \r\n            type=\"text\" \r\n            id=\"title\" \r\n            name=\"title\" \r\n            className={classes.input}\r\n            placeholder=\"Ticket Title..\" \r\n            autoComplete=\"title\"\r\n            error={errors.title ? true:false}\r\n            value={values.title}\r\n            onChange={onChange}/>\r\n            <label className={classes.label} for=\"description\">Ticket Description</label>\r\n            <textarea \r\n            className={classes.description} \r\n            type=\"text\" \r\n            id=\"description\" \r\n            name=\"description\" \r\n            placeholder=\"Project desc..\" required\r\n            error={errors.description}\r\n            value={values.description}\r\n            onChange={onChange}/>\r\n            <label className={classes.label} for=\"\">Assigned Project</label>\r\n            <select className={classes.input} id=\"assignedProjectInput\" name=\"assignedProjectInput\"\r\n            value={values.assignedProjectInput} onChange={onChange}>\r\n            </select>\r\n            <label className={classes.label} for=\"assignedDeveloperInput\">Assigned Developer</label>\r\n            <select className={classes.input} id=\"assignedDeveloperInput\" name=\"assignedDeveloperInput\"\r\n            id=\"assignedDeveloperInput\" name=\"assignedDeveloperInput\"\r\n            value={values.assignedDeveloperInput} onChange={onChange}>\r\n            </select>\r\n            <label className={classes.label} for=\"priority\">Priority</label>\r\n            <select id=\"priority\"\r\n            value={values.priority}\r\n            name=\"priority\"\r\n            className={classes.input}\r\n            onChange={onChange}>\r\n            <option value=\"Low\">Low</option>\r\n            <option value=\"Medium\">Medium</option>\r\n            <option value=\"High\">High</option>\r\n            </select>\r\n            <label className={classes.label} for=\"type\">Ticket Type</label>\r\n            <select id=\"type\" name=\"type\"\r\n            value={values.type}\r\n            className={classes.input}\r\n            id=\"type\"\r\n            name=\"type\"\r\n            onChange={onChange}>\r\n            <option value=\"Bugs/Error\">Bugs/Error</option>\r\n            <option value=\"Feature Requests\">Feature Requests</option>\r\n            <option value=\"Other Comments\">Other Comments</option>\r\n            <option value=\"Training/Document Requests\">Training/Document Requests</option>\r\n            </select>\r\n            <label className={classes.label} for=\"ticketStatus\">Ticket Status</label>\r\n            <select name=\"status\"\r\n            className={classes.input}\r\n            value={values.status}\r\n            id=\"status\" name=\"status\"\r\n            onChange={onChange}>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"open\">Open</option>\r\n            <option value=\"inprogress\">In Progress</option>\r\n            </select>\r\n            <input className={classes.submit} type=\"submit\" value=\"Create Ticket\"/>\r\n          </form>\r\n          <div className=\"ui error message\">\r\n                <ul className=\"list\">\r\n                    {Object.values(errors).map(value=>(\r\n                        <li key={value}>{value}</li>\r\n                    ))}\r\n                </ul>\r\n          </div>\r\n   </body>\r\n )\r\n}\r\n\r\nconst CREATE_TICKET =  gql `\r\nmutation createTicket($title: String! $description: String! $assignedProjectInput: String!\r\n    $assignedDeveloperInput: String! $priority: String!  $status: String! $type: String!) {\r\n    \r\n    createTicket(title:$title description: $description assignedProjectInput: $assignedProjectInput \r\n    assignedDeveloperInput: $assignedDeveloperInput priority:$priority status: $status type: $type) {\r\n    \r\n    id\r\n    title\r\n    description\r\n    priority \r\n    status\r\n    type\r\n    createdAt\r\n    updatedAt\r\n    \r\n}     \r\n}`;\r\n\r\nconst GET_USERS = gql`\r\n{\r\n    getUsers {\r\n        id \r\n        username\r\n        email\r\n        creationTime\r\n        role \r\n        access\r\n    }\r\n}\r\n`;\r\n\r\nconst GET_PROJECTS = gql` \r\n{\r\n    getProjects {\r\n        id \r\n        name\r\n        description\r\n        users\r\n        tickets \r\n    }\r\n}  `;\r\nexport default CreateTicket;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable.js",["234"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/ticketsTable.css';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '1000px',\r\n    marginLeft: '5.5%',\r\n    marginTop:'5%'\r\n  },\r\n  banner:{\r\n  backgroundColor: '#262B40',\r\n  height: '15%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  \r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 100 },\r\n  { id: 'description', label: 'Description', minWidth: 100 },\r\n  { id: 'priority', label: 'Priority', minWidth: 100 },\r\n  { id: 'status', label: 'Status', minWidth: 100 },\r\n  { id: 'created', label: 'Creation Time and Date', minWidth: 100 },\r\n  { id: 'editDetails', label: 'Edit Ticket', minWidth: 100 },\r\n];\r\n\r\nfunction createData(name, description, priority, status, created, editDetails) {\r\n  return { name, description, priority, status, created, editDetails };\r\n}\r\n\r\nfunction TicketsTable() {\r\n\r\n  var valueNumber = 0;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\r\n\r\n  var rows = [];\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n    var length = data.getTickets.length;\r\n    for (var i = 0; i < length; i++) {\r\n\r\n     var time = data.getTickets[i].createdAt.split('T')[1];\r\n\r\n     var date = data.getTickets[i].createdAt.substring(0, data.getTickets[i].createdAt.indexOf(\"T\"));\r\n     time = time.slice(0, -5); \r\n     var dateTime = date+ \"\\t\\t\"+time;\r\n\r\n    rows[i] = createData(data.getTickets[i].title, data.getTickets[i].description \r\n    ,data.getTickets[i].priority, data.getTickets[i].status, dateTime, 'Edit Details');\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  function HandleOnClick(props, rowsArray) {\r\n   \r\n    console.log(\"Props\", props);\r\n    history.push({\r\n      pathname: '/TicketDetailsComponent',\r\n      search: '?update=true',  // query string\r\n      state: {  // location state\r\n        index: props, \r\n        array: rowsArray\r\n      },\r\n    }); \r\n\r\n  }\r\n\r\n  function RenderElement(value, value2, value3) {\r\n    if (value2.id === \"editDetails\") {\r\n      return <a  onClick={() => HandleOnClick(value3, rows)} className=\"link\"> {value} </a>;\r\n    }\r\n    else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <body>\r\n      <div>\r\n        <SideAndNavbar></SideAndNavbar>\r\n        <div id=\"main\" class=\"main\">\r\n          <Paper className={classes.root}>\r\n          <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Tickets Table</h3>\r\n          <p className={classes.heading}>All the tickets you have in the database</p>\r\n          </div>\r\n            <TableContainer className={classes.container}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    valueNumber++;\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>    \r\n                                {RenderElement(value, column, valueNumber)}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getTickets{\r\n    title\r\n    description\r\n    priority\r\n    status\r\n    type\r\n    createdAt\r\n    updatedAt\r\n      }\r\n}`;\r\n\r\nexport default TicketsTable;\r\n","/Users/usmanzafar/Desktop/bugTracker/client/src/components/SideAndNavbar.js",["235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"import '../css/main.css';\r\nimport {useContext} from 'react';\r\nimport grid from '../icons/grid-outline.svg';\r\nimport homeIcon from '../icons/home-outline.svg';\r\nimport layers from '../icons/layers-outline.svg';\r\nimport peopleCirle from '../icons/people-circle-outline.svg';\r\nimport personAddOutline from '../icons/person-add-outline.svg';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AuthContext } from '../context/auth';\r\n\r\n/*\r\n        <a className=\"section\" href=\"#section\" onClick={openNav}>\r\n          Open Sidebar\r\n        </a>\r\n        <a className=\"section\" href=\"#section\" onClick={closeNav}>\r\n          Close Sidebar\r\n          </a>\r\n          */\r\nfunction SideAndNavbar(props) {\r\n  const {user, logout} = useContext(AuthContext);\r\n  const history = useHistory();\r\n \r\n  function openNav(e) {\r\n    document.getElementById(\"mySidebar\").style.width = \"250px\";\r\n    document.getElementById(\"main\").style.marginLeft = \"250px\";\r\n\r\n    document.getElementById('navName').style.fontSize = '0.75rem';\r\n    document.getElementById('navName1').style.fontSize = '0.75rem';\r\n    document.getElementById('navName2').style.fontSize = '0.75rem';\r\n    document.getElementById('navName3').style.fontSize = '0.75rem';\r\n    document.getElementById('navName4').style.fontSize = '0.75rem';\r\n    document.getElementById('navName5').style.fontSize = '';\r\n\r\n    document.getElementById('grid').style.width = '30px';\r\n    document.getElementById('grid1').style.width = '30px';\r\n    document.getElementById('grid2').style.width = '30px';\r\n    document.getElementById('grid3').style.width = '30px';\r\n    document.getElementById('grid4').style.width = '30px';\r\n    document.getElementById('grid5').style.width = '30px';\r\n  }\r\n\r\n  function closeNav(e) {\r\n    document.getElementById('mySidebar').style.width = '60px';\r\n    document.getElementById('main').style.marginLeft = '60px';\r\n\r\n    document.getElementById('navName').style.fontSize = '0px';\r\n    document.getElementById('navName1').style.fontSize = '0px';\r\n    document.getElementById('navName2').style.fontSize = '0px';\r\n    document.getElementById('navName3').style.fontSize = '0px';\r\n    document.getElementById('navName4').style.fontSize = '0px';\r\n    document.getElementById('navName5').style.fontSize = '0px';\r\n\r\n    document.getElementById('grid').style.width = '30px';\r\n    document.getElementById('grid1').style.width = '30px';\r\n    document.getElementById('grid2').style.width = '30px';\r\n    document.getElementById('grid3').style.width = '30px';\r\n    document.getElementById('grid4').style.width = '30px';\r\n    document.getElementById('grid5').style.width = '30px';\r\n  }\r\n  \r\n  function HandleOnClickDashboard (){\r\n    history.push('/Dashboard');\r\n  }\r\n\r\n  function HandleOnManageProjectUsers (){\r\n    history.push('/ManageProjectUsers');\r\n  }\r\n  function HandleOnClickProjectTable() {\r\n    history.push('/ProjectTable');\r\n  }\r\n\r\n  function HandleOnClickTicketsTable() {\r\n    history.push('/TicketsTable');\r\n  }\r\n  \r\n\r\n  function HandleOnClickManageUserRoles() {\r\n    history.push('/ManageUserRoles');\r\n  }\r\n\r\n  function HandleOnClickAssignUser(){\r\n     history.push('/AssignUser');\r\n  }\r\n\r\n  function handleClick(){\r\n    history.push('./Dashboard');\r\n  }\r\n\r\n  return (\r\n    <body>\r\n      <div id=\"mySidebar\" class=\"sidebar\">\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickDashboard}>\r\n          <img class=\"grid\" id=\"grid\" src={grid} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName\">Dashboard Home</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickManageUserRoles}>\r\n          <img class=\"grid\" id=\"grid1\" src={homeIcon} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName1\">Manage Role Assignment</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnManageProjectUsers}>\r\n          <img class=\"grid\" id=\"grid2\" src={peopleCirle} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName2\">Manage Project Users</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickProjectTable}>\r\n          <img class=\"grid\" id=\"grid3\" src={layers} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName3\">My Projects</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickTicketsTable}>\r\n          <img class=\"grid\" id=\"grid4\" src={layers} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName4\">My Tickets</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\">\r\n          <img class=\"grid\" id=\"grid5\" src={personAddOutline} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName5\">User Profile</span>\r\n        </a>\r\n        </div>\r\n      <div class=\"topnav\">\r\n        <a onClick={handleClick} href=\"#home\">Home</a>\r\n        <a href=\"#about\" onClick={logout}>Logout</a>\r\n      </div>\r\n      <div id=\"main\" class=\"main\">\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\nexport default SideAndNavbar;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserTable.js",["251"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { Collapse } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n\r\n  },\r\n  banner:{\r\n    backgroundColor: '#262B40',\r\n    height: '5%',\r\n    width:'93%',\r\n    padding: '2%',\r\n    marginLeft:'1%'\r\n    },\r\n    heading:{\r\n      color: 'white'\r\n    },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'username', label: 'Username', minWidth: 170 },\r\n  { id: 'email', label: 'Email', minWidth: 100 },\r\n  {\r\n    id: 'role',\r\n    label: 'Role',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n\r\n];\r\n\r\nfunction createData(username, email, role) {\r\n  return { username, email, role };\r\n}\r\n\r\n function UserTable() {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n\r\n  var rows = [];\r\n  if (loading) \r\n    return <p>Loading...</p>;\r\n  else {\r\n    var length = data.getUsers.length;\r\n    for(var i=0;i<length; i++)\r\n    {\r\n      rows[i] = createData(data.getUsers[i].username,data.getUsers[i].email, data.getUsers[i].role)\r\n    }\r\n  }\r\n\r\n //const rows = [createData('India', 'IN', 1324171354)  ];\r\n  \r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n      <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Your Projects</h3>\r\n          <p className={classes.heading}>All the Projects you have in the database</p>\r\n          </div>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead className={classes.header}>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\nconst FETCH_USERS_QUERY = gql `\r\n{\r\n  getUsers{\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\nexport default UserTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable.js",["252","253","254","255","256","257"],"import React, {useCallback} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '150%',\r\n    marginTop: '15px'\r\n  },\r\n  banner:{\r\n    backgroundColor: '#262B40',\r\n    height: '15%',\r\n    width:'93%',\r\n    padding: '2%',\r\n    marginLeft:'1%'\r\n    },\r\n    heading:{\r\n      color: 'white'\r\n    },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  main:{\r\n    display: 'inline-block',\r\n    textAlign:'left',\r\n    marginLeft:'20%'\r\n  },\r\n  btn1: {\r\n    marginTop: '20px'\r\n  }\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  { id: 'description', label: 'Description', minWidth: 100 },\r\n  {\r\n    id: 'details',\r\n    label: 'Details',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n];\r\n\r\nfunction createData(name, description, details) {\r\n  return { name, description, details };\r\n}\r\n\r\nfunction ProjectTable() {\r\n\r\n  var i;\r\n  var valueNumber = 0;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\r\n  var rows = [];\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n    var length = data.getProjects.length;\r\n    for (var i = 0; i < length; i++) {\r\n      rows[i] = createData(data.getProjects[i].name, data.getProjects[i].description, 'Edit Details')\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  function HandleOnClick(props, rowsArray) {\r\n   \r\n    history.push({\r\n      pathname: '/ProjectDetails2',\r\n      search: '?update=true',  // query string\r\n      state: {  // location state\r\n        index: props, \r\n        array: rowsArray\r\n      },\r\n    }); \r\n\r\n  }\r\n\r\n  function AssignUser() {\r\n    //history.push('/AssignUser');\r\n    history.push({\r\n      pathname: '/AssignUser',\r\n      search: '?update=true',  // query string\r\n      state: {  // location state\r\n        update: true, \r\n      },\r\n    }); \r\n  }\r\n\r\n  function CreateTicket() {\r\n    history.push('/CreateTicket');\r\n  }\r\n\r\n  function CreateProject() {\r\n    history.push('/CreateProject');\r\n  }\r\n\r\n  function RenderElement(value, value2, value3) {\r\n    if (value2.id === \"details\") {\r\n      return <a  onClick={() => HandleOnClick(value3, rows)} className=\"link\"> {value} </a>;\r\n    }\r\n    else {\r\n      return value;\r\n    }\r\n  }\r\n  return (\r\n    <body>\r\n      <div>\r\n        <SideAndNavbar></SideAndNavbar>\r\n     \r\n        <div id=\"main\" className=\"main\" className={classes.main}>\r\n          <div>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={CreateProject} className={classes.btn1}>Create Project</Button>\r\n         </div>\r\n          <Paper className={classes.root}>\r\n          <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Your Projects</h3>\r\n          <p className={classes.heading}>All the Projects you have in the database</p>\r\n          </div>\r\n         \r\n            <TableContainer className={classes.container}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    valueNumber++;\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                              {RenderElement(value, column, valueNumber)}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>    \r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getProjects{\r\n  name\r\n  description\r\n  id\r\n}\r\n}`;\r\n\r\n\r\n\r\nexport default ProjectTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnel.js",["258","259","260","261","262","263","264","265"],"import React, { useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\n\r\nconst useStyles = makeStyles({\r\n  banner:\r\n  {\r\n  backgroundColor: '#262B40',\r\n  height: '5%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'username', label: 'Username', minWidth: 170 },\r\n  { id: 'email', label: 'Email', minWidth: 100 },\r\n  //{ id: 'creationTime', label: 'Created', minWidth: 100 },\r\n  { id: 'role', label: 'Role', minWidth: 100 },\r\n  //{ id: 'access', label: 'Access', minWidth: 100 }\r\n];\r\n\r\nfunction createData(username, email, creationTime, role, access) {\r\n  return { username, email, creationTime, role, access};\r\n}\r\n\r\nfunction AssignedDeveloper(props) {\r\n\r\n  var indexVal = \"\"+props.index -1+\"\";\r\n  var index = props.index -1; \r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [ page, setPage ] = React.useState(0);\r\n\r\n  const [ markersArray, setMarkersArray] = useState([]);\r\n  const [ rowsPerPage, setRowsPerPage ] = React.useState(10);\r\n  const [ errors, setErrors ] = useState({});\r\n \r\n const {loading, data} = useQuery (FETCH_PROJECTS_QUERY,{\r\n  variables: { name: String(props.index)}\r\n});\r\n\r\n  var rows = [];\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n   \r\n    var length = data.getProjectsAndUsers.length;\r\n   for (var k = 0; k < length; k++)\r\n    {\r\n          console.log(\"in loop\",data.getProjectsAndUsers[k]);\r\n          var name = (data.getProjectsAndUsers[k].username);\r\n          var email = (data.getProjectsAndUsers[k].email);\r\n          var role = (data.getProjectsAndUsers[k].role);\r\n\r\n          JSON.stringify(name); \r\n          JSON.stringify(email); \r\n          JSON.stringify(role); \r\n\r\n          rows.push({\r\n            username: name,\r\n            email: email,\r\n            role: role,\r\n          });\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <body>\r\n      <div>\r\n        <div id=\"main\" class=\"main\">\r\n         \r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n            <div className={classes.banner}>\r\n          <h3 className={classes.heading}>AssignedPersonnel</h3>\r\n          <p className={classes.heading}>Users assigned to this Project</p>\r\n          </div>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n  query  getProjectsAndUsers ($name: String!){\r\n    getProjectsAndUsers (name: $name) {\r\n      id \r\n      username\r\n      email\r\n      creationTime\r\n      role \r\n      access\r\n  }\r\n  }`;\r\n\r\n\r\nexport default AssignedDeveloper;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnelQuery.js",["266","267","268","269","270"],"import React, {useCallback, useState} from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { useHistory } from \"react-router-dom\";\n\nfunction AssignedPersonnelQuery(props) {\n  \n  \n  var index = props.index - 1;\n  const history = useHistory();\n  const [markersArray, setMarkersArray] = useState([]);\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\n  \n  var rows = [];\n  if (loading)\n    return <p>Loading...</p>;\n  else {\n    var length = data.getProjects.length;\n   var length3 = data.getProjects[index].users.length;\n   for (var k = 0; k < length3; k++)\n    {\n      var myName = (data.getProjects[index].users[k]);\n          var myName2 = '\"' + myName + '\"';  \n          JSON.stringify(myName2); \n          markersArray.push({\n            name: myName2\n          });\n    }\n    console.log(\"MarkersArray\", markersArray);\n  }\n}\n\nconst FETCH_PROJECTS_QUERY = gql`\n{\ngetProjects{\n  name\n  description\n  id\n  users\n  tickets\n}  \n}`;\n\n\nexport default AssignedPersonnelQuery;",["271","272"],"/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable2.js",["273","274","275"],"import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\n\r\nconst useStyles = makeStyles({\r\n  banner:\r\n  {\r\n  backgroundColor: '#262B40',\r\n  height: '5%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  root: {\r\n    width: '100%',\r\n    minHeight: '300px'\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 60 },\r\n  { id: 'description', label: 'Description', minWidth: 60 },\r\n  { id: 'developer', label: 'Developer', minWidth: 60 },\r\n  { id: 'status', label: 'Status', minWidth: 60 },\r\n  { id: 'created', label: 'Created', minWidth: 60 },\r\n];\r\n\r\nfunction createData(name, description, developer, status, created) {\r\n  return { name, description, developer, status, created };\r\n}\r\n\r\n\r\nfunction TicketsTable(props) {\r\n\r\n  const [errors, setErrors]= useState({});\r\n  const index = props.index;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10); \r\n\r\nconst {loading:loading1, data:data1} = useQuery (FETCH_TICKETS_QUERY,{\r\n  variables: { id: String(index)}\r\n});\r\n\r\nvar rows = [];\r\nif (loading1)\r\n    return <p>Loading...</p>;\r\n  else {\r\n\r\n    if(data1.getTicketsByProjectId!=null)\r\n    {\r\n      if (data1.getTicketsByProjectId.length > 0)\r\n    {\r\n\r\n      if (data1.getTicketsByProjectId[0]!=null)\r\n      {\r\n        for (var i=0;i<data1.getTicketsByProjectId.length;i++)\r\n        {\r\n          rows[i] = createData(data1.getTicketsByProjectId[i].title, data1.getTicketsByProjectId[i].description,\r\n            data1.getTicketsByProjectId[i].description,data1.getTicketsByProjectId[i].status,\r\n            data1.getTicketsByProjectId[i].createdAt);\r\n        }\r\n      }\r\n    }\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <body>\r\n      <div>\r\n        <div id=\"main\" class=\"main\">\r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n              <div className={classes.banner}>\r\n            <h3 className={classes.heading}>Tickets for the Project</h3>\r\n            </div>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}>\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst FETCH_TICKETS_QUERY =  gql `\r\nquery\r\n  getTicketsByProjectId($id: String!){\r\n    getTicketsByProjectId (id: $id) {\r\n      id\r\n      title\r\n      description\r\n      priority\r\n      status\r\n      type\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport default TicketsTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserList.js",["276"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\n\r\nfunction UserList() {\r\n    const classes = useStyles();\r\n    const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n    var rows= ['Select the user'];\r\n    if (loading) \r\n         return <p>Loading...</p>;\r\n    else {\r\n        var length = data.getUsers.length;\r\n        for(var i=0;i<length;i++)\r\n        {\r\n            rows.push(data.getUsers[i].username)\r\n        }    \r\n    }\r\n    return (\r\n        <div>\r\n         <select>\r\n         {rows.map(time => {\r\n           return (\r\n             <option value={time}> {time} </option>\r\n           )\r\n         })}\r\n    </select>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst FETCH_USERS_QUERY = gql`\r\n{\r\n  getUsers{\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\nexport default UserList;","/Users/usmanzafar/Desktop/bugTracker/client/src/util/hooks.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Accounts.js",["277","278","279","280"],"import { React } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport AccountsImg from '../icons/images.svg';\nimport '../css/accounts.css';\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    inputType:{\n        width: '100%'\n    },\n    root: {\n        flexGrow: 1,\n        marginTop: 300,\n        alignContent: \"center\"\n    },\n    fontType: {\n        fontFamily: font,\n        fontSize: 16\n    },\n    '@global': {\n        body: {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n        height: '100%'\n    },\n    submit: {\n        margin: theme.spacing(5, 0, 4),\n    },\n    container: {\n        width: '100%',\n        height: '100%',\n        alignItems: \"center\",\n        justify: \"center\",\n    },\n    logo: {\n        width: '10%'\n    }\n\n}));\n\nconst font = \"'Merriweather', serif\";\nfunction Accounts(props) {\n\n    const history = useHistory();\n\n    function imageClick() {\n        history.push(\"/ManageUserRoles\");\n    }\n\n    const styles = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\" className={useStyles.container} class=\"background\">\n            <CssBaseline />\n            <div className=\"form\">\n                    <Typography component=\"h1\" variant=\"h5\" className={styles.fontType} style={{ marginBottom: \"10px\" }}>\n                    </Typography>\n                    <form  class=\"formContainer\" >\n                        <div class=\"grid-item\">\n\n                        <div class=\"article\">\n                        <img title=\"Title Tag Goes Here\" alt=\"Image of Seal\" class=\"img1\" src={AccountsImg} \n                        \n                        onClick={() => imageClick()}/>\n                        <p class=\"paragraph\" onClick={() => imageClick()} >Admin</p>\n                        </div>\n\n                        </div>\n                        <div class=\"grid-item\">\n                        <div class=\"article\">\n                        <img alt=\"Image of Seal\" class=\"img2\"  src={AccountsImg}/>\n                        <p class=\"paragraph\">Project Manager</p>\n                        </div>\n                        </div>\n                        <div class=\"grid-item\">\n                        <div class=\"article\">\n                        <img alt=\"Image of Seal\"  class=\"img3\" src={AccountsImg}/>\n                        <p class=\"paragraph\">Developer</p>\n                        </div>\n                        </div>\n                        <div class=\"grid-item\">\n                        <div class=\"article\">\n                        <img alt=\"Image of Seal\"  class=\"img4\" src={AccountsImg}/>\n                        <p class=\"paragraph\">Submitter</p>\n                        </div>\n                        </div>\n                    </form>\n            </div>\n        </Container>\n    )\n}\n\nexport default Accounts;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TestUserRoles.js",["281","282","283","284","285"],"import React, { useState } from 'react';\nimport '../css/manageUserRoles.css';\nimport UserTable from '../components/TestUserTable';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport Button from '@material-ui/core/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\n\n\nfunction TestUserRoles(props) {\n\n  const [errors, setErrors]= useState({});\n  const [usersValue, setUserValue] = useState({});\n\n  const {onChange, onSubmit, values}= useForm(assignRole, {\n      name:'',\n      role: ''\n  });\n  \n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\n  \n  const [assign, {loading:assignLoading}] = useMutation (ASSIGN_ROLE,{\n      update(_,  {data}){\n     \n      },\n      onError(err) {\n      },\n      variables:values\n  });\n  \n  \n  var rows= ['Select the user'];\n  if (loading) \n       return <p>Loading...</p>;\n  else {\n      var length = data.getUsers.length;\n      for(var i=0;i<length;i++)\n      {\n          rows.push(data.getUsers[i].username)\n      }    \n  }\n\n  function assignRole () {\n    assign();\n}\n\n\n  return (\n    <body>\n    <SideAndNavbar/>\n   \n    <form onSubmit={onSubmit} class=\"inputForm\">\n    <p>Manage User Roles</p>\n      <div id=\"main\" class=\"container\">\n     \n        <div class=\"cell-1\">\n\n          <div class=\"custom-select1\">\n            <label for=\"cars\" class=\"label1\" className=\"part1\">Select 1 or more Users:</label>\n            <br />\n            <select id=\"name\" class=\"select1\" name=\"name\" onChange={onChange} value={values.name}>\n         {rows.map(time => {\n           return (\n             <option value={time}> {time} </option>\n           )\n         })}\n      </select>\n          </div>\n          \n          <div class=\"custom-select2\">\n            <label for=\"cars\" class=\"label2\" className=\"part2\">Select the Role to assign:</label>\n            <br />\n            <select id=\"role\" class=\"select2\" name=\"role\" onChange={onChange} value={values.role}>\n              <option value=\"0\">--Select Role/None--:</option>\n              <option value=\"Admin\">Admin</option>\n              <option value=\"Demo Admin\">Demo_Admin</option>\n              <option value=\"Demo Developer\">Demo_Developer</option>\n              <option value=\"Demo Project Manager\">Demo_Project Manager</option>\n            </select>\n          </div>\n\n          <Button class=\"assignButton\" className=\"button1\" variant=\"contained\" color=\"primary\" type=\"submit\">\n          Assign\n          </Button>\n         \n         </div>\n       \n        \n        <div class=\"cell-2\">\n          <div class=\"table\">\n            <UserTable class=\"userTable\" />\n          </div>\n        </div>\n\n      \n      </div>\n   \n    \n      </form>\n\n\n    </body>\n  );\n}\n\nconst ASSIGN_ROLE = gql`\n  mutation  assignRole ($name: String! $role: String!){\n    assignRole (name: $name role: $role) \n  }`;\n\n  const FETCH_USERS_QUERY = gql`\n{\n  getUsers {\n  username\n  id\n  email\n  creationTime\n  role\n  access\n}\n}`;\n\nexport default TestUserRoles;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TestUserTable.js",["286"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useQuery, gql } from '@apollo/client';\nimport { Collapse } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n\n  },\n\n  container: {\n    maxHeight: 440,\n  },\n  header: {\n        background:'red'\n  }\n\n});\n\nconst columns = [\n  { id: 'username', label: 'Username', minWidth: 170 },\n  { id: 'email', label: 'Email', minWidth: 100 },\n  {\n    id: 'role',\n    label: 'Role',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n\n];\n\nfunction createData(username, email, role) {\n  return { username, email, role };\n}\n\n function TestUserTable() {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\n\n  var rows = [];\n  if (loading) \n    return <p>Loading...</p>;\n  else {\n    var length = data.getUsers.length;\n    for(var i=0;i<length; i++)\n    {\n      rows[i] = createData(data.getUsers[i].username,data.getUsers[i].email, data.getUsers[i].role)\n    }\n  }\n\n //const rows = [createData('India', 'IN', 1324171354)  ];\n  \n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead className={classes.header}>\n            <TableRow className={classes.header}>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\n\nconst FETCH_USERS_QUERY = gql `\n{\n  getUsers{\n  username\n  id\n  email\n  creationTime\n  role\n  access\n}\n}`;\n\nexport default TestUserTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails2.js",["287","288"],"import React, { useState } from 'react';\nimport '../css/main.css';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport ProjectTable2 from '../components/ProjectTable2';\nimport AssignedPersonnel from '../components/AssignedPersonnel';\nimport TicketsTable2 from '../components/TicketsTable2';\nimport '../css/projectDetails.css';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n      width: '100%',\n  \n    },\n    banner:{\n      backgroundColor: '#262B40',\n      height: '5%',\n      width:'93%',\n      padding: '2%',\n      marginLeft:'1%'\n      },\n      heading:{\n        color: 'white'\n      },\n    container: {\n      maxHeight: 440,\n    },\n    firstDiv: {\n      marginLeft: '60px'\n    },\n    bottomDiv: {\n      height:'10%',\n      marginLeft:'20%',\n      marginTop: '20px'\n    }, btn1: {\n      marginTop: '20px'\n    },\n    btn2: {\n      marginTop: '20px'\n    }\n  });\n\n\nfunction ProjectDetails2(props) {\n    const classes = useStyles();\n  const history = useHistory();\nvar value =  props.history.location.state.index;\n\n\nfunction AssignUser() {\n  \n  history.push({\n    pathname: '/AssignUser',\n    search: '?update=true',  // query string\n    state: {  // location state\n      index: value, \n    },\n  }); \n}\n\nfunction CreateTicket() {\n  history.push('/CreateTicket');\n}\n\n return (\n<body>\n    <SideAndNavbar/>\n      \n    <div className={classes.bottomDiv}>\n    <Button variant=\"contained\" color=\"primary\" onClick={AssignUser} className={classes.btn1}>Assign User</Button>\n    <Button variant=\"contained\" color=\"primary\" onClick={CreateTicket} className={classes.btn2}>Create Ticket</Button>\n    </div>\n     \n    <div className=\"firstDiv\" className={classes.firstDiv}>\n    \n    <ProjectTable2 index={value}/> \n    </div>\n    <div className=\"main\">\n    <div className=\"assignedPersonnel\">\n    <AssignedPersonnel index={value}/>\n    </div>\n    <div className=\"secondMain\" class=\"secondMain\">\n    <TicketsTable2 className=\"ticketsTable\" index={value}/>\n    </div>\n    </div>\n    \n    \n   </body>\n )\n}\n\n\nexport default ProjectDetails2;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Dashboard.js",["289"],"import React, { useState } from 'react';\nimport '../css/dashboard.css';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport TicketPriorityBarChart from '../components/TicketPriorityBarChart';\nimport TicketTypePieChart from '../components/TicketTypePieChart';\nimport TicketStatusBarChart from '../components/TicketStatusBarChart';\nimport DeveloperTicketsPieChart from '../components/DeveloperTicketsPieChart';\n\n\nfunction Dashboard(props) {\n\n return (\n<body>\n        <SideAndNavbar/>\n        <div class=\"container\"> \n        <div class=\"grid-item1\"> <TicketPriorityBarChart/>\n        <div class=\"low-div-grid-item1\">\n        <p>Tickets By Priority</p>\n        </div>\n        </div>\n        <div class=\"grid-item2\"><TicketTypePieChart/>\n        <div class=\"low-div-grid-item2\">\n        <p>Tickets By Type</p>\n        </div>\n        </div>\n        <div class=\"grid-item3\"><TicketStatusBarChart/>\n        <div class=\"low-div-grid-item3\">\n        <p>Tickets By Progress</p>\n        </div>\n        </div>\n        <div class=\"grid-item4\"><DeveloperTicketsPieChart/>\n        <div class=\"low-div-grid-item4\">\n        <p>Tickets Assigned By Developer</p>\n        </div>\n        </div>\n        </div>\n   </body>\n )\n}\n\n\n\n\n\nexport default Dashboard;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketStatusBarChart.js",["290"],"\nimport React from 'react';\nimport Chart from \"react-google-charts\";\nimport { useQuery, gql } from '@apollo/client';\n\nfunction TicketStatusBarChart(props) {\n    var counterValue = 0;\n    var completed = 0;\n    var open = 0;\n    var inProgress = 0; \n    var rows = [];\n    const { loading, data } = useQuery(GET_TICKETS);\n\n    \n    if (loading)\n      return <p>Loading...</p>;\n\n    else {\n\n        if (counterValue ===0)\n        {\n        const length = data.getTickets.length;\n\n        for (var i =0;i<length;i++)\n        {\n\n        var value = data.getTickets[i].status;\n\n\n        if (value === \"completed\")\n        {\n            completed = completed +1;\n        }\n        else if (value === \"open\")\n        {\n            open = open + 1;\n        }\n        else if (value === \"in progress\")\n        {\n            inProgress = inProgress + 1;\n        }\n        }\n\n        counterValue = counterValue + 1;\n        }\n        \n    }\n\n  return (\n    <body>\n      <div style={{ display: 'flex', maxWidth: 900 }}>\n      <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"ColumnChart\"\n  loader={<div>Loading Chart</div>}\n  data={[\n    [\n      'Element',\n      'Density',\n      { role: 'style' },\n      {\n        sourceColumn: 0,\n        role: 'annotation',\n        type: 'string',\n        calc: 'stringify',\n      },\n    ],\n    ['Completed', completed, '#b87333', null],\n    ['Open',  open, 'silver', null],\n    ['In Progress', inProgress, 'gold', null],\n  ]}\n  options={{\n    width: 500,\n    height: 300,\n    bar: { groupWidth: '95%' },\n    legend: { position: 'none' },\n    backgroundColor: \"#EEEEEE\"\n  }}\n\n  rootProps={{ 'data-testid': '6' }}\n/>\n</div>\n    </body>\n  );\n}\n\n\n\nconst GET_TICKETS = gql`\n{\ngetTickets{\n    title\n    description \n    assignedProject\n    assignedDeveloper\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n}  \n}`;\n\nexport default TicketStatusBarChart;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/DeveloperTicketsPieChart.js",["291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport Chart from \"react-google-charts\";\n\nvar counterValue = 0;\n\nfunction DeveloperTicketsPieChart(props) {\n\n    var featureRequests = 0;\n    var otherComments = 0;\n    var BugsErrors = 0; \n    var trainingDocuments = 0;\n    var users = [];\n    var tickets = [];\n    var developersArray = [];\n    var developerNameArray = [];\n\n    const { loading, data } = useQuery(GET_TICKETS);\n    const { loading:loading1, data:data1 } = useQuery(GET_USERS);\n\nif (loading)\n      return <p>Loading...</p>;\n\n    else {\n    \n    var length1 = data.getTickets.length;\n    \n    for (var i=0;i< length1; i++)\n    {\n      tickets.push(data.getTickets[i]);\n    }\n    \n    }\n\nif (loading1)\n      return <p>Loading...</p>;\n\n    else {\n\n    var length2 = data1.getUsers.length;\n\n    for (var i=0;i<length2;i++ )\n    {\n      users.push(data1.getUsers[i]);\n    }\n\n    for (var i=0;i<tickets.length; i++)\n    {\n      for (var j=0;j<tickets[i].assignedDeveloper.length;j++)\n      {\n        developersArray.push(tickets[i].assignedDeveloper[j]);\n      }\n    }\n\n\n    for (var i=0;i<users.length;i++)\n    {\n      var id = users[i].id;\n      for (var j=0;j<developersArray.length; j++)\n      {\n        if (id=== developersArray[j])\n      {\n        developerNameArray.push(users[i].username)\n      }\n      }\n    }\n\n    var finalArray = [];\n    \n    function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    }\n\n    var unique = developerNameArray.filter(onlyUnique);\n    \n    for(var i=0;i<unique.length;i++)\n    {\n      finalArray.push({name:unique[i],count:0});\n    }\n\n\n    var countArray = [];\n    for (var i=0;i<unique.length;i++)\n    {\n      for (var j=0;j<developerNameArray.length;j++)\n      {\n          if(developerNameArray[i]===developerNameArray[j])\n          {\n              finalArray[i].count = finalArray[i].count + 1;\n          }\n      }\n    }\n\n  var inputArray= [];\n\n inputArray.push(['Language', 'Speakers (in millions)']);\n  for (var i=0;i<finalArray.length;i++)\n  {\n    inputArray.push([''+finalArray[i].name+'', finalArray[i].count]);\n  }  \n   }\n\n  return (\n    <body>\n <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"PieChart\"\n  loader={<div>Loading Chart</div>}\n  data={inputArray}\n  options={{\n    backgroundColor: \"#EEEEEE\"\n  }}\n  rootProps={{ 'data-testid': '2' }}\n/>\n    </body>\n  );\n}\n\n\nconst GET_USERS = gql`\n{\ngetUsers{\n    id\n    username\n    email\n    creationTime\n    role\n    access\n}  \n}`;\nconst GET_TICKETS = gql`\n{\ngetTickets{\n    title\n    description \n    assignedProject\n    assignedDeveloper\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n}  \n}`;\n\nexport default DeveloperTicketsPieChart;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketTypePieChart.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketPriorityBarChart.js",["305"],"import React from 'react';\nimport Chart from \"react-google-charts\";\nimport { useQuery, gql } from '@apollo/client';\n\n\nfunction TicketPriorityBarChart(props) {\nvar counterValue = 0;\n    var high = 0;\n    var medium = 0;\n    var low = 0; \n    var rows = [];\n    const { loading, data } = useQuery(GET_TICKETS);\n\n    \n    if (loading)\n      return <p>Loading...</p>;\n\n    else {\n\n        if (counterValue ===0)\n        {\n        const length = data.getTickets.length;\n\n        for (var i =0;i<length;i++)\n        {\n\n              var value = data.getTickets[i].priority;\n\n\n        if (value === \"High\")\n        {\n            high = high +1;\n        }\n        else if (value === \"Low\")\n        {\n            low = low + 1;\n        }\n        else if (value === \"Medium\")\n        {\n            medium = medium + 1;\n        }\n        }\n\n        counterValue = counterValue + 1;\n        }\n        \n    }\n\n  return (\n    <body>\n      <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"ColumnChart\"\n  loader={<div>Loading Chart</div>}\n  data={[\n    [\n      'Element',\n      'Density',\n      { role: 'style' },\n      {\n        sourceColumn: 0,\n        role: 'annotation',\n        type: 'string',\n        calc: 'stringify',\n      },\n    ],\n    ['High', high, '#b87333', null],\n    ['Medium',  medium, 'silver', null],\n    ['Low', low, 'gold', null],\n  ]}\n  options={{\n    width: 500,\n    height: 300,\n    bar: { groupWidth: '95%' },\n    legend: { position: 'none' },\n    backgroundColor: \"#EEEEEE\"\n  }}\n  // For tests\n  rootProps={{ 'data-testid': '6' }}\n/>\n\n    </body>\n  );\n}\n\nconst GET_TICKETS = gql`\n{\ngetTickets{\n    title\n    description \n    assignedProject\n    assignedDeveloper\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n}  \n}`;\n\nexport default TicketPriorityBarChart;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageProjectUsers.js",["306","307","308","309","310","311","312"],"import React, {useCallback} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useQuery, gql } from '@apollo/client';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport { useHistory } from \"react-router-dom\";\nimport '../css/projectTable.css';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '150%',\n    marginTop: '15px'\n  },\n  banner:{\n    backgroundColor: '#262B40',\n    height: '15%',\n    width:'93%',\n    padding: '2%',\n    marginLeft:'1%'\n    },\n    heading:{\n      color: 'white'\n    },\n  container: {\n    maxHeight: 440,\n  },\n  main:{\n    display: 'inline-block',\n    textAlign:'left',\n    marginLeft:'20%'\n  },\n  btn1: {\n    marginTop: '20px'\n  }\n});\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'description', label: 'Description', minWidth: 100 },\n  {\n    id: 'details',\n    label: 'Details',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n];\n\nfunction createData(name, description, details) {\n  return { name, description, details };\n}\n\nfunction ManageProjectUsers() {\n\n  var i;\n  var valueNumber = 0;\n  const history = useHistory();\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\n  var rows = [];\n  if (loading)\n    return <p>Loading...</p>;\n  else {\n    var length = data.getProjects.length;\n    for (var i = 0; i < length; i++) {\n      rows[i] = createData(data.getProjects[i].name, data.getProjects[i].description, 'Manage Users')\n    }\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  function HandleOnClick(props, rowsArray) {\n   \n   console.log(\"Props :\", props);\n   console.log(\"Value of :\", props);\n\n    history.push({\n      pathname: '/ProjectUserAssign',\n      search: '?update=true',  // query string\n      state: {  // location state\n        index: props, \n        array: rowsArray\n      },\n    }); \n\n  }\n\n  function AssignUser() {\n    //history.push('/AssignUser');\n    history.push({\n      pathname: '/AssignUser',\n      search: '?update=true',  // query string\n      state: {  // location state\n        update: true, \n      },\n    }); \n  }\n\n  function CreateTicket() {\n    history.push('/CreateTicket');\n  }\n\n  function RenderElement(value, value2, value3) {\n    var one = \"CreateProject\";\n    \n    if (value2.id === \"details\") {\n      return <a  onClick={() => HandleOnClick(value3, rows)} className=\"link\"> {value} </a>;\n    }\n    else {\n      return value;\n    }\n  }\n  return (\n    <body>\n      <div>\n        <SideAndNavbar></SideAndNavbar>\n     \n        <div id=\"main\" className=\"main\" className={classes.main}>\n          <Paper className={classes.root}>\n          <div className={classes.banner}>\n          <h3 className={classes.heading}>Your Projects</h3>\n          <p className={classes.heading}>Manage the users for your Projects</p>\n          </div>\n         \n            <TableContainer className={classes.container}>\n              <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                  <TableRow>\n                    {columns.map((column) => (\n                      <TableCell\n                        key={column.id}\n                        align={column.align}\n                        style={{ minWidth: column.minWidth }}\n                      >\n                        {column.label}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                    valueNumber++;\n                    return (\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell key={column.id} align={column.align}>\n                              {RenderElement(value, column, valueNumber)}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[10, 25, 100]}\n              component=\"div\"\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </Paper>    \n        </div>\n      </div>\n    </body>\n  );\n}\n\n\nconst FETCH_PROJECTS_QUERY = gql`\n{\n  getProjects{\n  name\n  description\n  id\n}\n}`;\n\n\n\nexport default ManageProjectUsers;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectUserAssign.js",["313","314","315","316","317"],"import React, { useState } from 'react';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport AssignedPersonnel from '../components/AssignedPersonnel';\nimport '../css/projectUserAssign.css';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AssignUser2 from './AssignUser2';\n\nconst useStyles = makeStyles({\n    root: {\n      width: '100%',\n  \n    },\n    banner:{\n      backgroundColor: '#262B40',\n      height: '5%',\n      width:'93%',\n      padding: '2%',\n      marginLeft:'1%'\n      },\n      heading:{\n        color: 'white'\n      },\n    container: {\n      maxHeight: 440,\n    },\n    firstDiv: {\n      marginLeft: '60px'\n    },\n    bottomDiv: {\n      height:'10%',\n      marginLeft:'20%',\n      marginTop: '20px'\n    }, btn1: {\n      marginTop: '20px'\n    },\n    btn2: {\n      marginTop: '20px'\n    },\n    root: {\n      width: '100%',\n  },\n  container: {\n      maxHeight: 440,\n  },\n  label: {\n      fontSize: 12,\n      marginLeft: '30%',\n      fontFamily: 'sans-serif',\n      fontStyle:'italic',\n      fontWeight:'600'\n  },\n  input:{\n      width: '40%',\n      padding: '12px 20px',\n      margin: '8px 0',\n      display: 'inline-block',\n      borderWidth: '1px',\n      borderColor: '#ddd',\n      borderRadius: '4px', \n      boxSizing: 'border-box',\n      marginLeft: '30%',\n      marginRight: '30%'\n  },\n  submit:{\n      width: '40%',\n      backgroundColor: '#262B40',\n      color: 'white',\n      padding: '14px 20px',\n      margin: '8px 0',\n      display: 'inline-block',\n      borderWidth: '4px',\n      borderRadius: '4px', \n      marginLeft: '30%',\n      marginRight: '30%',\n      '&:hover': {\n          background: \" #F5A623\",\n       },\n  },\ndescription: {\n  width: '530px',\n  height: '200px',\n  marginLeft: '30%',\n  marginRight: '30%'\n},\ntitle: {\n    marginTop: '10%',\n    paddingTop: '100px',\n    marginLeft: \"43%\",\n    fontSize: 18,\n    fontWeight: '800',\n    fontFamily: 'sans-serif'\n}\n  });\n\nfunction ProjectUserAssign(props) {\n    const classes = useStyles();\n    const history = useHistory();\n     console.log(\"Value\",props);\n    var value =  props.history.location.state.index;\n   \n return (\n<body>\n    <SideAndNavbar/>\n      \n    <div class=\"split left\">\n  <div class=\"centered1\">\n  <AssignUser2 index={value}/>\n  </div>\n</div>\n\n<div class=\"split right\">\n  <div class=\"centered2\">\n  <AssignedPersonnel index={value}/>\n   \n  </div>\n</div>\n  \n   </body>\n )\n}\n\n\nexport default ProjectUserAssign;\n","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser2.js",["318","319","320","321","322","323","324"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery, gql } from '@apollo/client';\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n\n  },\n  banner:{\n    backgroundColor: '#262B40',\n    height: '5%',\n    width:'93%',\n    padding: '2%',\n    marginLeft:'1%'\n    },\n    heading:{\n      color: 'white'\n    },\n  container: {\n    maxHeight: 440,\n  },\n  firstDiv: {\n    marginLeft: '60px'\n  },\n  bottomDiv: {\n    height:'10%',\n    marginLeft:'20%',\n    marginTop: '20px'\n  }, btn1: {\n    marginTop: '20px'\n  },\n  btn2: {\n    marginTop: '20px'\n  },\n  root: {\n    width: '100%',\n},\ncontainer: {\n    maxHeight: 440,\n},\nlabel: {\n    fontSize: 12,\n    marginLeft: '30%',\n    fontFamily: 'sans-serif',\n    fontStyle:'italic',\n    fontWeight:'600'\n},\ninput:{\n    width: '80%',\n    padding: '12px 20px',\n    margin: '8px 0',\n    display: 'inline-block',\n    borderWidth: '1px',\n    borderColor: '#ddd',\n    borderRadius: '4px', \n    boxSizing: 'border-box',\n    marginLeft: '30%',\n    marginRight: '30%'\n},\nsubmit:{\n    width: '40%',\n    backgroundColor: '#262B40',\n    color: 'white',\n    padding: '14px 20px',\n    margin: '8px 0',\n    display: 'inline-block',\n    borderWidth: '4px',\n    borderRadius: '4px', \n    marginLeft: '30%',\n    marginRight: '30%',\n    '&:hover': {\n        background: \" #F5A623\",\n     },\n},\ndescription: {\nwidth: '530px',\nheight: '200px',\nmarginLeft: '30%',\nmarginRight: '30%'\n},\ntitle: {\n  marginTop: '10%',\n  paddingTop: '100px',\n  marginLeft: \"43%\",\n  fontSize: 18,\n  fontWeight: '800',\n  fontFamily: 'sans-serif'\n}\n});\n\nfunction AssignUser2(props) {\n\n    const history = useHistory();\n    const classes = useStyles();\n    const [formError,setFormError] = useState(false);\n    const [userId, setUserId] = useState(\"\");\n    const [projectId, setProjectId] = useState(\"\");\n    const index = props.index - 1;\n    const { loading, data } = useQuery(FETCH_USERS_QUERY);\n    const projectsQuery = useQuery(FETCH_PROJECTS_QUERY);\n\n    const [ errors, setErrors ] = useState({});\n\n    const [assignUser,{loading1} ] = useMutation(ASSIGN_USER, {\n      update(_,{data}){\n\n        success();\n      }, \n      onError(err){\n          setErrors(err.graphQLErrors[0].extensions.exception.errors)\n      }, variables: { userId, projectId }\n     \n  });\n  \n  var rows= ['Select the user'];\n  if (loading) \n       return <p>Loading...</p>;\n  else {\n      var length = data.getUsers.length;\n      for(var i=0;i<length;i++)\n      {\n          rows.push(data.getUsers[i].username )\n      }    \n  }\n\n  function AssignUser()\n  {\n    assignUser();\n  }\n\n  function success() {\n    alert(\"User assignned to the project\");\n  }\n\n  function handleOnClick(event) {\n\n    var x = document.getElementById(\"selectValue\");\n    const valueMatch = x.value;\n    var indexValue;\n    const length = data.getUsers.length;\n    for(var i=0;i<length;i++)\n    {\n        if (valueMatch === data.getUsers[i].username)\n        {\n            indexValue = i;\n        }\n    } \n\n    setUserId(data.getUsers[indexValue].id);\n    setProjectId(projectsQuery.data.getProjects[index].id);\n\n    AssignUser();\n  }  \n\n      \n return (\n<body>\n        <div>\n        <label className={classes.label} for=\"name\">Assign Users to Projects</label>\n         <select className={classes.input} id=\"selectValue\"  onChange={handleOnClick} >\n         {rows.map(time => {\n           return (\n             <option value={time}>{time}</option>\n           )\n         })}\n        </select>\n        </div>\n   </body>\n )\n}\n\nconst FETCH_USERS_QUERY = gql`\n{\n  getUsers{\n  username\n  id\n  email\n  creationTime\n  role\n  access\n}\n}`;\n\n\nconst FETCH_PROJECTS_QUERY = gql`\n{\n  getProjects{\n  name\n  description\n  id\n}\n}`;\n\nconst ASSIGN_USER =  gql `\nmutation assignUser($projectId: String! $userId: String!) {\n  assignUser(projectId:$projectId userId: $userId) {\n        name description id\n    }     \n}`;\nexport default AssignUser2;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TicketDetails.js",["325","326","327"],"import { React, useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SideAndNavbar from '../components/SideAndNavbar';\n\nconst useStyles = makeStyles((theme) => ({\n    inputType:{\n        width: '100%'\n    },\n    root: {\n        flexGrow: 1,\n        marginTop: 300,\n        alignContent: \"center\"\n    },\n    fontType: {\n        fontFamily: font,\n        fontSize: 16\n    },\n    '@global': {\n        body: {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n        height: '100%'\n    },\n    submit: {\n        margin: theme.spacing(5, 0, 4),\n    },\n    container: {\n        width: '100%',\n        height: '100%',\n        alignItems: \"center\",\n        justify: \"center\",\n    },\n\n}));\n\nconst font = \"'Merriweather', serif\";\nfunction TicketDetails(props) {\n\nconst styles = useStyles();\n\nreturn ( <body>\n    <SideAndNavbar/>\n   </body>\n    )\n}\n\n\n\nexport default TicketDetails;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/NewLogin.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/context/auth.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/util/ProtectedRoute.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketDetailsComponent.js",["328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useQuery, gql } from '@apollo/client';\nimport SideAndNavbar from './SideAndNavbar';\nimport { useHistory } from \"react-router-dom\";\nimport '../css/ticketsDetails.css';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '500px',\n    marginLeft: '10%',\n    marginTop:'5%',\n    height: \"300px\"\n  },\n  banner:{\n  backgroundColor: '#262B40',\n  height: '15%',\n  width:'93%',\n  padding: '2%',\n  marginLeft:'1%'\n  },\n  \n  heading:{\n    color: 'white'\n  },\n  container: {\n    maxHeight: 300,\n  },\n});\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 100 },\n  { id: 'description', label: 'Description', minWidth: 100 },\n  { id: 'assignedProject', label: 'Assigned Project', minWidth: 100 },\n  { id: 'assignedDeveloper', label: 'Assigned Developer', minWidth: 100 },\n  { id: 'priority', label: 'Priority', minWidth: 100 },\n  { id: 'status', label: 'Status', minWidth: 100 },\n  { id: 'type', label: 'type', minWidth: 100 },\n  { id: 'created', label: 'Creation Time and Date', minWidth: 100 },\n  { id: 'updatedAt', label: 'Updated Time', minWidth: 100 },\n];\n\nfunction createData(name, description, assignedProject, assignedDeveloper, priority, status, type, created, updatedAt) {\n  return { name, description,assignedProject, assignedDeveloper, priority, status, type, created, updatedAt };\n}\n\n var counter = 0;\n\nfunction TicketDetailsComponent(props ) {\n\n \n  var valueNumber = 0;\n  var assignedProject = 0;\n  var assignedDeveloper = 0;\n  var userData = \"\";\n  var projectData = \"\"\n  var assignedProjectName = \"\";\n  var assignedDeveloperName = \"\";\n  const history = useHistory();\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  var index = props.history.location.state.index;\n\n\n  const {loading, data} = useQuery (FETCH_TICKETS_QUERY,{\n    variables: { id: String(index)}\n    });\n\nconst {loading:loading1, data:data1} = useQuery (FETCH_USERS_QUERY);\nconst {loading:loading2, data:data2} = useQuery (FETCH_PROJECTS_QUERY);\n\n    var rows= [];\n\n    if (loading)\n      return <p>Loading...</p>;\n    else {\n\n      var time = data.getTicketById.createdAt.split('T')[1];\n      var date = data.getTicketById.createdAt.substring(0, data.getTicketById.createdAt.indexOf(\"T\"));\n       \n      time = time.slice(0, -5); \n      var dateTime = date+ \"\\t\\t\"+time;\n  \n      \n      assignedProject = data.getTicketById.assignedProject;\n      assignedDeveloper = data.getTicketById.assignedDeveloper;\n\n      if (data1!=null)\n      {\n        for (var i=0;i< data1.getUsers.length;i++)\n        {\n          if (data1.getUsers[i].id === assignedDeveloper[0])\n          {\n              assignedProjectName = data1.getUsers[i].username;\n          }\n        }\n      }\n      if (data2!=null)\n      {\n        for (var i=0;i< data2.getProjects.length;i++)\n        {\n          if (data2.getProjects[i].id === assignedProject[0])\n          {\n            assignedDeveloperName = data2.getProjects[i].name;\n          }\n        }\n      }\n\n      rows[0] = createData(data.getTicketById.title, data.getTicketById.description, assignedProjectName, assignedDeveloperName\n      ,data.getTicketById.priority,data.getTicketById.status, data.getTicketById.type , dateTime, data.getTicketById.updatedAt);\n\n      console.log(\"Rows 0\", rows[0]);\n    } \n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  function HandleOnClick(props, rowsArray) {\n   \n    history.push({\n      pathname: '/TicketDetails',\n      search: '?update=true',  // query string\n      state: {  // location state\n        index: props, \n        array: rowsArray\n      },\n    }); \n\n  }\n\n  function RenderElement(value, value2, value3) {\n    if (value2.id === \"editDetails\") {\n      return <a  onClick={() => HandleOnClick(value3, rows)} className=\"link\"> {value} </a>;\n    }\n    else {\n      return value;\n    }\n  }\n\n  return (\n    <body>\n      <div>\n        <SideAndNavbar></SideAndNavbar>\n        <div id=\"main\" class=\"main\">\n          <Paper className={classes.root}>\n          <div className={classes.banner}>\n          <h3 className={classes.heading}>Details for the Ticket</h3>\n          <p className={classes.heading}></p>\n          </div>\n          <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"right\">Ticket Title</TableCell>\n            <TableCell align=\"right\">Ticket Description</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n            <TableRow>\n              <TableCell align=\"right\">{rows[0].name}</TableCell>\n              <TableCell align=\"right\">{rows[0].description}</TableCell>\n            </TableRow>\n        </TableBody>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"right\">Assigned Project</TableCell>\n            <TableCell align=\"right\">Assigned Developer</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n            <TableRow>\n              <TableCell align=\"right\">{rows[0].assignedProject}</TableCell>\n              <TableCell align=\"right\">{rows[0].assignedDeveloper}</TableCell>\n            </TableRow>\n        </TableBody>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"right\">Priority</TableCell>\n            <TableCell align=\"right\">Status</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n            <TableRow>\n              <TableCell align=\"right\">{rows[0].priority}</TableCell>\n              <TableCell align=\"right\">{rows[0].status}</TableCell>\n            </TableRow>\n        </TableBody>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"right\">Type</TableCell>\n            <TableCell align=\"right\">Creation Time (Day and Time)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n            <TableRow>\n              <TableCell align=\"right\">{rows[0].type}</TableCell>\n              <TableCell align=\"right\">{rows[0].created}</TableCell>\n            </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n            \n          </Paper>\n        </div>\n      </div>\n    </body>\n  );\n}\n\nconst FETCH_TICKETS_QUERY = gql`\nquery\n    getTicketById($id: String!){\n    getTicketById (id: $id) {\n    assignedProject\n    assignedDeveloper\n    title\n    description\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n   }\n}`;\n\nconst FETCH_USERS_QUERY = gql `\n{\n  getUsers {\n    id\n    username\n    email\n    creationTime\n    role\n    access\n}\n}`;\n\nconst FETCH_PROJECTS_QUERY = gql `\n{\n  getProjects {\n    id\n    name\n    description\n    users\n    tickets\n}\n}`;\n\nexport default TicketDetailsComponent;\n\n",{"ruleId":"344","replacedBy":"345"},{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","severity":1,"message":"349","line":9,"column":10,"nodeType":"350","messageId":"351","endLine":9,"endColumn":24},{"ruleId":"348","severity":1,"message":"352","line":43,"column":7,"nodeType":"350","messageId":"351","endLine":43,"endColumn":13},{"ruleId":"348","severity":1,"message":"353","line":72,"column":20,"nodeType":"350","messageId":"351","endLine":72,"endColumn":28},{"ruleId":"348","severity":1,"message":"354","line":83,"column":24,"nodeType":"350","messageId":"351","endLine":83,"endColumn":31},{"ruleId":"355","severity":1,"message":"356","line":160,"column":21,"nodeType":"357","endLine":160,"endColumn":74},{"ruleId":"355","severity":1,"message":"356","line":162,"column":21,"nodeType":"357","endLine":162,"endColumn":78},{"ruleId":"348","severity":1,"message":"354","line":75,"column":21,"nodeType":"350","messageId":"351","endLine":75,"endColumn":28},{"ruleId":"348","severity":1,"message":"354","line":70,"column":23,"nodeType":"350","messageId":"351","endLine":70,"endColumn":30},{"ruleId":"348","severity":1,"message":"358","line":67,"column":11,"nodeType":"350","messageId":"351","endLine":67,"endColumn":18},{"ruleId":"348","severity":1,"message":"359","line":69,"column":12,"nodeType":"350","messageId":"351","endLine":69,"endColumn":21},{"ruleId":"348","severity":1,"message":"360","line":69,"column":22,"nodeType":"350","messageId":"351","endLine":69,"endColumn":34},{"ruleId":"348","severity":1,"message":"361","line":76,"column":13,"nodeType":"350","messageId":"351","endLine":76,"endColumn":19},{"ruleId":"348","severity":1,"message":"353","line":78,"column":24,"nodeType":"350","messageId":"351","endLine":78,"endColumn":32},{"ruleId":"348","severity":1,"message":"362","line":1,"column":17,"nodeType":"350","messageId":"351","endLine":1,"endColumn":25},{"ruleId":"348","severity":1,"message":"354","line":6,"column":13,"nodeType":"350","messageId":"351","endLine":6,"endColumn":20},{"ruleId":"348","severity":1,"message":"363","line":6,"column":39,"nodeType":"350","messageId":"351","endLine":6,"endColumn":44},{"ruleId":"364","severity":1,"message":"365","line":42,"column":3,"nodeType":"366","messageId":"367","endLine":42,"endColumn":7},{"ruleId":"364","severity":1,"message":"368","line":45,"column":1,"nodeType":"366","messageId":"367","endLine":45,"endColumn":10},{"ruleId":"348","severity":1,"message":"361","line":102,"column":10,"nodeType":"350","messageId":"351","endLine":102,"endColumn":16},{"ruleId":"348","severity":1,"message":"369","line":102,"column":18,"nodeType":"350","messageId":"351","endLine":102,"endColumn":27},{"ruleId":"348","severity":1,"message":"370","line":103,"column":10,"nodeType":"350","messageId":"351","endLine":103,"endColumn":20},{"ruleId":"348","severity":1,"message":"371","line":103,"column":22,"nodeType":"350","messageId":"351","endLine":103,"endColumn":34},{"ruleId":"348","severity":1,"message":"372","line":112,"column":27,"nodeType":"350","messageId":"351","endLine":112,"endColumn":40},{"ruleId":"348","severity":1,"message":"373","line":1,"column":16,"nodeType":"350","messageId":"351","endLine":1,"endColumn":27},{"ruleId":"348","severity":1,"message":"374","line":12,"column":8,"nodeType":"350","messageId":"351","endLine":12,"endColumn":21},{"ruleId":"348","severity":1,"message":"358","line":47,"column":9,"nodeType":"350","messageId":"351","endLine":47,"endColumn":16},{"ruleId":"348","severity":1,"message":"369","line":71,"column":20,"nodeType":"350","messageId":"351","endLine":71,"endColumn":29},{"ruleId":"348","severity":1,"message":"354","line":83,"column":21,"nodeType":"350","messageId":"351","endLine":83,"endColumn":28},{"ruleId":"348","severity":1,"message":"375","line":91,"column":20,"nodeType":"350","messageId":"351","endLine":91,"endColumn":32},{"ruleId":"348","severity":1,"message":"376","line":92,"column":20,"nodeType":"350","messageId":"351","endLine":92,"endColumn":35},{"ruleId":"377","severity":1,"message":"378","line":110,"column":21,"nodeType":"350","messageId":"379","endLine":110,"endColumn":22},{"ruleId":"377","severity":1,"message":"378","line":126,"column":18,"nodeType":"350","messageId":"379","endLine":126,"endColumn":19},{"ruleId":"377","severity":1,"message":"380","line":131,"column":13,"nodeType":"350","messageId":"379","endLine":131,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":138,"column":25,"nodeType":"350","messageId":"379","endLine":138,"endColumn":26},{"ruleId":"377","severity":1,"message":"381","line":139,"column":21,"nodeType":"350","messageId":"379","endLine":139,"endColumn":24},{"ruleId":"377","severity":1,"message":"382","line":140,"column":21,"nodeType":"350","messageId":"379","endLine":140,"endColumn":23},{"ruleId":"383","severity":1,"message":"384","line":185,"column":13,"nodeType":"385","endLine":185,"endColumn":40},{"ruleId":"383","severity":1,"message":"384","line":185,"column":41,"nodeType":"385","endLine":185,"endColumn":70},{"ruleId":"383","severity":1,"message":"384","line":202,"column":13,"nodeType":"385","endLine":202,"endColumn":22},{"ruleId":"383","severity":1,"message":"384","line":203,"column":13,"nodeType":"385","endLine":203,"endColumn":24},{"ruleId":"383","severity":1,"message":"384","line":214,"column":25,"nodeType":"385","endLine":214,"endColumn":38},{"ruleId":"355","severity":1,"message":"386","line":103,"column":14,"nodeType":"357","endLine":103,"endColumn":79},{"ruleId":"348","severity":1,"message":"387","line":20,"column":10,"nodeType":"350","messageId":"351","endLine":20,"endColumn":14},{"ruleId":"348","severity":1,"message":"388","line":23,"column":12,"nodeType":"350","messageId":"351","endLine":23,"endColumn":19},{"ruleId":"348","severity":1,"message":"389","line":42,"column":12,"nodeType":"350","messageId":"351","endLine":42,"endColumn":20},{"ruleId":"348","severity":1,"message":"390","line":81,"column":12,"nodeType":"350","messageId":"351","endLine":81,"endColumn":35},{"ruleId":"355","severity":1,"message":"356","line":92,"column":9,"nodeType":"357","endLine":92,"endColumn":74},{"ruleId":"391","severity":1,"message":"392","line":93,"column":11,"nodeType":"357","endLine":93,"endColumn":67},{"ruleId":"355","severity":1,"message":"356","line":96,"column":9,"nodeType":"357","endLine":96,"endColumn":80},{"ruleId":"391","severity":1,"message":"392","line":97,"column":11,"nodeType":"357","endLine":97,"endColumn":72},{"ruleId":"355","severity":1,"message":"356","line":100,"column":9,"nodeType":"357","endLine":100,"endColumn":78},{"ruleId":"391","severity":1,"message":"392","line":101,"column":11,"nodeType":"357","endLine":101,"endColumn":75},{"ruleId":"355","severity":1,"message":"356","line":104,"column":9,"nodeType":"357","endLine":104,"endColumn":77},{"ruleId":"391","severity":1,"message":"392","line":105,"column":11,"nodeType":"357","endLine":105,"endColumn":70},{"ruleId":"355","severity":1,"message":"356","line":108,"column":9,"nodeType":"357","endLine":108,"endColumn":77},{"ruleId":"391","severity":1,"message":"392","line":109,"column":11,"nodeType":"357","endLine":109,"endColumn":70},{"ruleId":"355","severity":1,"message":"356","line":112,"column":9,"nodeType":"357","endLine":112,"endColumn":41},{"ruleId":"391","severity":1,"message":"392","line":113,"column":11,"nodeType":"357","endLine":113,"endColumn":80},{"ruleId":"348","severity":1,"message":"393","line":12,"column":10,"nodeType":"350","messageId":"351","endLine":12,"endColumn":18},{"ruleId":"348","severity":1,"message":"373","line":1,"column":16,"nodeType":"350","messageId":"351","endLine":1,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":75,"column":14,"nodeType":"350","messageId":"379","endLine":75,"endColumn":15},{"ruleId":"348","severity":1,"message":"394","line":102,"column":12,"nodeType":"350","messageId":"351","endLine":102,"endColumn":22},{"ruleId":"348","severity":1,"message":"395","line":113,"column":12,"nodeType":"350","messageId":"351","endLine":113,"endColumn":24},{"ruleId":"355","severity":1,"message":"386","line":123,"column":14,"nodeType":"357","endLine":123,"endColumn":79},{"ruleId":"383","severity":1,"message":"384","line":134,"column":41,"nodeType":"385","endLine":134,"endColumn":65},{"ruleId":"348","severity":1,"message":"396","line":43,"column":10,"nodeType":"350","messageId":"351","endLine":43,"endColumn":20},{"ruleId":"348","severity":1,"message":"397","line":49,"column":7,"nodeType":"350","messageId":"351","endLine":49,"endColumn":15},{"ruleId":"348","severity":1,"message":"398","line":50,"column":7,"nodeType":"350","messageId":"351","endLine":50,"endColumn":12},{"ruleId":"348","severity":1,"message":"358","line":51,"column":9,"nodeType":"350","messageId":"351","endLine":51,"endColumn":16},{"ruleId":"348","severity":1,"message":"399","line":55,"column":11,"nodeType":"350","messageId":"351","endLine":55,"endColumn":23},{"ruleId":"348","severity":1,"message":"400","line":55,"column":25,"nodeType":"350","messageId":"351","endLine":55,"endColumn":40},{"ruleId":"348","severity":1,"message":"361","line":57,"column":11,"nodeType":"350","messageId":"351","endLine":57,"endColumn":17},{"ruleId":"348","severity":1,"message":"369","line":57,"column":19,"nodeType":"350","messageId":"351","endLine":57,"endColumn":28},{"ruleId":"348","severity":1,"message":"373","line":1,"column":16,"nodeType":"350","messageId":"351","endLine":1,"endColumn":27},{"ruleId":"348","severity":1,"message":"358","line":9,"column":9,"nodeType":"350","messageId":"351","endLine":9,"endColumn":16},{"ruleId":"348","severity":1,"message":"400","line":10,"column":24,"nodeType":"350","messageId":"351","endLine":10,"endColumn":39},{"ruleId":"348","severity":1,"message":"401","line":13,"column":7,"nodeType":"350","messageId":"351","endLine":13,"endColumn":11},{"ruleId":"348","severity":1,"message":"402","line":17,"column":9,"nodeType":"350","messageId":"351","endLine":17,"endColumn":15},{"ruleId":"344","replacedBy":"403"},{"ruleId":"346","replacedBy":"404"},{"ruleId":"348","severity":1,"message":"361","line":51,"column":10,"nodeType":"350","messageId":"351","endLine":51,"endColumn":16},{"ruleId":"348","severity":1,"message":"369","line":51,"column":18,"nodeType":"350","messageId":"351","endLine":51,"endColumn":27},{"ruleId":"348","severity":1,"message":"358","line":53,"column":9,"nodeType":"350","messageId":"351","endLine":53,"endColumn":16},{"ruleId":"348","severity":1,"message":"405","line":16,"column":11,"nodeType":"350","messageId":"351","endLine":16,"endColumn":18},{"ruleId":"391","severity":1,"message":"392","line":79,"column":25,"nodeType":"357","endLine":81,"endColumn":55},{"ruleId":"391","severity":1,"message":"392","line":88,"column":25,"nodeType":"357","endLine":88,"endColumn":83},{"ruleId":"391","severity":1,"message":"392","line":94,"column":25,"nodeType":"357","endLine":94,"endColumn":83},{"ruleId":"391","severity":1,"message":"392","line":100,"column":25,"nodeType":"357","endLine":100,"endColumn":83},{"ruleId":"348","severity":1,"message":"361","line":14,"column":10,"nodeType":"350","messageId":"351","endLine":14,"endColumn":16},{"ruleId":"348","severity":1,"message":"369","line":14,"column":18,"nodeType":"350","messageId":"351","endLine":14,"endColumn":27},{"ruleId":"348","severity":1,"message":"370","line":15,"column":10,"nodeType":"350","messageId":"351","endLine":15,"endColumn":20},{"ruleId":"348","severity":1,"message":"371","line":15,"column":22,"nodeType":"350","messageId":"351","endLine":15,"endColumn":34},{"ruleId":"348","severity":1,"message":"372","line":24,"column":27,"nodeType":"350","messageId":"351","endLine":24,"endColumn":40},{"ruleId":"348","severity":1,"message":"393","line":12,"column":10,"nodeType":"350","messageId":"351","endLine":12,"endColumn":18},{"ruleId":"348","severity":1,"message":"362","line":1,"column":17,"nodeType":"350","messageId":"351","endLine":1,"endColumn":25},{"ruleId":"383","severity":1,"message":"384","line":76,"column":31,"nodeType":"385","endLine":76,"endColumn":59},{"ruleId":"348","severity":1,"message":"362","line":1,"column":17,"nodeType":"350","messageId":"351","endLine":1,"endColumn":25},{"ruleId":"348","severity":1,"message":"401","line":11,"column":9,"nodeType":"350","messageId":"351","endLine":11,"endColumn":13},{"ruleId":"348","severity":1,"message":"406","line":6,"column":5,"nodeType":"350","messageId":"351","endLine":6,"endColumn":17},{"ruleId":"348","severity":1,"message":"407","line":10,"column":9,"nodeType":"350","messageId":"351","endLine":10,"endColumn":24},{"ruleId":"348","severity":1,"message":"408","line":11,"column":9,"nodeType":"350","messageId":"351","endLine":11,"endColumn":22},{"ruleId":"348","severity":1,"message":"409","line":12,"column":9,"nodeType":"350","messageId":"351","endLine":12,"endColumn":19},{"ruleId":"348","severity":1,"message":"410","line":13,"column":9,"nodeType":"350","messageId":"351","endLine":13,"endColumn":26},{"ruleId":"377","severity":1,"message":"378","line":43,"column":14,"nodeType":"350","messageId":"379","endLine":43,"endColumn":15},{"ruleId":"377","severity":1,"message":"378","line":48,"column":14,"nodeType":"350","messageId":"379","endLine":48,"endColumn":15},{"ruleId":"377","severity":1,"message":"378","line":57,"column":14,"nodeType":"350","messageId":"379","endLine":57,"endColumn":15},{"ruleId":"377","severity":1,"message":"411","line":60,"column":16,"nodeType":"350","messageId":"379","endLine":60,"endColumn":17},{"ruleId":"377","severity":1,"message":"378","line":77,"column":13,"nodeType":"350","messageId":"379","endLine":77,"endColumn":14},{"ruleId":"348","severity":1,"message":"412","line":83,"column":9,"nodeType":"350","messageId":"351","endLine":83,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":84,"column":14,"nodeType":"350","messageId":"379","endLine":84,"endColumn":15},{"ruleId":"377","severity":1,"message":"411","line":86,"column":16,"nodeType":"350","messageId":"379","endLine":86,"endColumn":17},{"ruleId":"377","severity":1,"message":"378","line":98,"column":12,"nodeType":"350","messageId":"379","endLine":98,"endColumn":13},{"ruleId":"348","severity":1,"message":"401","line":11,"column":9,"nodeType":"350","messageId":"351","endLine":11,"endColumn":13},{"ruleId":"348","severity":1,"message":"373","line":1,"column":16,"nodeType":"350","messageId":"351","endLine":1,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":74,"column":14,"nodeType":"350","messageId":"379","endLine":74,"endColumn":15},{"ruleId":"348","severity":1,"message":"394","line":104,"column":12,"nodeType":"350","messageId":"351","endLine":104,"endColumn":22},{"ruleId":"348","severity":1,"message":"395","line":115,"column":12,"nodeType":"350","messageId":"351","endLine":115,"endColumn":24},{"ruleId":"348","severity":1,"message":"413","line":120,"column":9,"nodeType":"350","messageId":"351","endLine":120,"endColumn":12},{"ruleId":"355","severity":1,"message":"386","line":123,"column":14,"nodeType":"357","endLine":123,"endColumn":79},{"ruleId":"383","severity":1,"message":"384","line":134,"column":41,"nodeType":"385","endLine":134,"endColumn":65},{"ruleId":"348","severity":1,"message":"362","line":1,"column":17,"nodeType":"350","messageId":"351","endLine":1,"endColumn":25},{"ruleId":"364","severity":1,"message":"365","line":40,"column":5,"nodeType":"366","messageId":"367","endLine":40,"endColumn":9},{"ruleId":"364","severity":1,"message":"368","line":43,"column":3,"nodeType":"366","messageId":"367","endLine":43,"endColumn":12},{"ruleId":"348","severity":1,"message":"405","line":97,"column":11,"nodeType":"350","messageId":"351","endLine":97,"endColumn":18},{"ruleId":"348","severity":1,"message":"358","line":98,"column":11,"nodeType":"350","messageId":"351","endLine":98,"endColumn":18},{"ruleId":"364","severity":1,"message":"365","line":39,"column":3,"nodeType":"366","messageId":"367","endLine":39,"endColumn":7},{"ruleId":"364","severity":1,"message":"368","line":42,"column":1,"nodeType":"366","messageId":"367","endLine":42,"endColumn":10},{"ruleId":"348","severity":1,"message":"358","line":97,"column":11,"nodeType":"350","messageId":"351","endLine":97,"endColumn":18},{"ruleId":"348","severity":1,"message":"359","line":99,"column":12,"nodeType":"350","messageId":"351","endLine":99,"endColumn":21},{"ruleId":"348","severity":1,"message":"360","line":99,"column":22,"nodeType":"350","messageId":"351","endLine":99,"endColumn":34},{"ruleId":"348","severity":1,"message":"361","line":106,"column":13,"nodeType":"350","messageId":"351","endLine":106,"endColumn":19},{"ruleId":"348","severity":1,"message":"353","line":108,"column":24,"nodeType":"350","messageId":"351","endLine":108,"endColumn":32},{"ruleId":"348","severity":1,"message":"362","line":1,"column":17,"nodeType":"350","messageId":"351","endLine":1,"endColumn":25},{"ruleId":"348","severity":1,"message":"414","line":1,"column":27,"nodeType":"350","messageId":"351","endLine":1,"endColumn":37},{"ruleId":"348","severity":1,"message":"415","line":53,"column":7,"nodeType":"350","messageId":"351","endLine":53,"endColumn":13},{"ruleId":"348","severity":1,"message":"416","line":9,"column":8,"nodeType":"350","messageId":"351","endLine":9,"endColumn":23},{"ruleId":"348","severity":1,"message":"417","line":15,"column":10,"nodeType":"350","messageId":"351","endLine":15,"endColumn":21},{"ruleId":"348","severity":1,"message":"418","line":40,"column":7,"nodeType":"350","messageId":"351","endLine":40,"endColumn":14},{"ruleId":"348","severity":1,"message":"419","line":56,"column":6,"nodeType":"350","messageId":"351","endLine":56,"endColumn":13},{"ruleId":"348","severity":1,"message":"420","line":61,"column":7,"nodeType":"350","messageId":"351","endLine":61,"endColumn":18},{"ruleId":"348","severity":1,"message":"421","line":64,"column":7,"nodeType":"350","messageId":"351","endLine":64,"endColumn":15},{"ruleId":"348","severity":1,"message":"422","line":65,"column":7,"nodeType":"350","messageId":"351","endLine":65,"endColumn":18},{"ruleId":"348","severity":1,"message":"423","line":70,"column":10,"nodeType":"350","messageId":"351","endLine":70,"endColumn":14},{"ruleId":"348","severity":1,"message":"424","line":71,"column":10,"nodeType":"350","messageId":"351","endLine":71,"endColumn":21},{"ruleId":"348","severity":1,"message":"353","line":79,"column":16,"nodeType":"350","messageId":"351","endLine":79,"endColumn":24},{"ruleId":"348","severity":1,"message":"425","line":80,"column":16,"nodeType":"350","messageId":"351","endLine":80,"endColumn":24},{"ruleId":"377","severity":1,"message":"378","line":110,"column":18,"nodeType":"350","messageId":"379","endLine":110,"endColumn":19},{"ruleId":"348","severity":1,"message":"426","line":125,"column":9,"nodeType":"350","messageId":"351","endLine":125,"endColumn":25},{"ruleId":"348","severity":1,"message":"427","line":129,"column":9,"nodeType":"350","messageId":"351","endLine":129,"endColumn":32},{"ruleId":"348","severity":1,"message":"428","line":147,"column":12,"nodeType":"350","messageId":"351","endLine":147,"endColumn":25},{"ruleId":"355","severity":1,"message":"386","line":149,"column":14,"nodeType":"357","endLine":149,"endColumn":79},"no-native-reassign",["429"],"no-negated-in-lhs",["430"],"no-unused-vars","'ApolloProvider' is defined but never used.","Identifier","unusedVar","'client' is assigned a value but never used.","'loading1' is assigned a value but never used.","'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'history' is assigned a value but never used.","'formError' is assigned a value but never used.","'setFormError' is assigned a value but never used.","'errors' is assigned a value but never used.","'useState' is defined but never used.","'users' is assigned a value but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","Duplicate key 'container'.","'setErrors' is assigned a value but never used.","'usersValue' is assigned a value but never used.","'setUserValue' is assigned a value but never used.","'assignLoading' is assigned a value but never used.","'useCallback' is defined but never used.","'SideAndNavbar' is defined but never used.","'usersloading' is assigned a value but never used.","'projectsloading' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'select' is already defined.","'opt' is already defined.","'el' is already defined.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'user' is assigned a value but never used.","'openNav' is defined but never used.","'closeNav' is defined but never used.","'HandleOnClickAssignUser' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Collapse' is defined but never used.","'AssignUser' is defined but never used.","'CreateTicket' is defined but never used.","'createData' is defined but never used.","'indexVal' is assigned a value but never used.","'index' is assigned a value but never used.","'markersArray' is assigned a value but never used.","'setMarkersArray' is assigned a value but never used.","'rows' is assigned a value but never used.","'length' is assigned a value but never used.",["429"],["430"],"'classes' is assigned a value but never used.","'counterValue' is assigned a value but never used.","'featureRequests' is assigned a value but never used.","'otherComments' is assigned a value but never used.","'BugsErrors' is assigned a value but never used.","'trainingDocuments' is assigned a value but never used.","'j' is already defined.","'countArray' is assigned a value but never used.","'one' is assigned a value but never used.","'useContext' is defined but never used.","'styles' is assigned a value but never used.","'TablePagination' is defined but never used.","'useMutation' is defined but never used.","'columns' is assigned a value but never used.","'counter' is assigned a value but never used.","'valueNumber' is assigned a value but never used.","'userData' is assigned a value but never used.","'projectData' is assigned a value but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'loading2' is assigned a value but never used.","'handleChangePage' is assigned a value but never used.","'handleChangeRowsPerPage' is assigned a value but never used.","'RenderElement' is defined but never used.","no-global-assign","no-unsafe-negation"]