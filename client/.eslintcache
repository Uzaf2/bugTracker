[{"/Users/usmanzafar/Desktop/bugTracker/client/src/index.js":"1","/Users/usmanzafar/Desktop/bugTracker/client/src/ApolloProvider.js":"2","/Users/usmanzafar/Desktop/bugTracker/client/src/App.js":"3","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Login.js":"4","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ViewProjectsList.js":"5","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateProject.js":"6","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Register.js":"7","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser.js":"8","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails.js":"9","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Users.js":"10","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageUserRoles.js":"11","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable2.js":"12","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateTicket.js":"13","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable.js":"14","/Users/usmanzafar/Desktop/bugTracker/client/src/components/SideAndNavbar.js":"15","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserTable.js":"16","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable.js":"17","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnel.js":"18","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnelQuery.js":"19","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable2.js":"20","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserList.js":"21","/Users/usmanzafar/Desktop/bugTracker/client/src/util/hooks.js":"22","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Accounts.js":"23","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TestUserRoles.js":"24","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TestUserTable.js":"25","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails2.js":"26","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Dashboard.js":"27","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketStatusBarChart.js":"28","/Users/usmanzafar/Desktop/bugTracker/client/src/components/DeveloperTicketsPieChart.js":"29","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketTypePieChart.js":"30","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketPriorityBarChart.js":"31","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageProjectUsers.js":"32","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectUserAssign.js":"33","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser2.js":"34","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TicketDetails.js":"35","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/NewLogin.js":"36"},{"size":149,"mtime":1618575330302,"results":"37","hashOfConfig":"38"},{"size":675,"mtime":1618575330297,"results":"39","hashOfConfig":"38"},{"size":4188,"mtime":1619533540220,"results":"40","hashOfConfig":"38"},{"size":6453,"mtime":1619537535510,"results":"41","hashOfConfig":"38"},{"size":283,"mtime":1618575330304,"results":"42","hashOfConfig":"38"},{"size":2414,"mtime":1619177197064,"results":"43","hashOfConfig":"38"},{"size":7690,"mtime":1618582694300,"results":"44","hashOfConfig":"38"},{"size":3148,"mtime":1619244774039,"results":"45","hashOfConfig":"38"},{"size":1921,"mtime":1618575330303,"results":"46","hashOfConfig":"38"},{"size":406,"mtime":1618575330303,"results":"47","hashOfConfig":"38"},{"size":3399,"mtime":1619247424772,"results":"48","hashOfConfig":"38"},{"size":4181,"mtime":1618669411382,"results":"49","hashOfConfig":"38"},{"size":6726,"mtime":1619248176174,"results":"50","hashOfConfig":"38"},{"size":5859,"mtime":1619528757771,"results":"51","hashOfConfig":"38"},{"size":5231,"mtime":1619529606771,"results":"52","hashOfConfig":"38"},{"size":4021,"mtime":1618655212995,"results":"53","hashOfConfig":"38"},{"size":5830,"mtime":1619528344745,"results":"54","hashOfConfig":"38"},{"size":5800,"mtime":1618783567123,"results":"55","hashOfConfig":"38"},{"size":996,"mtime":1618575330299,"results":"56","hashOfConfig":"38"},{"size":5192,"mtime":1619530212653,"results":"57","hashOfConfig":"38"},{"size":1023,"mtime":1618575330300,"results":"58","hashOfConfig":"38"},{"size":414,"mtime":1618575330304,"results":"59","hashOfConfig":"38"},{"size":3682,"mtime":1618637818211,"results":"60","hashOfConfig":"38"},{"size":3296,"mtime":1618595290762,"results":"61","hashOfConfig":"38"},{"size":3586,"mtime":1618636582827,"results":"62","hashOfConfig":"38"},{"size":2625,"mtime":1619265063373,"results":"63","hashOfConfig":"38"},{"size":1247,"mtime":1619178242536,"results":"64","hashOfConfig":"38"},{"size":1982,"mtime":1619178082476,"results":"65","hashOfConfig":"38"},{"size":3370,"mtime":1619178104443,"results":"66","hashOfConfig":"38"},{"size":2170,"mtime":1619178094169,"results":"67","hashOfConfig":"38"},{"size":1860,"mtime":1619178074928,"results":"68","hashOfConfig":"38"},{"size":5448,"mtime":1619241351331,"results":"69","hashOfConfig":"38"},{"size":1990,"mtime":1619245131665,"results":"70","hashOfConfig":"38"},{"size":2994,"mtime":1619263236422,"results":"71","hashOfConfig":"38"},{"size":1735,"mtime":1619541555702,"results":"72","hashOfConfig":"38"},{"size":3806,"mtime":1619540247420,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"l0fpne",{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"76"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"76"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"76"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"76"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"76"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"76"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"76"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"/Users/usmanzafar/Desktop/bugTracker/client/src/index.js",[],["178","179"],"/Users/usmanzafar/Desktop/bugTracker/client/src/ApolloProvider.js",["180"],"import React from 'react';\r\nimport App from './App';\r\nimport  ApolloClient from 'apollo-client';\r\nimport { InMemoryCache } from '@apollo/client';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { setContext } from 'apollo-link-context';\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n    uri:'http://localhost:5000'\r\n})\r\n\r\n/*\r\nconst authLink = setContext(()=>{\r\n    const token = localStorage.getItem('jwtToken');\r\n\r\n})\r\n*/\r\n\r\nconst client = new ApolloClient({\r\n    link: httpLink,\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n\r\nexport default (\r\n    <ApolloProvider client={client}>\r\n   <App/> \r\n    </ApolloProvider>\r\n)","/Users/usmanzafar/Desktop/bugTracker/client/src/App.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Login.js",["181","182","183","184","185"],"\r\nimport { React, useState}from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport '../App.css'; \r\nimport { Link } from 'react-router-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from '../util/hooks';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginTop: 300,\r\n      alignContent: \"center\"\r\n    },\r\n    fontType:{\r\n        fontFamily: font,\r\n        fontSize: 16\r\n    },\r\n    '@global': {\r\n        body: {\r\n            backgroundColor: theme.palette.common.white,\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(5, 0, 4),\r\n    },\r\n    container:{\r\n        alignItems:\"center\",\r\n        justify:\"center\",\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    signUp:{\r\n        marginTop:'20px'\r\n    }    \r\n\r\n  }));\r\n\r\n  const font =  \"'Merriweather', serif\";\r\n  \r\n  function Login (props) {\r\n    const [ errors, setErrors ] = useState({});\r\n    const { onChange, onSubmit, values } = useForm(loginUser,{\r\n        username: '',\r\n        password: ''\r\n    });\r\n\r\n    const [login, {loading} ] = useMutation(LOGIN_USER, {\r\n        update(_,{data}){\r\n            //console.log(\"In the update function of the login page\");\r\n            //console.log(\"Data from login\",data);\r\n            props.history.push('/ManageUserRoles');\r\n        }, \r\n        onError(err){\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n        }, variables : values\r\n    });\r\n\r\n    function loginUser() {\r\n        login();\r\n    }\r\n\r\n    const history = useHistory();\r\n    function handleClick() {\r\n        history.push(\"/Register\");\r\n    }\r\n\r\n    function handleClickDemo() {\r\n        history.push(\"/ManageUserRoles\");\r\n    }\r\n  \r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" className={useStyles.container} class=\"background\">\r\n            <CssBaseline />\r\n            <div class=\"form\">\r\n            <div className={useStyles.paper} class=\"innerForm\">\r\n            <Typography component=\"h1\" variant=\"h5\" className={styles.fontType} style={{ marginBottom : \"10px\" }}>\r\n            </Typography>\r\n                <form className={useStyles.form} class=\"formContainer1\" onSubmit={onSubmit}>\r\n                    <Grid container spacing={2}>\r\n                       \r\n                        <Grid item xs={12}  >\r\n                        <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Username\"\r\n                                type=\"text\"\r\n                                autoComplete=\"username\"\r\n                                name=\"username\"\r\n                                error={errors.username ? true: false}\r\n                                value={values.username}\r\n                                onChange={onChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                error={errors.password ? true: false}\r\n                                value={values.password}\r\n                                onChange={onChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                   \r\n                \r\n                    <label class=\"mdc-text-field mdc-text-field--filled\">\r\n  <span class=\"mdc-text-field__ripple\"></span>\r\n  <span class=\"mdc-floating-label\" id=\"my-label-id\">My Label</span>\r\n  <input class=\"mdc-text-field__input\" type=\"text\"\r\n         aria-labelledby=\"my-label-id\"\r\n         aria-controls=\"my-helper-id\"\r\n         aria-describedby=\"my-helper-id\"/>\r\n  <span class=\"mdc-line-ripple\"></span>\r\n</label>\r\n<div class=\"mdc-text-field-helper-line\">\r\n  <div class=\"mdc-text-field-helper-text\" id=\"my-helper-id\" aria-hidden=\"true\">helper text</div>\r\n</div>\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        className={useStyles.submit}\r\n                        color=\"primary\"\r\n                        style={{ marginTop : \"10px\" }}>\r\n                    <Typography component=\"h1\" variant=\"h5\" className={styles.fontType}>\r\n                    Login\r\n                    </Typography>\r\n                    </Button>\r\n                    \r\n                    <a href=\"#\" className=\"signUp\" onClick={handleClick}> Don't have an account? Sign Up ? </a>\r\n                    <p></p>\r\n                    <a href=\"#\" className=\"signUp\" onClick={handleClickDemo}> For Demo Account click here ! </a>\r\n                 </form>\r\n                 <div className=\"ui error message\">\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value=>(\r\n                            <li key={value}>{value}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div> \r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst LOGIN_USER = gql `\r\nmutation login($username:String! $password: String!) {\r\n    login(username: $username password: $password) { \r\n    id\r\n    email\r\n    username\r\n    creationTime\r\n    }\r\n}`;\r\n\r\nexport default Login;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ViewProjectsList.js",["186"],"import React from 'react';\r\nimport ProjectTable from '../components/ProjectTable';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\n\r\n function ViewProjectsList() {\r\n\r\n  return (\r\n    <div>\r\n        <ProjectTable/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default ViewProjectsList;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateProject.js",["187"],"import React, { useState } from 'react';\r\nimport '../css/createProject.css';\r\nimport '../css/main.css';\r\nimport gql from 'graphql-tag';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\n\r\nfunction CreateProject(props) {\r\n\r\n    const [errors, setErrors]= useState({});\r\n    const {onChange, onSubmit, values}= useForm(createProject, {\r\n        name:'',\r\n        description: ''\r\n    });\r\n    \r\n    const [create, {loading}] = useMutation (CREATE_PROJECT,{\r\n        update(_,  {data}){\r\n            //console.log(\"In the update function of the create Project page\");\r\n            console.log(\"Data from login\",data);\r\n        },\r\n        onError(err) {\r\n            console.log(err);\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n        variables:values\r\n    });\r\n    \r\n    function createProject () {\r\n        create();\r\n    }\r\n\r\n return (\r\n<body>\r\n\r\n        <SideAndNavbar/>\r\n          <form onSubmit={onSubmit} class=\"inputForm\">\r\n            <label for=\"name\">Project Name</label>\r\n            <input \r\n            type=\"text\" \r\n            id=\"name\" \r\n            name=\"name\" \r\n            placeholder=\"Project name..\" \r\n            autoComplete=\"name\"\r\n            error={errors.name ? true:false}\r\n            value={values.name}\r\n            onChange={onChange}/>\r\n            <label for=\"description\">Project Description</label>\r\n            <textarea \r\n            className=\"description\" \r\n            type=\"text\" \r\n            id=\"description\" \r\n            name=\"description\" \r\n            placeholder=\"Project desc..\" required\r\n            error={errors.description  ? true:false}\r\n            value={values.description}\r\n            onChange={onChange}></textarea>\r\n            <input type=\"submit\" value=\"Create Project\" />\r\n          </form>\r\n          <div className=\"ui error message\">\r\n                <ul className=\"list\">\r\n                    {Object.values(errors).map(value=>(\r\n                        <li key={value}>{value}</li>\r\n                    ))}\r\n                </ul>\r\n          </div>\r\n   </body>\r\n )\r\n}\r\n\r\nconst CREATE_PROJECT =  gql `\r\nmutation createProject($name: String! $description: String!) {\r\n    createProject(name:$name description: $description) {\r\n        name description\r\n    }     \r\n}`;\r\n\r\nexport default CreateProject;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Register.js",["188","189","190"],"import { React, useState, useContext } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { TextField } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\nimport { Input } from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inputType:{\r\n        width: '100%'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: 300,\r\n        alignContent: \"center\"\r\n    },\r\n    fontType: {\r\n        fontFamily: font,\r\n        fontSize: 16\r\n    },\r\n    '@global': {\r\n        body: {\r\n            backgroundColor: theme.palette.common.white,\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n        height: '100%'\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(5, 0, 4),\r\n    },\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n        alignItems: \"center\",\r\n        justify: \"center\",\r\n    },\r\n\r\n}));\r\n\r\nconst font = \"'Merriweather', serif\";\r\nfunction Register(props) {\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const { onChange, onSubmit, values } = useForm(registerUser, {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    });\r\n\r\n\r\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update(_, { data }) {\r\n            //console.log(data)\r\n            props.history.push('/');\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            //console.log(\"setting erorrs:\",errors)\r\n        },\r\n        variables: values\r\n    });\r\n\r\n    //console.log(\"Adduser\", addUser);\r\n    /*\r\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update(_, { data: { register: userData }}){\r\n              console.log(userData)\r\n              props.history.push('/');\r\n          },\r\n          onError(err){\r\n             setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n          },\r\n          variables: values\r\n      });\r\n      */\r\n\r\n    function registerUser() {\r\n        addUser();\r\n    }\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" className={useStyles.container} class=\"background\">\r\n            <CssBaseline />\r\n            <div className=\"form\">\r\n                <div className={useStyles.paper} class=\"innerForm\">\r\n                    <Typography component=\"h1\" variant=\"h5\" className={styles.fontType} style={{ marginBottom: \"10px\" }}>\r\n                    </Typography>\r\n                    <form className={useStyles.form} class=\"formContainer1\" onSubmit={onSubmit}>\r\n                        <Grid container spacing={2}>\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    id=\"username\"\r\n                                    label=\"Name\"\r\n                                    error={errors.username ? true : false}\r\n                                    value={values.username}\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    autoComplete=\"username\"\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email\"\r\n                                    type=\"text\"\r\n                                    error={errors.email ? true : false}\r\n                                    value={values.email}\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    id=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    error={errors.password ? true : false}\r\n                                    value={values.password}\r\n                                    name=\"password\"\r\n                                    autoComplete=\"password\"\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    label=\"Confirm Password\"\r\n                                    type=\"password\"\r\n                                    id=\"confirmPassword\"\r\n                                    name=\"confirmPassword\"\r\n                                    autoComplete=\"confirmPassword\"\r\n                                    error={errors.confirmPassword ? true : false}\r\n                                    value={values.confirmPassword}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={useStyles.submit}\r\n                            style={{ marginTop: \"10px\" }}>\r\n                            <Typography component=\"h1\" variant=\"h5\" className={styles.fontType}>\r\n                                Register\r\n                    </Typography>\r\n                        </Button>\r\n                    </form>\r\n                    <div className=\"ui error message\">\r\n                        <ul className=\"list\">\r\n                            {Object.values(errors).map(value => (\r\n                                <li key={value}>{value}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n        email: $email\r\n      }\r\n    ) {\r\n      username\r\n      email\r\n      creationTime\r\n    }\r\n  }`;\r\n\r\nexport default Register;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser.js",["191","192","193","194","195","196","197","198"],"import React, { useState } from 'react';\r\nimport '../css/createProject.css';\r\nimport '../css/main.css';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Message, Form } from \"semantic-ui-react\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nfunction AssignUser(props) {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const [formError,setFormError] = useState(false);\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [projectId, setProjectId] = useState(\"\");\r\n    const index = props.location.state.index - 1;\r\n    const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n    const projectsQuery = useQuery(FETCH_PROJECTS_QUERY);\r\n\r\n    const [ errors, setErrors ] = useState({});\r\n\r\n    const [assignUser,{loading1} ] = useMutation(ASSIGN_USER, {\r\n      update(_,{data}){\r\n\r\n        console.log(\"Mutation done\")\r\n        success();\r\n      }, \r\n      onError(err){\r\n          setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n      }, variables: { userId, projectId }\r\n     \r\n  });\r\n\r\n    //console.log(userId,projectId);\r\n  \r\n    var rows= ['Select the user'];\r\n    if (loading) \r\n         return <p>Loading...</p>;\r\n    else {\r\n        var length = data.getUsers.length;\r\n        for(var i=0;i<length;i++)\r\n        {\r\n            rows.push(data.getUsers[i].username )\r\n        }    \r\n    }\r\n\r\n    function AssignUser()\r\n    {\r\n      assignUser();\r\n    }\r\n\r\n    function success() {\r\n      alert(\"User assignned to the project\");\r\n    }\r\n\r\n    function handleOnClick(event) {\r\n\r\n        var x = document.getElementById(\"selectValue\");\r\n        const valueMatch = x.value;\r\n        var indexValue;\r\n        const length = data.getUsers.length;\r\n        for(var i=0;i<length;i++)\r\n        {\r\n            if (valueMatch === data.getUsers[i].username)\r\n            {\r\n                indexValue = i;\r\n            }\r\n        } \r\n\r\n        setUserId(data.getUsers[indexValue].id);\r\n        setProjectId(projectsQuery.data.getProjects[index].id);\r\n\r\n        AssignUser();\r\n      }  \r\n      \r\n return (\r\n<body>\r\n        <SideAndNavbar/>\r\n        <div>\r\n        <label for=\"name\">Assign Users to Projects</label>\r\n         <select id=\"selectValue\"  onChange={handleOnClick} >\r\n         {rows.map(time => {\r\n           return (\r\n             <option value={time}>{time}</option>\r\n           )\r\n         })}\r\n    </select>\r\n   \r\n        </div>\r\n   </body>\r\n )\r\n}\r\n\r\nconst FETCH_USERS_QUERY = gql`\r\n{\r\n  getUsers{\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getProjects{\r\n  name\r\n  description\r\n  id\r\n}\r\n}`;\r\n\r\nconst ASSIGN_USER =  gql `\r\nmutation assignUser($projectId: String! $userId: String!) {\r\n  assignUser(projectId:$projectId userId: $userId) {\r\n        name description id\r\n    }     \r\n}`;\r\nexport default AssignUser;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails.js",["199","200","201","202"],"import React, { useState } from 'react';\r\nimport '../css/createProject.css';\r\n\r\n\r\n\r\nimport '../css/main.css';\r\nimport gql from 'graphql-tag';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\nimport ProjectTable2 from '../components/ProjectTable2';\r\nimport AssignedPersonnel from '../components/AssignedPersonnel';\r\nimport TicketsTable2 from '../components/TicketsTable2';\r\nimport '../css/projectDetails.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ProjectDetails(props) {\r\n  const history = useHistory();\r\n//console.log(\"Props\", props.history.location.state.indexValue);\r\n//console.log(\"Props 2:\", props.history.location.state.index);\r\nvar value =  props.history.location.state.index;\r\n//console.log(\"Props\", props.history.location.state.array[value - 1]);\r\n\r\nfunction AssignUser() {\r\n  //history.push('/AssignUser');\r\n  history.push({\r\n    pathname: '/AssignUser',\r\n    search: '?update=true',  // query string\r\n    state: {  // location state\r\n      index: value, \r\n    },\r\n  }); \r\n\r\n  console.log(\"Value from index\", value);\r\n}\r\n\r\nfunction CreateTicket() {\r\n  history.push('/CreateTicket');\r\n}\r\n\r\n return (\r\n<body>\r\n    <SideAndNavbar/>\r\n      \r\n    <div className=\"bottomDiv\">\r\n    <Button variant=\"contained\" color=\"primary\" onClick={AssignUser} className=\"btn1\">Assign User</Button>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={CreateTicket} className=\"btn2\">Create Ticket</Button>\r\n    </div>\r\n     \r\n    <div className=\"firstDiv\">\r\n    \r\n    <ProjectTable2 index={value}/> \r\n    </div>\r\n    <div className=\"main\">\r\n    <AssignedPersonnel index={value}/>\r\n    <div className=\"secondMain\">\r\n    <TicketsTable2 className=\"ticketsTable\"/>\r\n    </div>\r\n    </div>\r\n    \r\n    \r\n   </body>\r\n )\r\n}\r\n\r\n\r\nexport default ProjectDetails;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Users.js",["203","204"],"import React from 'react';\r\nimport {useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nfunction Users () {\r\n    const { loading, data: { getUsers:users } } = useQuery(FETCH_USERS_QUERY);\r\n    return (\r\n       <div>\r\n       </div>\r\n        );\r\n}\r\n\r\nconst FETCH_USERS_QUERY = gql `\r\n{\r\n  getUsers{\r\n  id\r\n  creationTime\r\n  username\r\n  role\r\n  access\r\n}\r\n}\r\n\r\n`;\r\n\r\nexport default Users;\r\n","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageUserRoles.js",["205","206","207","208","209","210","211"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport '../css/manageUserRoles.css';\r\nimport UserTable from '../components/UserTable';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\nimport { useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\n\r\nfunction ManageUserRoles(props) {\r\n\r\n  const [errors, setErrors]= useState({});\r\n  const [usersValue, setUserValue] = useState({});\r\n\r\n  const {onChange, onSubmit, values}= useForm(assignRole, {\r\n      name:'',\r\n      role: ''\r\n  });\r\n  \r\n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n  \r\n  const [assign, {loading:assignLoading}] = useMutation (ASSIGN_ROLE,{\r\n      update(_,  {data}){\r\n     \r\n      },\r\n      onError(err) {\r\n          //.graphQLErrors[0].extensions.exception.errors\r\n         // setErrors(err);\r\n          console.log(\"Errors from create tickets\", err);\r\n      },\r\n      variables:values\r\n  });\r\n  \r\n  \r\n  var rows= ['Select the user'];\r\n  if (loading) \r\n       return <p>Loading...</p>;\r\n  else {\r\n      var length = data.getUsers.length;\r\n      for(var i=0;i<length;i++)\r\n      {\r\n          rows.push(data.getUsers[i].username)\r\n      }    \r\n  }\r\n\r\n  function assignRole () {\r\n    console.log(\"Assign Role !!!\");\r\n    assign();\r\n}\r\n\r\n  return (\r\n    <body>\r\n    <SideAndNavbar/>\r\n   \r\n    <form onSubmit={onSubmit} class=\"inputForm\">\r\n   \r\n      <div id=\"main\" class=\"container\">\r\n        <div class=\"leftSide\">\r\n        \r\n          <div class=\"custom-select1\">\r\n          <h2>Manage User Roles</h2>\r\n            <label for=\"cars\" class=\"label1\" className=\"part1\">Select 1 or more Users:</label>\r\n            <br/>\r\n            <select id=\"name\" class=\"select1\" name=\"name\" onChange={onChange} value={values.name}>\r\n         {rows.map(time => {\r\n           return (\r\n             <option value={time}> {time} </option>\r\n           )\r\n         })}\r\n        </select>\r\n          </div>\r\n          \r\n          <div class=\"custom-select2\">\r\n            <label for=\"cars\" class=\"label2\" className=\"part2\">Select the Role to assign:</label>\r\n            <br/>\r\n            <select id=\"role\" class=\"select2\" name=\"role\" onChange={onChange} value={values.role}>\r\n              <option value=\"0\">--Select Role/None--:</option>\r\n              <option value=\"Admin\">Admin</option>\r\n              <option value=\"Demo Admin\">Demo_Admin</option>\r\n              <option value=\"Demo Developer\">Demo_Developer</option>\r\n              <option value=\"Demo Project Manager\">Demo_Project Manager</option>\r\n            </select>\r\n          </div>\r\n\r\n          <Button class=\"assignButton\" className=\"button1\" variant=\"contained\" color=\"primary\" onClick={assignRole()}>\r\n          Assign\r\n          </Button>\r\n         </div>\r\n       \r\n          <div class=\"rightSide\">\r\n            <UserTable class=\"userTable\" />\r\n          </div>\r\n      </div>\r\n      </form>\r\n    </body>\r\n  );\r\n}\r\n\r\nconst ASSIGN_ROLE = gql`\r\n  mutation  assignRole ($name: String! $role: String!){\r\n    assignRole (name: $name role: $role) \r\n  }`;\r\n\r\n  const FETCH_USERS_QUERY = gql`\r\n{\r\n  getUsers {\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\nexport default ManageUserRoles;\r\n","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable2.js",["212","213","214"],"import React, {useCallback} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\n\r\nconst useStyles = makeStyles({\r\n  banner:\r\n  {\r\n  backgroundColor: '#262B40',\r\n  height: '5%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  root: {\r\n    width: '170%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  { id: 'description', label: 'Description', minWidth: 100 },\r\n];\r\n\r\nfunction createData(name, description) {\r\n  return { name, description };\r\n}\r\n\r\nfunction ProjectTable2(props) {\r\n\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const index = props.index-1;\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\r\n\r\n  var rows = [];\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n    //var length = data.getProjects.length;\r\n    //for (var i = 0; i < ; i++) {\r\n      rows[index] = createData(data.getProjects[index].name, data.getProjects[index].description)\r\n    //}\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n\r\n  return (\r\n    <body>\r\n      <div className=\"Table\">\r\n        <div id=\"main\" class=\"main\">\r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n              \r\n            <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Project Details</h3>\r\n          </div>\r\n\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getProjects{\r\n  name\r\n  description\r\n}\r\n}`;\r\n\r\n\r\n\r\n\r\n\r\nexport default ProjectTable2;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/CreateTicket.js",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],"import React, { useState } from 'react';\r\nimport '../css/createProject.css';\r\nimport '../css/main.css';\r\nimport gql from 'graphql-tag';\r\nimport SideAndNavbar from '../components/SideAndNavbar';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useForm } from '../util/hooks';\r\nimport { useQuery } from '@apollo/client';\r\n\r\n\r\nfunction CreateTicket(props) {\r\n\r\n    const [errors, setErrors]= useState({});\r\n    const {onChange, onSubmit, values}= useForm(createProject, {\r\n        \r\n        title:'',\r\n        description: '',\r\n        assignedProjectInput: '',\r\n        assignedDeveloperInput: '',\r\n        priority: '',\r\n        type: '',\r\n        status: ''\r\n    });\r\n    \r\n    const [create, {loading}] = useMutation (CREATE_TICKET,{\r\n        update(_,  {data}){\r\n            console.log(\"Update!!\");\r\n        },\r\n        onError(err) {\r\n        //.graphQLErrors[0].extensions.exception.errors\r\n        // setErrors(err);\r\n        console.log(\"Errors from create tickets\", err);\r\n        },\r\n        variables:values\r\n    });\r\n\r\n    const {loading:usersloading, data: users} = useQuery (GET_USERS);\r\n    const {loading:projectsloading, data:projects} = useQuery (GET_PROJECTS);\r\n    \r\n    if (projects!=null)\r\n    {       \r\n        const length = projects.getProjects.length; \r\n        var projectsArray = [];\r\n        for (var i=0;i<projects.getProjects.length; i++)\r\n        {\r\n            projectsArray.push(projects.getProjects[i].name);\r\n        }\r\n    \r\n        var select = document.getElementById(\"assignedProjectInput\");   \r\n        \r\n        if (select!= null)\r\n        {\r\n            if (select.length < length)\r\n        {\r\n            // Put a check here\r\n            for(var i = 0; i < projectsArray.length; i++) {\r\n            var opt = projectsArray[i];\r\n            var el = document.createElement(\"option\");\r\n            el.textContent = opt;\r\n            el.value = opt;\r\n            select.appendChild(el);\r\n            }\r\n        }\r\n\r\n        }\r\n    }\r\n    if (users!=null)\r\n    {\r\n        const length = users.getUsers.length; \r\n        var usernames = [];\r\n        \r\n        for (var i=0;i<users.getUsers.length; i++)\r\n        {\r\n           usernames.push(users.getUsers[i].username);\r\n        }\r\n    \r\n        var select = document.getElementById(\"assignedDeveloperInput\");\r\n       \r\n        if (select != null)\r\n        {\r\n            if (select.length< length)\r\n            {\r\n                 // Put a check here\r\n                for(var i = 0; i < usernames.length; i++) {\r\n                var opt = usernames[i];\r\n                var el = document.createElement(\"option\");\r\n                el.textContent = opt;\r\n                el.value = opt;\r\n                select.appendChild(el);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function createProject () {\r\n        create();\r\n    }\r\n return (\r\n<body>\r\n\r\n        <SideAndNavbar/>\r\n          <form onSubmit={onSubmit} class=\"inputForm\">\r\n            <label for=\"title\">Ticket Title</label>\r\n            <input \r\n            type=\"text\" \r\n            id=\"title\" \r\n            name=\"title\" \r\n            placeholder=\"Ticket Title..\" \r\n            autoComplete=\"title\"\r\n            error={errors.title ? true:false}\r\n            value={values.title}\r\n            onChange={onChange}/>\r\n            <label for=\"description\">Ticket Description</label>\r\n            <textarea \r\n            className=\"description\" \r\n            type=\"text\" \r\n            id=\"description\" \r\n            name=\"description\" \r\n            placeholder=\"Project desc..\" required\r\n            error={errors.description}\r\n            value={values.description}\r\n            onChange={onChange}/>\r\n            <label for=\"\">Assigned Project</label>\r\n            <select id=\"assignedProjectInput\" name=\"assignedProjectInput\"\r\n            value={values.assignedProjectInput} onChange={onChange}>\r\n            </select>\r\n            <label for=\"assignedDeveloperInput\">Assigned Developer</label>\r\n            <select id=\"assignedDeveloperInput\" name=\"assignedDeveloperInput\"\r\n            id=\"assignedDeveloperInput\" name=\"assignedDeveloperInput\"\r\n            value={values.assignedDeveloperInput} onChange={onChange}>\r\n            </select>\r\n            <label for=\"priority\">Priority</label>\r\n            <select id=\"priority\"\r\n            value={values.priority}\r\n            name=\"priority\"\r\n            onChange={onChange}>\r\n            <option value=\"Low\">Low</option>\r\n            <option value=\"Medium\">Medium</option>\r\n            <option value=\"High\">High</option>\r\n            </select>\r\n            <label for=\"type\">Ticket Type</label>\r\n            <select id=\"type\" name=\"type\"\r\n            value={values.type}\r\n            id=\"type\"\r\n            name=\"type\"\r\n            onChange={onChange}>\r\n            <option value=\"Bugs/Error\">Bugs/Error</option>\r\n            <option value=\"Feature Requests\">Feature Requests</option>\r\n            <option value=\"Other Comments\">Other Comments</option>\r\n            <option value=\"Training/Document Requests\">Training/Document Requests</option>\r\n            </select>\r\n            <label for=\"ticketStatus\">Ticket Status</label>\r\n            <select name=\"status\" value={values.status}\r\n            id=\"status\" name=\"status\"\r\n            onChange={onChange}>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"open\">Open</option>\r\n            <option value=\"inprogress\">In Progress</option>\r\n            </select>\r\n            <input type=\"submit\" value=\"Create Ticket\"/>\r\n          </form>\r\n          <div className=\"ui error message\">\r\n                <ul className=\"list\">\r\n                    {Object.values(errors).map(value=>(\r\n                        <li key={value}>{value}</li>\r\n                    ))}\r\n                </ul>\r\n          </div>\r\n   </body>\r\n )\r\n}\r\n\r\nconst CREATE_TICKET =  gql `\r\nmutation createTicket($title: String! $description: String! $assignedProjectInput: String!\r\n    $assignedDeveloperInput: String! $priority: String!  $status: String! $type: String!) {\r\n    \r\n    createTicket(title:$title description: $description assignedProjectInput: $assignedProjectInput \r\n    assignedDeveloperInput: $assignedDeveloperInput priority:$priority status: $status type: $type) {\r\n    \r\n    id\r\n    title\r\n    description\r\n    priority \r\n    status\r\n    type\r\n    createdAt\r\n    updatedAt\r\n    \r\n}     \r\n}`;\r\n\r\nconst GET_USERS = gql`\r\n{\r\n    getUsers {\r\n        id \r\n        username\r\n        email\r\n        creationTime\r\n        role \r\n        access\r\n    }\r\n}\r\n`;\r\n\r\nconst GET_PROJECTS = gql` \r\n{\r\n    getProjects {\r\n        id \r\n        name\r\n        description\r\n        users\r\n        tickets \r\n    }\r\n}  `;\r\nexport default CreateTicket;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable.js",["230","231"],"import React, {useCallback} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/ticketsTable.css';\r\n//import SideAndNavbar from '../components/SideAndNavbar';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '1000px',\r\n    marginLeft: '5.5%',\r\n    marginTop:'5%'\r\n  },\r\n  banner:{\r\n  backgroundColor: '#262B40',\r\n  height: '15%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  \r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 100 },\r\n  { id: 'description', label: 'Description', minWidth: 100 },\r\n  { id: 'priority', label: 'Priority', minWidth: 100 },\r\n  { id: 'status', label: 'Status', minWidth: 100 },\r\n  { id: 'created', label: 'Creation Time and Date', minWidth: 100 },\r\n  { id: 'editDetails', label: 'Edit Ticket', minWidth: 100 },\r\n];\r\n\r\nfunction createData(name, description, priority, status, created, editDetails) {\r\n  return { name, description, priority, status, created, editDetails };\r\n}\r\n\r\nfunction TicketsTable() {\r\n\r\n  var valueNumber = 0;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\r\n\r\n  var rows = [];\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n    console.log(\"data\", data);\r\n    var length = data.getTickets.length;\r\n    for (var i = 0; i < length; i++) {\r\n\r\n     var time = data.getTickets[i].createdAt.split('T')[1];\r\n\r\n     var date = data.getTickets[i].createdAt.substring(0, data.getTickets[i].createdAt.indexOf(\"T\"));\r\n     time = time.slice(0, -5); \r\n     var dateTime = date+ \"\\t\\t\"+time;\r\n\r\n    rows[i] = createData(data.getTickets[i].title, data.getTickets[i].description \r\n    ,data.getTickets[i].priority, data.getTickets[i].status, dateTime, 'Edit Details');\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  function HandleOnClick(props, rowsArray) {\r\n   \r\n    history.push({\r\n      pathname: '/TicketDetails',\r\n      search: '?update=true',  // query string\r\n      state: {  // location state\r\n        index: props, \r\n        array: rowsArray\r\n      },\r\n    }); \r\n\r\n  }\r\n\r\n  function RenderElement(value, value2, value3) {\r\n    if (value2.id === \"editDetails\") {\r\n      return <a  onClick={() => HandleOnClick(value3, rows)} className=\"link\"> {value} </a>;\r\n    }\r\n    else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <body>\r\n      <div>\r\n        <SideAndNavbar></SideAndNavbar>\r\n        <div id=\"main\" class=\"main\">\r\n          <Paper className={classes.root}>\r\n          <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Tickets Table</h3>\r\n          <p className={classes.heading}>All the tickets you have in the database</p>\r\n          </div>\r\n            <TableContainer className={classes.container}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    valueNumber++;\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>    \r\n                                {RenderElement(value, column, valueNumber)}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getTickets{\r\n    title\r\n    description\r\n    priority\r\n    status\r\n    type\r\n    createdAt\r\n    updatedAt\r\n      }\r\n}`;\r\n\r\n\r\nexport default TicketsTable;\r\n\r\n/*\r\ntitle\r\ndescription\r\nassignedDeveloper\r\nsubmitter\r\npriority\r\nstatus\r\ntype\r\ncreatedAt\r\nupdatedAt\r\n\r\n\r\n\r\nusername\r\n    email\r\n    creationTime\r\n    role\r\n    access\r\n    */","/Users/usmanzafar/Desktop/bugTracker/client/src/components/SideAndNavbar.js",["232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport '../css/main.css';\r\nimport UserTable from './UserTable';\r\nimport grid from '../icons/grid-outline.svg';\r\nimport homeIcon from '../icons/home-outline.svg';\r\nimport layers from '../icons/layers-outline.svg';\r\nimport list from '../icons/list-outline.svg';\r\nimport peopleCirle from '../icons/people-circle-outline.svg';\r\n//import peopleOutline from '../icons/people-outline.svg';\r\nimport personAddOutline from '../icons/person-add-outline.svg';\r\nimport personCircleOutline from '../icons/person-circle-outline.svg';\r\n//import personOutline from 'person-outline.svg';\r\nimport reorderFourOutline from '../icons/reorder-four-outline.svg';\r\n//import users from 'users.svg';\r\nimport UserList from './UserList';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction SideAndNavbar(props) {\r\n  const history = useHistory();\r\n \r\n  function openNav(e) {\r\n    document.getElementById(\"mySidebar\").style.width = \"250px\";\r\n    document.getElementById(\"main\").style.marginLeft = \"250px\";\r\n\r\n    document.getElementById('navName').style.fontSize = '0.75rem';\r\n    document.getElementById('navName1').style.fontSize = '0.75rem';\r\n    document.getElementById('navName2').style.fontSize = '0.75rem';\r\n    document.getElementById('navName3').style.fontSize = '0.75rem';\r\n    document.getElementById('navName4').style.fontSize = '0.75rem';\r\n    document.getElementById('navName5').style.fontSize = '';\r\n\r\n    document.getElementById('grid').style.width = '30px';\r\n    document.getElementById('grid1').style.width = '30px';\r\n    document.getElementById('grid2').style.width = '30px';\r\n    document.getElementById('grid3').style.width = '30px';\r\n    document.getElementById('grid4').style.width = '30px';\r\n    document.getElementById('grid5').style.width = '30px';\r\n  }\r\n\r\n  function closeNav(e) {\r\n    document.getElementById('mySidebar').style.width = '60px';\r\n    document.getElementById('main').style.marginLeft = '60px';\r\n\r\n    document.getElementById('navName').style.fontSize = '0px';\r\n    document.getElementById('navName1').style.fontSize = '0px';\r\n    document.getElementById('navName2').style.fontSize = '0px';\r\n    document.getElementById('navName3').style.fontSize = '0px';\r\n    document.getElementById('navName4').style.fontSize = '0px';\r\n    document.getElementById('navName5').style.fontSize = '0px';\r\n\r\n    document.getElementById('grid').style.width = '30px';\r\n    document.getElementById('grid1').style.width = '30px';\r\n    document.getElementById('grid2').style.width = '30px';\r\n    document.getElementById('grid3').style.width = '30px';\r\n    document.getElementById('grid4').style.width = '30px';\r\n    document.getElementById('grid5').style.width = '30px';\r\n  }\r\n  \r\n  function HandleOnClickDashboard (){\r\n    history.push('/Dashboard');\r\n  }\r\n\r\n  function HandleOnManageProjectUsers (){\r\n    history.push('/ManageProjectUsers');\r\n  }\r\n  function HandleOnClickProjectTable() {\r\n    history.push('/ProjectTable');\r\n  }\r\n\r\n  function HandleOnClickTicketsTable() {\r\n    history.push('/TicketsTable');\r\n  }\r\n  \r\n\r\n  function HandleOnClickManageUserRoles() {\r\n    history.push('/ManageUserRoles');\r\n  }\r\n\r\n  function HandleOnClickAssignUser(){\r\n     history.push('/AssignUser');\r\n  }\r\n\r\n  function handleClick(){\r\n    history.push('./ManageUserRoles');\r\n  }\r\n\r\n  return (\r\n    <body>\r\n      <div id=\"mySidebar\" class=\"sidebar\">\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickDashboard}>\r\n          <img class=\"grid\" id=\"grid\" src={grid} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName\">Dashboard Home</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickManageUserRoles}>\r\n          <img class=\"grid\" id=\"grid1\" src={homeIcon} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName1\">Manage Role Assignment</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnManageProjectUsers}>\r\n          <img class=\"grid\" id=\"grid2\" src={peopleCirle} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName2\">Manage Project Users</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickProjectTable}>\r\n          <img class=\"grid\" id=\"grid3\" src={layers} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName3\">My Projects</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\" onClick={HandleOnClickTicketsTable}>\r\n          <img class=\"grid\" id=\"grid4\" src={layers} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName4\">My Tickets</span>\r\n        </a>\r\n        <a href=\"#\" className=\"section\">\r\n          <img class=\"grid\" id=\"grid5\" src={personAddOutline} alt=\"image al\" />\r\n          <span class=\"navName\" id=\"navName5\">User Profile</span>\r\n        </a>\r\n        <a className=\"section\" href=\"#section\" onClick={openNav}>\r\n          Open Sidebar\r\n        </a>\r\n        <a className=\"section\" href=\"#section\" onClick={closeNav}>\r\n          Close Sidebar\r\n          </a>\r\n        </div>\r\n      <div class=\"topnav\">\r\n        <a onClick={handleClick} href=\"#home\">Home</a>\r\n        <a href=\"#about\">Logout</a>\r\n      </div>\r\n      <div id=\"main\" class=\"main\">\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\nexport default SideAndNavbar;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserTable.js",["251"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { Collapse } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n\r\n  },\r\n  banner:{\r\n    backgroundColor: '#262B40',\r\n    height: '5%',\r\n    width:'93%',\r\n    padding: '2%',\r\n    marginLeft:'1%'\r\n    },\r\n    heading:{\r\n      color: 'white'\r\n    },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'username', label: 'Username', minWidth: 170 },\r\n  { id: 'email', label: 'Email', minWidth: 100 },\r\n  {\r\n    id: 'role',\r\n    label: 'Role',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n\r\n];\r\n\r\nfunction createData(username, email, role) {\r\n  return { username, email, role };\r\n}\r\n\r\n function UserTable() {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n\r\n  var rows = [];\r\n  if (loading) \r\n    return <p>Loading...</p>;\r\n  else {\r\n    var length = data.getUsers.length;\r\n    for(var i=0;i<length; i++)\r\n    {\r\n      rows[i] = createData(data.getUsers[i].username,data.getUsers[i].email, data.getUsers[i].role)\r\n    }\r\n  }\r\n\r\n //const rows = [createData('India', 'IN', 1324171354)  ];\r\n  \r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n      <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Your Projects</h3>\r\n          <p className={classes.heading}>All the Projects you have in the database</p>\r\n          </div>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead className={classes.header}>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\nconst FETCH_USERS_QUERY = gql `\r\n{\r\n  getUsers{\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\nexport default UserTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/ProjectTable.js",["252","253","254","255","256","257"],"import React, {useCallback} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '150%',\r\n    marginTop: '15px'\r\n  },\r\n  banner:{\r\n    backgroundColor: '#262B40',\r\n    height: '15%',\r\n    width:'93%',\r\n    padding: '2%',\r\n    marginLeft:'1%'\r\n    },\r\n    heading:{\r\n      color: 'white'\r\n    },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  main:{\r\n    display: 'inline-block',\r\n    textAlign:'left',\r\n    marginLeft:'20%'\r\n  },\r\n  btn1: {\r\n    marginTop: '20px'\r\n  }\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  { id: 'description', label: 'Description', minWidth: 100 },\r\n  {\r\n    id: 'details',\r\n    label: 'Details',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n];\r\n\r\nfunction createData(name, description, details) {\r\n  return { name, description, details };\r\n}\r\n\r\nfunction ProjectTable() {\r\n\r\n  var i;\r\n  var valueNumber = 0;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\r\n  var rows = [];\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n    var length = data.getProjects.length;\r\n    for (var i = 0; i < length; i++) {\r\n      rows[i] = createData(data.getProjects[i].name, data.getProjects[i].description, 'Edit Details')\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  function HandleOnClick(props, rowsArray) {\r\n   \r\n    history.push({\r\n      pathname: '/ProjectDetails2',\r\n      search: '?update=true',  // query string\r\n      state: {  // location state\r\n        index: props, \r\n        array: rowsArray\r\n      },\r\n    }); \r\n\r\n  }\r\n\r\n  function AssignUser() {\r\n    //history.push('/AssignUser');\r\n    history.push({\r\n      pathname: '/AssignUser',\r\n      search: '?update=true',  // query string\r\n      state: {  // location state\r\n        update: true, \r\n      },\r\n    }); \r\n  }\r\n\r\n  function CreateTicket() {\r\n    history.push('/CreateTicket');\r\n  }\r\n\r\n  function CreateProject() {\r\n    history.push('/CreateProject');\r\n  }\r\n\r\n  function RenderElement(value, value2, value3) {\r\n    if (value2.id === \"details\") {\r\n      return <a  onClick={() => HandleOnClick(value3, rows)} className=\"link\"> {value} </a>;\r\n    }\r\n    else {\r\n      return value;\r\n    }\r\n  }\r\n  return (\r\n    <body>\r\n      <div>\r\n        <SideAndNavbar></SideAndNavbar>\r\n     \r\n        <div id=\"main\" className=\"main\" className={classes.main}>\r\n          <div>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={CreateProject} className={classes.btn1}>Create Project</Button>\r\n         </div>\r\n          <Paper className={classes.root}>\r\n          <div className={classes.banner}>\r\n          <h3 className={classes.heading}>Your Projects</h3>\r\n          <p className={classes.heading}>All the Projects you have in the database</p>\r\n          </div>\r\n         \r\n            <TableContainer className={classes.container}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    valueNumber++;\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                              {RenderElement(value, column, valueNumber)}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>    \r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n{\r\n  getProjects{\r\n  name\r\n  description\r\n  id\r\n}\r\n}`;\r\n\r\n\r\n\r\nexport default ProjectTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnel.js",["258","259","260","261","262","263","264","265","266","267","268"],"import React, {useCallback, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport query from'./AssignedPersonnelQuery.js';\r\n\r\nconst useStyles = makeStyles({\r\n  banner:\r\n  {\r\n  backgroundColor: '#262B40',\r\n  height: '5%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'username', label: 'Username', minWidth: 170 },\r\n  { id: 'email', label: 'Email', minWidth: 100 },\r\n  //{ id: 'creationTime', label: 'Created', minWidth: 100 },\r\n  { id: 'role', label: 'Role', minWidth: 100 },\r\n  //{ id: 'access', label: 'Access', minWidth: 100 }\r\n];\r\n\r\nfunction createData(username, email, creationTime, role, access) {\r\n  return { username, email, creationTime, role, access};\r\n}\r\n\r\nfunction AssignedDeveloper(props) {\r\n\r\n  var indexVal = \"\"+props.index -1+\"\";\r\n  var index = props.index -1; \r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [ page, setPage ] = React.useState(0);\r\n\r\n  const [ markersArray, setMarkersArray] = useState([]);\r\n  const [ rowsPerPage, setRowsPerPage ] = React.useState(10);\r\n  const [ errors, setErrors ] = useState({});\r\n \r\n const {loading, data} = useQuery (FETCH_PROJECTS_QUERY,{\r\n  variables: { name: String(props.index)}\r\n});\r\n\r\n  var rows = [];\r\n  console.log(\"Error\", errors)\r\n  if (loading)\r\n    return <p>Loading...</p>;\r\n  else {\r\n   \r\n    console.log(\"Data\",data.getProjectsAndUsers);\r\n    console.log(\"Length\",data.getProjectsAndUsers.length);\r\n  \r\n    var length = data.getProjectsAndUsers.length;\r\n    //var length3 = data.getProjectsAndUsers[index].users.length;\r\n   for (var k = 0; k < length; k++)\r\n    {\r\n          console.log(\"in loop\",data.getProjectsAndUsers[k]);\r\n          var name = (data.getProjectsAndUsers[k].username);\r\n\r\n          var email = (data.getProjectsAndUsers[k].email);\r\n\r\n          //var creationTime = (data.getProjectsAndUsers[k].creationTime);\r\n\r\n          var role = (data.getProjectsAndUsers[k].role);\r\n\r\n\r\n          //var access = (data.getProjectsAndUsers[k].access);\r\n\r\n          JSON.stringify(name); \r\n          JSON.stringify(email); \r\n          //JSON.stringify(creationTime); \r\n          JSON.stringify(role); \r\n          //JSON.stringify(access); \r\n\r\n          rows.push({\r\n            username: name,\r\n            email: email,\r\n            //creationTime: creationTime,\r\n            role: role,\r\n            //access: access\r\n          });\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <body>\r\n      <div>\r\n        <div id=\"main\" class=\"main\">\r\n         \r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n            <div className={classes.banner}>\r\n          <h3 className={classes.heading}>AssignedPersonnel</h3>\r\n          <p className={classes.heading}>Users assigned to this Project</p>\r\n          </div>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\nconst FETCH_PROJECTS_QUERY = gql`\r\n  query  getProjectsAndUsers ($name: String!){\r\n    getProjectsAndUsers (name: $name) {\r\n      id \r\n      username\r\n      email\r\n      creationTime\r\n      role \r\n      access\r\n  }\r\n  }`;\r\n\r\n\r\nexport default AssignedDeveloper;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/AssignedPersonnelQuery.js",["269","270","271","272","273"],"import React, {useCallback, useState} from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { useHistory } from \"react-router-dom\";\n\nfunction AssignedPersonnelQuery(props) {\n  \n  \n  var index = props.index - 1;\n  const history = useHistory();\n  const [markersArray, setMarkersArray] = useState([]);\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\n  \n  var rows = [];\n  if (loading)\n    return <p>Loading...</p>;\n  else {\n    var length = data.getProjects.length;\n   var length3 = data.getProjects[index].users.length;\n   for (var k = 0; k < length3; k++)\n    {\n      var myName = (data.getProjects[index].users[k]);\n          var myName2 = '\"' + myName + '\"';  \n          JSON.stringify(myName2); \n          markersArray.push({\n            name: myName2\n          });\n    }\n    console.log(\"MarkersArray\", markersArray);\n  }\n}\n\nconst FETCH_PROJECTS_QUERY = gql`\n{\ngetProjects{\n  name\n  description\n  id\n  users\n  tickets\n}  \n}`;\n\n\nexport default AssignedPersonnelQuery;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketsTable2.js",["274","275","276","277","278","279"],"import React, {useCallback, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport SideAndNavbar from './SideAndNavbar';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../css/projectTable.css';\r\nimport {useMutation } from '@apollo/client';\r\n\r\nconst useStyles = makeStyles({\r\n  banner:\r\n  {\r\n  backgroundColor: '#262B40',\r\n  height: '5%',\r\n  width:'93%',\r\n  padding: '2%',\r\n  marginLeft:'1%'\r\n  },\r\n  heading:{\r\n    color: 'white'\r\n  },\r\n  root: {\r\n    width: '100%',\r\n    minHeight: '300px'\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 60 },\r\n  { id: 'description', label: 'Description', minWidth: 60 },\r\n  { id: 'developer', label: 'Developer', minWidth: 60 },\r\n  { id: 'status', label: 'Status', minWidth: 60 },\r\n  { id: 'created', label: 'Created', minWidth: 60 },\r\n];\r\n\r\nfunction createData(name, description, developer, status, created) {\r\n  return { name, description, developer, status, created };\r\n}\r\n\r\n\r\nfunction TicketsTable(props) {\r\n\r\n  const [errors, setErrors]= useState({});\r\n  const index = props.index;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10); \r\n\r\nconst {loading:loading1, data:data1} = useQuery (FETCH_TICKETS_QUERY,{\r\n  variables: { id: String(index)}\r\n});\r\n\r\nvar rows = [];\r\nif (loading1)\r\n    return <p>Loading...</p>;\r\n  else {\r\n\r\n    console.log(\"data1\",data1);\r\n    console.log(\"data1\", data1.getTicketsByProjectId.length);\r\n    if(data1.getTicketsByProjectId!=null)\r\n    {\r\n      if (data1.getTicketsByProjectId.length > 0)\r\n    {\r\n\r\n      if (data1.getTicketsByProjectId[0]!=null)\r\n      {\r\n        for (var i=0;i<data1.getTicketsByProjectId.length;i++)\r\n        {\r\n          console.log(\"Value: \", data1.getTicketsByProjectId[i]);\r\n          rows[i] = createData(data1.getTicketsByProjectId[i].title, data1.getTicketsByProjectId[i].description,\r\n            data1.getTicketsByProjectId[i].description,data1.getTicketsByProjectId[i].status,\r\n            data1.getTicketsByProjectId[i].createdAt);\r\n        }\r\n      }\r\n    }\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <body>\r\n      <div>\r\n        <div id=\"main\" class=\"main\">\r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n              <div className={classes.banner}>\r\n            <h3 className={classes.heading}>Tickets for the Project</h3>\r\n            </div>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}>\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst FETCH_TICKETS_QUERY =  gql `\r\nquery\r\n  getTicketsByProjectId($id: String!){\r\n    getTicketsByProjectId (id: $id) {\r\n      id\r\n      title\r\n      description\r\n      priority\r\n      status\r\n      type\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport default TicketsTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/UserList.js",["280"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\n\r\nfunction UserList() {\r\n    const classes = useStyles();\r\n    const { loading, data } = useQuery(FETCH_USERS_QUERY);\r\n    var rows= ['Select the user'];\r\n    if (loading) \r\n         return <p>Loading...</p>;\r\n    else {\r\n        var length = data.getUsers.length;\r\n        for(var i=0;i<length;i++)\r\n        {\r\n            rows.push(data.getUsers[i].username)\r\n        }    \r\n    }\r\n    return (\r\n        <div>\r\n         <select>\r\n         {rows.map(time => {\r\n           return (\r\n             <option value={time}> {time} </option>\r\n           )\r\n         })}\r\n    </select>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst FETCH_USERS_QUERY = gql`\r\n{\r\n  getUsers{\r\n  username\r\n  id\r\n  email\r\n  creationTime\r\n  role\r\n  access\r\n}\r\n}`;\r\n\r\nexport default UserList;","/Users/usmanzafar/Desktop/bugTracker/client/src/util/hooks.js",[],"/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Accounts.js",["281","282","283","284","285","286","287","288","289","290","291","292","293"],"import { React, useState, useContext } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { TextField } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport { Input } from 'semantic-ui-react'\nimport AccountsImg from '../icons/images.svg';\nimport '../css/accounts.css';\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    inputType:{\n        width: '100%'\n    },\n    root: {\n        flexGrow: 1,\n        marginTop: 300,\n        alignContent: \"center\"\n    },\n    fontType: {\n        fontFamily: font,\n        fontSize: 16\n    },\n    '@global': {\n        body: {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n        height: '100%'\n    },\n    submit: {\n        margin: theme.spacing(5, 0, 4),\n    },\n    container: {\n        width: '100%',\n        height: '100%',\n        alignItems: \"center\",\n        justify: \"center\",\n    },\n    logo: {\n        width: '10%'\n    }\n\n}));\n\nconst font = \"'Merriweather', serif\";\nfunction Accounts(props) {\n\n    const history = useHistory();\n\n    function imageClick() {\n        history.push(\"/ManageUserRoles\");\n    }\n\n    const styles = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\" className={useStyles.container} class=\"background\">\n            <CssBaseline />\n            <div className=\"form\">\n                    <Typography component=\"h1\" variant=\"h5\" className={styles.fontType} style={{ marginBottom: \"10px\" }}>\n                    </Typography>\n                    <form  class=\"formContainer\" >\n                        <div class=\"grid-item\">\n\n                        <div class=\"article\">\n                        <img title=\"Title Tag Goes Here\" alt=\"Image of Seal\" class=\"img1\" src={AccountsImg} \n                        \n                        onClick={() => imageClick()}/>\n                        <p class=\"paragraph\" onClick={() => imageClick()} >Admin</p>\n                        </div>\n\n                        </div>\n                        <div class=\"grid-item\">\n                        <div class=\"article\">\n                        <img alt=\"Image of Seal\" class=\"img2\"  src={AccountsImg}/>\n                        <p class=\"paragraph\">Project Manager</p>\n                        </div>\n                        </div>\n                        <div class=\"grid-item\">\n                        <div class=\"article\">\n                        <img alt=\"Image of Seal\"  class=\"img3\" src={AccountsImg}/>\n                        <p class=\"paragraph\">Developer</p>\n                        </div>\n                        </div>\n                        <div class=\"grid-item\">\n                        <div class=\"article\">\n                        <img alt=\"Image of Seal\"  class=\"img4\" src={AccountsImg}/>\n                        <p class=\"paragraph\">Submitter</p>\n                        </div>\n                        </div>\n                    </form>\n            </div>\n        </Container>\n    )\n}\n\nexport default Accounts;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TestUserRoles.js",["294","295","296","297","298","299","300"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport '../css/manageUserRoles.css';\nimport UserTable from '../components/TestUserTable';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport Button from '@material-ui/core/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\n\n\nfunction TestUserRoles(props) {\n\n  const [errors, setErrors]= useState({});\n  const [usersValue, setUserValue] = useState({});\n\n  const {onChange, onSubmit, values}= useForm(assignRole, {\n      name:'',\n      role: ''\n  });\n  \n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\n  \n  const [assign, {loading:assignLoading}] = useMutation (ASSIGN_ROLE,{\n      update(_,  {data}){\n     \n      },\n      onError(err) {\n          //.graphQLErrors[0].extensions.exception.errors\n         // setErrors(err);\n          console.log(\"Errors from create tickets\", err);\n      },\n      variables:values\n  });\n  \n  \n  var rows= ['Select the user'];\n  if (loading) \n       return <p>Loading...</p>;\n  else {\n      var length = data.getUsers.length;\n      for(var i=0;i<length;i++)\n      {\n          rows.push(data.getUsers[i].username)\n      }    \n  }\n\n  function assignRole () {\n    assign();\n}\n\n\n  return (\n    <body>\n    <SideAndNavbar/>\n   \n    <form onSubmit={onSubmit} class=\"inputForm\">\n    <p>Manage User Roles</p>\n      <div id=\"main\" class=\"container\">\n     \n        <div class=\"cell-1\">\n\n          <div class=\"custom-select1\">\n            <label for=\"cars\" class=\"label1\" className=\"part1\">Select 1 or more Users:</label>\n            <br />\n            <select id=\"name\" class=\"select1\" name=\"name\" onChange={onChange} value={values.name}>\n         {rows.map(time => {\n           return (\n             <option value={time}> {time} </option>\n           )\n         })}\n      </select>\n          </div>\n          \n          <div class=\"custom-select2\">\n            <label for=\"cars\" class=\"label2\" className=\"part2\">Select the Role to assign:</label>\n            <br />\n            <select id=\"role\" class=\"select2\" name=\"role\" onChange={onChange} value={values.role}>\n              <option value=\"0\">--Select Role/None--:</option>\n              <option value=\"Admin\">Admin</option>\n              <option value=\"Demo Admin\">Demo_Admin</option>\n              <option value=\"Demo Developer\">Demo_Developer</option>\n              <option value=\"Demo Project Manager\">Demo_Project Manager</option>\n            </select>\n          </div>\n\n          <Button class=\"assignButton\" className=\"button1\" variant=\"contained\" color=\"primary\" type=\"submit\">\n          Assign\n          </Button>\n         \n         </div>\n       \n        \n        <div class=\"cell-2\">\n          <div class=\"table\">\n            <UserTable class=\"userTable\" />\n          </div>\n        </div>\n\n      \n      </div>\n   \n    \n      </form>\n\n\n    </body>\n  );\n}\n\nconst ASSIGN_ROLE = gql`\n  mutation  assignRole ($name: String! $role: String!){\n    assignRole (name: $name role: $role) \n  }`;\n\n  const FETCH_USERS_QUERY = gql`\n{\n  getUsers {\n  username\n  id\n  email\n  creationTime\n  role\n  access\n}\n}`;\n\nexport default TestUserRoles;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TestUserTable.js",["301"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useQuery, gql } from '@apollo/client';\nimport { Collapse } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n\n  },\n\n  container: {\n    maxHeight: 440,\n  },\n  header: {\n        background:'red'\n  }\n\n});\n\nconst columns = [\n  { id: 'username', label: 'Username', minWidth: 170 },\n  { id: 'email', label: 'Email', minWidth: 100 },\n  {\n    id: 'role',\n    label: 'Role',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n\n];\n\nfunction createData(username, email, role) {\n  return { username, email, role };\n}\n\n function TestUserTable() {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const { loading, data } = useQuery(FETCH_USERS_QUERY);\n\n  var rows = [];\n  if (loading) \n    return <p>Loading...</p>;\n  else {\n    var length = data.getUsers.length;\n    for(var i=0;i<length; i++)\n    {\n      rows[i] = createData(data.getUsers[i].username,data.getUsers[i].email, data.getUsers[i].role)\n    }\n  }\n\n //const rows = [createData('India', 'IN', 1324171354)  ];\n  \n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead className={classes.header}>\n            <TableRow className={classes.header}>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\n\nconst FETCH_USERS_QUERY = gql `\n{\n  getUsers{\n  username\n  id\n  email\n  creationTime\n  role\n  access\n}\n}`;\n\nexport default TestUserTable;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectDetails2.js",["302","303","304","305","306","307"],"import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport '../css/main.css';\nimport gql from 'graphql-tag';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport ProjectTable2 from '../components/ProjectTable2';\nimport AssignedPersonnel from '../components/AssignedPersonnel';\nimport TicketsTable2 from '../components/TicketsTable2';\nimport '../css/projectDetails.css';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n      width: '100%',\n  \n    },\n    banner:{\n      backgroundColor: '#262B40',\n      height: '5%',\n      width:'93%',\n      padding: '2%',\n      marginLeft:'1%'\n      },\n      heading:{\n        color: 'white'\n      },\n    container: {\n      maxHeight: 440,\n    },\n    firstDiv: {\n      marginLeft: '60px'\n    },\n    bottomDiv: {\n      height:'10%',\n      marginLeft:'20%',\n      marginTop: '20px'\n    }, btn1: {\n      marginTop: '20px'\n    },\n    btn2: {\n      marginTop: '20px'\n    }\n  });\n\n\nfunction ProjectDetails2(props) {\n    const classes = useStyles();\n  const history = useHistory();\n//console.log(\"Props\", props.history.location.state.indexValue);\n//console.log(\"Props 2:\", props.history.location.state.index);\nvar value =  props.history.location.state.index;\n//console.log(\"Props\", props.history.location.state.array[value - 1]);\n\nfunction AssignUser() {\n  //history.push('/AssignUser');\n  history.push({\n    pathname: '/AssignUser',\n    search: '?update=true',  // query string\n    state: {  // location state\n      index: value, \n    },\n  }); \n\n  //console.log(\"Value from index\", value);\n}\n\nfunction CreateTicket() {\n  history.push('/CreateTicket');\n}\n\n return (\n<body>\n    <SideAndNavbar/>\n      \n    <div className={classes.bottomDiv}>\n    <Button variant=\"contained\" color=\"primary\" onClick={AssignUser} className={classes.btn1}>Assign User</Button>\n      <Button variant=\"contained\" color=\"primary\" onClick={CreateTicket} className={classes.btn2}>Create Ticket</Button>\n    </div>\n     \n    <div className=\"firstDiv\" className={classes.firstDiv}>\n    \n    <ProjectTable2 index={value}/> \n    </div>\n    <div className=\"main\">\n    <div className=\"assignedPersonnel\">\n    <AssignedPersonnel index={value}/>\n    </div>\n    <div className=\"secondMain\" class=\"secondMain\">\n    <TicketsTable2 className=\"ticketsTable\" index={value}/>\n    </div>\n    </div>\n    \n    \n   </body>\n )\n}\n\n\nexport default ProjectDetails2;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/Dashboard.js",["308"],"import React, { useState } from 'react';\nimport '../css/dashboard.css';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport TicketPriorityBarChart from '../components/TicketPriorityBarChart';\nimport TicketTypePieChart from '../components/TicketTypePieChart';\nimport TicketStatusBarChart from '../components/TicketStatusBarChart';\nimport DeveloperTicketsPieChart from '../components/DeveloperTicketsPieChart';\n\n\nfunction Dashboard(props) {\n\n return (\n<body>\n        <SideAndNavbar/>\n        <div class=\"container\"> \n        <div class=\"grid-item1\"> <TicketPriorityBarChart/>\n        <div class=\"low-div-grid-item1\">\n        <p>Tickets By Priority</p>\n        </div>\n        </div>\n        <div class=\"grid-item2\"><TicketTypePieChart/>\n        <div class=\"low-div-grid-item2\">\n        <p>Tickets By Type</p>\n        </div>\n        </div>\n        <div class=\"grid-item3\"><TicketStatusBarChart/>\n        <div class=\"low-div-grid-item3\">\n        <p>Tickets By Progress</p>\n        </div>\n        </div>\n        <div class=\"grid-item4\"><DeveloperTicketsPieChart/>\n        <div class=\"low-div-grid-item4\">\n        <p>Tickets Assigned By Developer</p>\n        </div>\n        </div>\n        </div>\n   </body>\n )\n}\n\n\n\n\n\nexport default Dashboard;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketStatusBarChart.js",["309","310","311"],"\nimport React, {useCallback, useState} from 'react';\n\nimport Chart from \"react-google-charts\";\nimport { useQuery, gql } from '@apollo/client';\n\n\n\nfunction TicketStatusBarChart(props) {\n    var counterValue = 0;\n    var completed = 0;\n    var open = 0;\n    var inProgress = 0; \n    var rows = [];\n    const { loading, data } = useQuery(GET_TICKETS);\n\n    \n    if (loading)\n      return <p>Loading...</p>;\n\n    else {\n\n        if (counterValue ===0)\n        {\n        const length = data.getTickets.length;\n\n        for (var i =0;i<length;i++)\n        {\n\n              var value = data.getTickets[i].status;\n\n\n        if (value === \"completed\")\n        {\n            completed = completed +1;\n        }\n        else if (value === \"open\")\n        {\n            open = open + 1;\n        }\n        else if (value === \"in progress\")\n        {\n            inProgress = inProgress + 1;\n        }\n        }\n\n        counterValue = counterValue + 1;\n        }\n        \n    }\n\n  return (\n    <body>\n      <div style={{ display: 'flex', maxWidth: 900 }}>\n      <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"ColumnChart\"\n  loader={<div>Loading Chart</div>}\n  data={[\n    [\n      'Element',\n      'Density',\n      { role: 'style' },\n      {\n        sourceColumn: 0,\n        role: 'annotation',\n        type: 'string',\n        calc: 'stringify',\n      },\n    ],\n    ['Completed', completed, '#b87333', null],\n    ['Open',  open, 'silver', null],\n    ['In Progress', inProgress, 'gold', null],\n  ]}\n  options={{\n    title: 'Number of Tickets by Status',\n    width: 500,\n    height: 300,\n    bar: { groupWidth: '95%' },\n    legend: { position: 'none' },\n    backgroundColor: \"#EEEEEE\"\n  }}\n  // For tests\n  rootProps={{ 'data-testid': '6' }}\n/>\n</div>\n    </body>\n  );\n}\n\n\n\nconst GET_TICKETS = gql`\n{\ngetTickets{\n    title\n    description \n    assignedProject\n    assignedDeveloper\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n}  \n}`;\n\nexport default TicketStatusBarChart;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/DeveloperTicketsPieChart.js",["312","313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"\nimport React, {useCallback, useState} from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport Chart from \"react-google-charts\";\n\nvar counterValue = 0;\n\nfunction DeveloperTicketsPieChart(props) {\n\n    var featureRequests = 0;\n    var otherComments = 0;\n    var BugsErrors = 0; \n    var trainingDocuments = 0;\n    var users = [];\n    var tickets = [];\n    var developersArray = [];\n    var developerNameArray = [];\n\n    console.log(\"Passing over things !!!!!\", counterValue);\n    const { loading, data } = useQuery(GET_TICKETS);\n    const { loading:loading1, data:data1 } = useQuery(GET_USERS);\n\n\nif (loading)\n      return <p>Loading...</p>;\n\n    else {\n    \n    var length1 = data.getTickets.length;\n    \n    for (var i=0;i< length1; i++)\n    {\n      tickets.push(data.getTickets[i]);\n    }\n    \n    }\n\nif (loading1)\n      return <p>Loading...</p>;\n\n    else {\n\n    var length2 = data1.getUsers.length;\n    //console.log(\"Data :\",data1.getUsers);\n    \n    \n    for (var i=0;i<length2;i++ )\n    {\n      users.push(data1.getUsers[i]);\n    }\n    \n   \n\n    //console.log(\"Tickets\", tickets);\n    //console.log(\"Users\", users);\n\n    for (var i=0;i<tickets.length; i++)\n    {\n      for (var j=0;j<tickets[i].assignedDeveloper.length;j++)\n      {\n        developersArray.push(tickets[i].assignedDeveloper[j]);\n      }\n    }\n    \n    //console.log(\"Developer array\", developersArray);\n\n    for (var i=0;i<users.length;i++)\n    {\n      var id = users[i].id;\n      for (var j=0;j<developersArray.length; j++)\n      {\n        if (id=== developersArray[j])\n      {\n        developerNameArray.push(users[i].username)\n      }\n      }\n    }\n\n    //console.log(\"Developers Name\", developerNameArray);\n\n    var finalArray = [];\n    \n    function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    }\n\n    var unique = developerNameArray.filter(onlyUnique);\n    \n    //console.log(\"Unique array: \",unique);\n    //console.log(\"Arrays:\",);\n\n    for(var i=0;i<unique.length;i++)\n    {\n      finalArray.push({name:unique[i],count:0});\n    }\n\n    //console.log(\"Final Array\", finalArray);\n\n    var countArray = [];\n    for (var i=0;i<unique.length;i++)\n    {\n      for (var j=0;j<developerNameArray.length;j++)\n      {\n          if(developerNameArray[i]===developerNameArray[j])\n          {\n              finalArray[i].count = finalArray[i].count + 1;\n          }\n      }\n    }\n\n  //console.log(\"Final Array\", finalArray);\n\n  var inputArray= [];\n\n inputArray.push(['Language', 'Speakers (in millions)']);\n  for (var i=0;i<finalArray.length;i++)\n  {\n    inputArray.push([''+finalArray[i].name+'', finalArray[i].count]);\n  }\n  console.log(\"InputArray\", inputArray);\n  \n   }\n\n  //console.log(\"data10\", data10);\n  return (\n    <body>\n <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"PieChart\"\n  loader={<div>Loading Chart</div>}\n  data={inputArray}\n  options={{\n    title: 'Number of Tickets Assigned to each Developer',\n    backgroundColor: \"#EEEEEE\"\n  }}\n  rootProps={{ 'data-testid': '2' }}\n/>\n    </body>\n  );\n}\n\n\nconst GET_USERS = gql`\n{\ngetUsers{\n    id\n    username\n    email\n    creationTime\n    role\n    access\n}  \n}`;\nconst GET_TICKETS = gql`\n{\ngetTickets{\n    title\n    description \n    assignedProject\n    assignedDeveloper\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n}  \n}`;\n\nexport default DeveloperTicketsPieChart;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketTypePieChart.js",["327","328"],"\nimport React, {useCallback, useState} from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport Chart from \"react-google-charts\";\n\n\n\nfunction TicketTypePieChart(props) {\nvar counterValue = 0;\n    var featureRequests = 0;\n    var otherComments = 0;\n    var BugsErrors = 0; \n    var trainingDocuments = 0;\n    console.log(\"Passing over things !!!!!\", counterValue);\n    const { loading, data } = useQuery(GET_TICKETS);\n    var inputArray= [];\n\n\n\n if (loading)\n      return <p>Loading...</p>;\n\n    else {\n    \n    console.log(\"data\",data);\n        \n        if (counterValue ===0)\n        {\n        const length = data.getTickets.length;\n    \n     \n        for (var i =0;i<length;i++)\n        {\n            \n          var value = data.getTickets[i].type;\n          console.log(\"Value\", value);\n        if (value === \"Feature Requests\")\n        {\n            featureRequests = featureRequests +1;\n        }\n        else if (value === \"Other Comments\")\n        {\n            otherComments = otherComments + 1;\n        }\n        else if (value === \"Bugs/Error\")\n        {\n            BugsErrors = BugsErrors + 1;\n        }\n        else if (value === \"Training/Document Requests\")\n        {\n            trainingDocuments = trainingDocuments + 1;\n        }\n      \n       }\n      \n        counterValue = counterValue + 1;\n        }\n    \n\n    inputArray.push(['Task', 'Hours per Day']);\n    inputArray.push(['Feature Requests', featureRequests]);\n    inputArray.push(['Other Comments', otherComments]);\n    inputArray.push(['Bugs/Error', BugsErrors]);\n    inputArray.push(['Training/Document Requests', trainingDocuments]);\n\n   \n    }\n  \n  return (\n    <body>\n      <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"PieChart\"\n  loader={<div>Loading Chart</div>}\n  data={inputArray}\n  options={{\n    title: 'Tickets By Type',\n    backgroundColor: \"#EEEEEE\"\n    // Just add this option\n  }}\n  rootProps={{ 'data-testid': '2' }}\n/>\n    </body>\n  );\n}\n\n\nconst GET_TICKETS = gql`\n{\ngetTickets{\n    title\n    description \n    assignedProject\n    assignedDeveloper\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n}  \n}`;\n\nexport default TicketTypePieChart;","/Users/usmanzafar/Desktop/bugTracker/client/src/components/TicketPriorityBarChart.js",["329","330","331"],"\nimport React, {useCallback, useState} from 'react';\n\nimport Chart from \"react-google-charts\";\nimport { useQuery, gql } from '@apollo/client';\n\n\nfunction TicketPriorityBarChart(props) {\nvar counterValue = 0;\n    var high = 0;\n    var medium = 0;\n    var low = 0; \n    var rows = [];\n    const { loading, data } = useQuery(GET_TICKETS);\n\n    \n    if (loading)\n      return <p>Loading...</p>;\n\n    else {\n\n        if (counterValue ===0)\n        {\n        const length = data.getTickets.length;\n\n        for (var i =0;i<length;i++)\n        {\n\n              var value = data.getTickets[i].priority;\n\n\n        if (value === \"High\")\n        {\n            high = high +1;\n        }\n        else if (value === \"Low\")\n        {\n            low = low + 1;\n        }\n        else if (value === \"Medium\")\n        {\n            medium = medium + 1;\n        }\n        }\n\n        counterValue = counterValue + 1;\n        }\n        \n    }\n\n  return (\n    <body>\n      <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"ColumnChart\"\n  loader={<div>Loading Chart</div>}\n  data={[\n    [\n      'Element',\n      'Density',\n      { role: 'style' },\n      {\n        sourceColumn: 0,\n        role: 'annotation',\n        type: 'string',\n        calc: 'stringify',\n      },\n    ],\n    ['High', high, '#b87333', null],\n    ['Medium',  medium, 'silver', null],\n    ['Low', low, 'gold', null],\n  ]}\n  options={{\n    title: 'Number of Tickets by Priority',\n    width: 500,\n    height: 300,\n    bar: { groupWidth: '95%' },\n    legend: { position: 'none' },\n    backgroundColor: \"#EEEEEE\"\n  }}\n  // For tests\n  rootProps={{ 'data-testid': '6' }}\n/>\n\n    </body>\n  );\n}\n\nconst GET_TICKETS = gql`\n{\ngetTickets{\n    title\n    description \n    assignedProject\n    assignedDeveloper\n    priority\n    status\n    type\n    createdAt\n    updatedAt\n}  \n}`;\n\nexport default TicketPriorityBarChart;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ManageProjectUsers.js",["332","333","334","335","336","337","338","339"],"import React, {useCallback} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useQuery, gql } from '@apollo/client';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport { useHistory } from \"react-router-dom\";\nimport '../css/projectTable.css';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '150%',\n    marginTop: '15px'\n  },\n  banner:{\n    backgroundColor: '#262B40',\n    height: '15%',\n    width:'93%',\n    padding: '2%',\n    marginLeft:'1%'\n    },\n    heading:{\n      color: 'white'\n    },\n  container: {\n    maxHeight: 440,\n  },\n  main:{\n    display: 'inline-block',\n    textAlign:'left',\n    marginLeft:'20%'\n  },\n  btn1: {\n    marginTop: '20px'\n  }\n});\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'description', label: 'Description', minWidth: 100 },\n  {\n    id: 'details',\n    label: 'Details',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n];\n\nfunction createData(name, description, details) {\n  return { name, description, details };\n}\n\nfunction ManageProjectUsers() {\n\n  var i;\n  var valueNumber = 0;\n  const history = useHistory();\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const { loading, data } = useQuery(FETCH_PROJECTS_QUERY);\n  var rows = [];\n  if (loading)\n    return <p>Loading...</p>;\n  else {\n    var length = data.getProjects.length;\n    for (var i = 0; i < length; i++) {\n      rows[i] = createData(data.getProjects[i].name, data.getProjects[i].description, 'Manage Users')\n    }\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  function HandleOnClick(props, rowsArray) {\n   \n    history.push({\n      pathname: '/ProjectUserAssign',\n      search: '?update=true',  // query string\n      state: {  // location state\n        index: props, \n        array: rowsArray\n      },\n    }); \n\n  }\n\n  function AssignUser() {\n    //history.push('/AssignUser');\n    history.push({\n      pathname: '/AssignUser',\n      search: '?update=true',  // query string\n      state: {  // location state\n        update: true, \n      },\n    }); \n  }\n\n  function CreateTicket() {\n    history.push('/CreateTicket');\n  }\n\n  function RenderElement(value, value2, value3) {\n    var one = \"CreateProject\";\n    if (value2.id === \"details\") {\n      return <a  onClick={() => HandleOnClick(value3, rows)} className=\"link\"> {value} </a>;\n    }\n    else {\n      return value;\n    }\n  }\n  return (\n    <body>\n      <div>\n        <SideAndNavbar></SideAndNavbar>\n     \n        <div id=\"main\" className=\"main\" className={classes.main}>\n          <Paper className={classes.root}>\n          <div className={classes.banner}>\n          <h3 className={classes.heading}>Your Projects</h3>\n          <p className={classes.heading}>Manage the users for your Projects</p>\n          </div>\n         \n            <TableContainer className={classes.container}>\n              <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                  <TableRow>\n                    {columns.map((column) => (\n                      <TableCell\n                        key={column.id}\n                        align={column.align}\n                        style={{ minWidth: column.minWidth }}\n                      >\n                        {column.label}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                    valueNumber++;\n                    return (\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell key={column.id} align={column.align}>\n                              {RenderElement(value, column, valueNumber)}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[10, 25, 100]}\n              component=\"div\"\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </Paper>    \n        </div>\n      </div>\n    </body>\n  );\n}\n\n\nconst FETCH_PROJECTS_QUERY = gql`\n{\n  getProjects{\n  name\n  description\n  id\n}\n}`;\n\n\n\nexport default ManageProjectUsers;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/ProjectUserAssign.js",["340","341","342","343","344","345","346","347","348"],"import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport gql from 'graphql-tag';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport ProjectTable2 from '../components/ProjectTable2';\nimport AssignedPersonnel from '../components/AssignedPersonnel';\nimport TicketsTable2 from '../components/TicketsTable2';\nimport '../css/projectUserAssign.css';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AssignUser2 from './AssignUser2';\n\nconst useStyles = makeStyles({\n    root: {\n      width: '100%',\n  \n    },\n    banner:{\n      backgroundColor: '#262B40',\n      height: '5%',\n      width:'93%',\n      padding: '2%',\n      marginLeft:'1%'\n      },\n      heading:{\n        color: 'white'\n      },\n    container: {\n      maxHeight: 440,\n    },\n    firstDiv: {\n      marginLeft: '60px'\n    },\n    bottomDiv: {\n      height:'10%',\n      marginLeft:'20%',\n      marginTop: '20px'\n    }, btn1: {\n      marginTop: '20px'\n    },\n    btn2: {\n      marginTop: '20px'\n    }\n  });\n\n\nfunction ProjectUserAssign(props) {\n    const classes = useStyles();\n    const history = useHistory();\n\n    console.log(props);\n    var value =  props.history.location.state.index;\n\n/*\nfunction AssignUser() {\n  history.push({\n    pathname: '/AssignUser',\n    search: '?update=true',  // query string\n    state: {  // location state\n      index: value, \n    },\n  }); \n\n  console.log(\"Value from index\", value);\n  }\n  */\n\n\n return (\n<body>\n    <SideAndNavbar/>\n      \n    <div className={classes.bottomDiv}>\n    </div>\n     \n    <div className=\"main\">\n    <div className=\"assignedPersonnel\">\n    <AssignedPersonnel index={value}/>\n    <AssignUser2 index={value}/>\n    </div>\n\n    <div>\n   \n    </div>\n    \n    </div>\n\n  \n    \n    \n   </body>\n )\n}\n\n\nexport default ProjectUserAssign;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/AssignUser2.js",["349","350","351","352","353","354","355","356","357"],"import React, { useState } from 'react';\nimport '../css/createProject.css';\nimport '../css/main.css';\nimport SideAndNavbar from '../components/SideAndNavbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery, gql } from '@apollo/client';\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Message, Form } from \"semantic-ui-react\";\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});\n\nfunction AssignUser2(props) {\n    //console.log(\"props\", props);\n\n    const history = useHistory();\n    const classes = useStyles();\n    const [formError,setFormError] = useState(false);\n    const [userId, setUserId] = useState(\"\");\n    const [projectId, setProjectId] = useState(\"\");\n    const index = props.index - 1;\n    const { loading, data } = useQuery(FETCH_USERS_QUERY);\n    const projectsQuery = useQuery(FETCH_PROJECTS_QUERY);\n\n    const [ errors, setErrors ] = useState({});\n\n    const [assignUser,{loading1} ] = useMutation(ASSIGN_USER, {\n      update(_,{data}){\n\n        console.log(\"Mutation done\")\n        success();\n      }, \n      onError(err){\n          setErrors(err.graphQLErrors[0].extensions.exception.errors)\n      }, variables: { userId, projectId }\n     \n  });\n\n   console.log(\"userId\", userId);\n   console.log(\"projectId\", projectId);\n    \n  \n  var rows= ['Select the user'];\n  if (loading) \n       return <p>Loading...</p>;\n  else {\n      var length = data.getUsers.length;\n      for(var i=0;i<length;i++)\n      {\n          rows.push(data.getUsers[i].username )\n      }    \n  }\n\n  function AssignUser()\n  {\n      console.log(\"Assign User !!\");\n    assignUser();\n  }\n\n  function success() {\n    alert(\"User assignned to the project\");\n  }\n\n  function handleOnClick(event) {\n\n    var x = document.getElementById(\"selectValue\");\n    const valueMatch = x.value;\n    var indexValue;\n    const length = data.getUsers.length;\n    for(var i=0;i<length;i++)\n    {\n        if (valueMatch === data.getUsers[i].username)\n        {\n            indexValue = i;\n        }\n    } \n\n    setUserId(data.getUsers[indexValue].id);\n    setProjectId(projectsQuery.data.getProjects[index].id);\n\n    AssignUser();\n  }  \n\n      \n return (\n<body>\n        <div>\n        <label for=\"name\">Assign Users to Projects</label>\n         <select id=\"selectValue\"  onChange={handleOnClick} >\n         {rows.map(time => {\n           return (\n             <option value={time}>{time}</option>\n           )\n         })}\n    </select>\n        </div>\n   </body>\n )\n}\n\nconst FETCH_USERS_QUERY = gql`\n{\n  getUsers{\n  username\n  id\n  email\n  creationTime\n  role\n  access\n}\n}`;\n\n\nconst FETCH_PROJECTS_QUERY = gql`\n{\n  getProjects{\n  name\n  description\n  id\n}\n}`;\n\nconst ASSIGN_USER =  gql `\nmutation assignUser($projectId: String! $userId: String!) {\n  assignUser(projectId:$projectId userId: $userId) {\n        name description id\n    }     \n}`;\nexport default AssignUser2;","/Users/usmanzafar/Desktop/bugTracker/client/src/pages/TicketDetails.js",["358","359","360","361","362","363","364","365","366","367","368","369","370"],"/Users/usmanzafar/Desktop/bugTracker/client/src/pages/NewLogin.js",[],{"ruleId":"371","replacedBy":"372"},{"ruleId":"373","replacedBy":"374"},{"ruleId":"375","severity":1,"message":"376","line":7,"column":10,"nodeType":"377","messageId":"378","endLine":7,"endColumn":20},{"ruleId":"375","severity":1,"message":"379","line":11,"column":10,"nodeType":"377","messageId":"378","endLine":11,"endColumn":14},{"ruleId":"375","severity":1,"message":"380","line":12,"column":27,"nodeType":"377","messageId":"378","endLine":12,"endColumn":33},{"ruleId":"375","severity":1,"message":"381","line":71,"column":20,"nodeType":"377","messageId":"378","endLine":71,"endColumn":27},{"ruleId":"382","severity":1,"message":"383","line":162,"column":21,"nodeType":"384","endLine":162,"endColumn":74},{"ruleId":"382","severity":1,"message":"383","line":164,"column":21,"nodeType":"384","endLine":164,"endColumn":78},{"ruleId":"375","severity":1,"message":"385","line":3,"column":8,"nodeType":"377","messageId":"378","endLine":3,"endColumn":21},{"ruleId":"375","severity":1,"message":"381","line":17,"column":21,"nodeType":"377","messageId":"378","endLine":17,"endColumn":28},{"ruleId":"375","severity":1,"message":"386","line":1,"column":27,"nodeType":"377","messageId":"378","endLine":1,"endColumn":37},{"ruleId":"375","severity":1,"message":"387","line":12,"column":10,"nodeType":"377","messageId":"378","endLine":12,"endColumn":15},{"ruleId":"375","severity":1,"message":"381","line":71,"column":23,"nodeType":"377","messageId":"378","endLine":71,"endColumn":30},{"ruleId":"375","severity":1,"message":"388","line":9,"column":10,"nodeType":"377","messageId":"378","endLine":9,"endColumn":17},{"ruleId":"375","severity":1,"message":"389","line":9,"column":19,"nodeType":"377","messageId":"378","endLine":9,"endColumn":23},{"ruleId":"375","severity":1,"message":"390","line":22,"column":11,"nodeType":"377","messageId":"378","endLine":22,"endColumn":18},{"ruleId":"375","severity":1,"message":"391","line":23,"column":11,"nodeType":"377","messageId":"378","endLine":23,"endColumn":18},{"ruleId":"375","severity":1,"message":"392","line":24,"column":12,"nodeType":"377","messageId":"378","endLine":24,"endColumn":21},{"ruleId":"375","severity":1,"message":"393","line":24,"column":22,"nodeType":"377","messageId":"378","endLine":24,"endColumn":34},{"ruleId":"375","severity":1,"message":"394","line":31,"column":13,"nodeType":"377","messageId":"378","endLine":31,"endColumn":19},{"ruleId":"375","severity":1,"message":"395","line":33,"column":24,"nodeType":"377","messageId":"378","endLine":33,"endColumn":32},{"ruleId":"375","severity":1,"message":"396","line":1,"column":17,"nodeType":"377","messageId":"378","endLine":1,"endColumn":25},{"ruleId":"375","severity":1,"message":"397","line":7,"column":8,"nodeType":"377","messageId":"378","endLine":7,"endColumn":11},{"ruleId":"375","severity":1,"message":"398","line":9,"column":10,"nodeType":"377","messageId":"378","endLine":9,"endColumn":21},{"ruleId":"375","severity":1,"message":"399","line":10,"column":10,"nodeType":"377","messageId":"378","endLine":10,"endColumn":17},{"ruleId":"375","severity":1,"message":"381","line":6,"column":13,"nodeType":"377","messageId":"378","endLine":6,"endColumn":20},{"ruleId":"375","severity":1,"message":"400","line":6,"column":39,"nodeType":"377","messageId":"378","endLine":6,"endColumn":44},{"ruleId":"375","severity":1,"message":"401","line":2,"column":10,"nodeType":"377","messageId":"378","endLine":2,"endColumn":20},{"ruleId":"375","severity":1,"message":"402","line":3,"column":8,"nodeType":"377","messageId":"378","endLine":3,"endColumn":13},{"ruleId":"375","severity":1,"message":"394","line":16,"column":10,"nodeType":"377","messageId":"378","endLine":16,"endColumn":16},{"ruleId":"375","severity":1,"message":"403","line":16,"column":18,"nodeType":"377","messageId":"378","endLine":16,"endColumn":27},{"ruleId":"375","severity":1,"message":"404","line":17,"column":10,"nodeType":"377","messageId":"378","endLine":17,"endColumn":20},{"ruleId":"375","severity":1,"message":"405","line":17,"column":22,"nodeType":"377","messageId":"378","endLine":17,"endColumn":34},{"ruleId":"375","severity":1,"message":"406","line":26,"column":27,"nodeType":"377","messageId":"378","endLine":26,"endColumn":40},{"ruleId":"375","severity":1,"message":"407","line":1,"column":16,"nodeType":"377","messageId":"378","endLine":1,"endColumn":27},{"ruleId":"375","severity":1,"message":"385","line":12,"column":8,"nodeType":"377","messageId":"378","endLine":12,"endColumn":21},{"ruleId":"375","severity":1,"message":"390","line":47,"column":9,"nodeType":"377","messageId":"378","endLine":47,"endColumn":16},{"ruleId":"375","severity":1,"message":"403","line":13,"column":20,"nodeType":"377","messageId":"378","endLine":13,"endColumn":29},{"ruleId":"375","severity":1,"message":"381","line":25,"column":21,"nodeType":"377","messageId":"378","endLine":25,"endColumn":28},{"ruleId":"375","severity":1,"message":"408","line":37,"column":20,"nodeType":"377","messageId":"378","endLine":37,"endColumn":32},{"ruleId":"375","severity":1,"message":"409","line":38,"column":20,"nodeType":"377","messageId":"378","endLine":38,"endColumn":35},{"ruleId":"410","severity":1,"message":"411","line":56,"column":21,"nodeType":"377","messageId":"412","endLine":56,"endColumn":22},{"ruleId":"410","severity":1,"message":"411","line":72,"column":18,"nodeType":"377","messageId":"412","endLine":72,"endColumn":19},{"ruleId":"410","severity":1,"message":"413","line":77,"column":13,"nodeType":"377","messageId":"412","endLine":77,"endColumn":19},{"ruleId":"410","severity":1,"message":"411","line":84,"column":25,"nodeType":"377","messageId":"412","endLine":84,"endColumn":26},{"ruleId":"410","severity":1,"message":"414","line":85,"column":21,"nodeType":"377","messageId":"412","endLine":85,"endColumn":24},{"ruleId":"410","severity":1,"message":"415","line":86,"column":21,"nodeType":"377","messageId":"412","endLine":86,"endColumn":23},{"ruleId":"416","severity":1,"message":"417","line":129,"column":13,"nodeType":"418","endLine":129,"endColumn":40},{"ruleId":"416","severity":1,"message":"417","line":129,"column":41,"nodeType":"418","endLine":129,"endColumn":70},{"ruleId":"416","severity":1,"message":"417","line":144,"column":13,"nodeType":"418","endLine":144,"endColumn":22},{"ruleId":"416","severity":1,"message":"417","line":145,"column":13,"nodeType":"418","endLine":145,"endColumn":24},{"ruleId":"416","severity":1,"message":"417","line":154,"column":25,"nodeType":"418","endLine":154,"endColumn":38},{"ruleId":"375","severity":1,"message":"407","line":1,"column":16,"nodeType":"377","messageId":"378","endLine":1,"endColumn":27},{"ruleId":"382","severity":1,"message":"419","line":104,"column":14,"nodeType":"384","endLine":104,"endColumn":79},{"ruleId":"375","severity":1,"message":"401","line":1,"column":10,"nodeType":"377","messageId":"378","endLine":1,"endColumn":20},{"ruleId":"375","severity":1,"message":"420","line":3,"column":8,"nodeType":"377","messageId":"378","endLine":3,"endColumn":17},{"ruleId":"375","severity":1,"message":"421","line":7,"column":8,"nodeType":"377","messageId":"378","endLine":7,"endColumn":12},{"ruleId":"375","severity":1,"message":"422","line":11,"column":8,"nodeType":"377","messageId":"378","endLine":11,"endColumn":27},{"ruleId":"375","severity":1,"message":"423","line":13,"column":8,"nodeType":"377","messageId":"378","endLine":13,"endColumn":26},{"ruleId":"375","severity":1,"message":"424","line":15,"column":8,"nodeType":"377","messageId":"378","endLine":15,"endColumn":16},{"ruleId":"375","severity":1,"message":"425","line":79,"column":12,"nodeType":"377","messageId":"378","endLine":79,"endColumn":35},{"ruleId":"382","severity":1,"message":"383","line":90,"column":9,"nodeType":"384","endLine":90,"endColumn":74},{"ruleId":"426","severity":1,"message":"427","line":91,"column":11,"nodeType":"384","endLine":91,"endColumn":67},{"ruleId":"382","severity":1,"message":"383","line":94,"column":9,"nodeType":"384","endLine":94,"endColumn":80},{"ruleId":"426","severity":1,"message":"427","line":95,"column":11,"nodeType":"384","endLine":95,"endColumn":72},{"ruleId":"382","severity":1,"message":"383","line":98,"column":9,"nodeType":"384","endLine":98,"endColumn":78},{"ruleId":"426","severity":1,"message":"427","line":99,"column":11,"nodeType":"384","endLine":99,"endColumn":75},{"ruleId":"382","severity":1,"message":"383","line":102,"column":9,"nodeType":"384","endLine":102,"endColumn":77},{"ruleId":"426","severity":1,"message":"427","line":103,"column":11,"nodeType":"384","endLine":103,"endColumn":70},{"ruleId":"382","severity":1,"message":"383","line":106,"column":9,"nodeType":"384","endLine":106,"endColumn":77},{"ruleId":"426","severity":1,"message":"427","line":107,"column":11,"nodeType":"384","endLine":107,"endColumn":70},{"ruleId":"382","severity":1,"message":"383","line":110,"column":9,"nodeType":"384","endLine":110,"endColumn":41},{"ruleId":"426","severity":1,"message":"427","line":111,"column":11,"nodeType":"384","endLine":111,"endColumn":80},{"ruleId":"375","severity":1,"message":"428","line":12,"column":10,"nodeType":"377","messageId":"378","endLine":12,"endColumn":18},{"ruleId":"375","severity":1,"message":"407","line":1,"column":16,"nodeType":"377","messageId":"378","endLine":1,"endColumn":27},{"ruleId":"410","severity":1,"message":"411","line":75,"column":14,"nodeType":"377","messageId":"412","endLine":75,"endColumn":15},{"ruleId":"375","severity":1,"message":"429","line":102,"column":12,"nodeType":"377","messageId":"378","endLine":102,"endColumn":22},{"ruleId":"375","severity":1,"message":"430","line":113,"column":12,"nodeType":"377","messageId":"378","endLine":113,"endColumn":24},{"ruleId":"382","severity":1,"message":"419","line":123,"column":14,"nodeType":"384","endLine":123,"endColumn":79},{"ruleId":"416","severity":1,"message":"417","line":134,"column":41,"nodeType":"418","endLine":134,"endColumn":65},{"ruleId":"375","severity":1,"message":"407","line":1,"column":16,"nodeType":"377","messageId":"378","endLine":1,"endColumn":27},{"ruleId":"375","severity":1,"message":"385","line":12,"column":8,"nodeType":"377","messageId":"378","endLine":12,"endColumn":21},{"ruleId":"375","severity":1,"message":"398","line":15,"column":10,"nodeType":"377","messageId":"378","endLine":15,"endColumn":21},{"ruleId":"375","severity":1,"message":"431","line":16,"column":8,"nodeType":"377","messageId":"378","endLine":16,"endColumn":13},{"ruleId":"375","severity":1,"message":"432","line":46,"column":10,"nodeType":"377","messageId":"378","endLine":46,"endColumn":20},{"ruleId":"375","severity":1,"message":"433","line":52,"column":7,"nodeType":"377","messageId":"378","endLine":52,"endColumn":15},{"ruleId":"375","severity":1,"message":"434","line":53,"column":7,"nodeType":"377","messageId":"378","endLine":53,"endColumn":12},{"ruleId":"375","severity":1,"message":"390","line":54,"column":9,"nodeType":"377","messageId":"378","endLine":54,"endColumn":16},{"ruleId":"375","severity":1,"message":"435","line":58,"column":11,"nodeType":"377","messageId":"378","endLine":58,"endColumn":23},{"ruleId":"375","severity":1,"message":"436","line":58,"column":25,"nodeType":"377","messageId":"378","endLine":58,"endColumn":40},{"ruleId":"375","severity":1,"message":"403","line":60,"column":19,"nodeType":"377","messageId":"378","endLine":60,"endColumn":28},{"ruleId":"375","severity":1,"message":"407","line":1,"column":16,"nodeType":"377","messageId":"378","endLine":1,"endColumn":27},{"ruleId":"375","severity":1,"message":"390","line":9,"column":9,"nodeType":"377","messageId":"378","endLine":9,"endColumn":16},{"ruleId":"375","severity":1,"message":"436","line":10,"column":24,"nodeType":"377","messageId":"378","endLine":10,"endColumn":39},{"ruleId":"375","severity":1,"message":"437","line":13,"column":7,"nodeType":"377","messageId":"378","endLine":13,"endColumn":11},{"ruleId":"375","severity":1,"message":"438","line":17,"column":9,"nodeType":"377","messageId":"378","endLine":17,"endColumn":15},{"ruleId":"375","severity":1,"message":"407","line":1,"column":16,"nodeType":"377","messageId":"378","endLine":1,"endColumn":27},{"ruleId":"375","severity":1,"message":"385","line":12,"column":8,"nodeType":"377","messageId":"378","endLine":12,"endColumn":21},{"ruleId":"375","severity":1,"message":"398","line":15,"column":9,"nodeType":"377","messageId":"378","endLine":15,"endColumn":20},{"ruleId":"375","severity":1,"message":"394","line":53,"column":10,"nodeType":"377","messageId":"378","endLine":53,"endColumn":16},{"ruleId":"375","severity":1,"message":"403","line":53,"column":18,"nodeType":"377","messageId":"378","endLine":53,"endColumn":27},{"ruleId":"375","severity":1,"message":"390","line":55,"column":9,"nodeType":"377","messageId":"378","endLine":55,"endColumn":16},{"ruleId":"375","severity":1,"message":"391","line":16,"column":11,"nodeType":"377","messageId":"378","endLine":16,"endColumn":18},{"ruleId":"375","severity":1,"message":"396","line":1,"column":17,"nodeType":"377","messageId":"378","endLine":1,"endColumn":25},{"ruleId":"375","severity":1,"message":"386","line":1,"column":27,"nodeType":"377","messageId":"378","endLine":1,"endColumn":37},{"ruleId":"375","severity":1,"message":"439","line":2,"column":8,"nodeType":"377","messageId":"378","endLine":2,"endColumn":14},{"ruleId":"375","severity":1,"message":"440","line":4,"column":10,"nodeType":"377","messageId":"378","endLine":4,"endColumn":19},{"ruleId":"375","severity":1,"message":"441","line":5,"column":8,"nodeType":"377","messageId":"378","endLine":5,"endColumn":12},{"ruleId":"375","severity":1,"message":"397","line":9,"column":8,"nodeType":"377","messageId":"378","endLine":9,"endColumn":11},{"ruleId":"375","severity":1,"message":"398","line":10,"column":10,"nodeType":"377","messageId":"378","endLine":10,"endColumn":21},{"ruleId":"375","severity":1,"message":"399","line":11,"column":10,"nodeType":"377","messageId":"378","endLine":11,"endColumn":17},{"ruleId":"375","severity":1,"message":"387","line":12,"column":10,"nodeType":"377","messageId":"378","endLine":12,"endColumn":15},{"ruleId":"426","severity":1,"message":"427","line":86,"column":25,"nodeType":"384","endLine":88,"endColumn":55},{"ruleId":"426","severity":1,"message":"427","line":95,"column":25,"nodeType":"384","endLine":95,"endColumn":83},{"ruleId":"426","severity":1,"message":"427","line":101,"column":25,"nodeType":"384","endLine":101,"endColumn":83},{"ruleId":"426","severity":1,"message":"427","line":107,"column":25,"nodeType":"384","endLine":107,"endColumn":83},{"ruleId":"375","severity":1,"message":"401","line":2,"column":10,"nodeType":"377","messageId":"378","endLine":2,"endColumn":20},{"ruleId":"375","severity":1,"message":"402","line":3,"column":8,"nodeType":"377","messageId":"378","endLine":3,"endColumn":13},{"ruleId":"375","severity":1,"message":"394","line":16,"column":10,"nodeType":"377","messageId":"378","endLine":16,"endColumn":16},{"ruleId":"375","severity":1,"message":"403","line":16,"column":18,"nodeType":"377","messageId":"378","endLine":16,"endColumn":27},{"ruleId":"375","severity":1,"message":"404","line":17,"column":10,"nodeType":"377","messageId":"378","endLine":17,"endColumn":20},{"ruleId":"375","severity":1,"message":"405","line":17,"column":22,"nodeType":"377","messageId":"378","endLine":17,"endColumn":34},{"ruleId":"375","severity":1,"message":"406","line":26,"column":27,"nodeType":"377","messageId":"378","endLine":26,"endColumn":40},{"ruleId":"375","severity":1,"message":"428","line":12,"column":10,"nodeType":"377","messageId":"378","endLine":12,"endColumn":18},{"ruleId":"375","severity":1,"message":"396","line":1,"column":17,"nodeType":"377","messageId":"378","endLine":1,"endColumn":25},{"ruleId":"375","severity":1,"message":"402","line":2,"column":8,"nodeType":"377","messageId":"378","endLine":2,"endColumn":13},{"ruleId":"375","severity":1,"message":"397","line":4,"column":8,"nodeType":"377","messageId":"378","endLine":4,"endColumn":11},{"ruleId":"375","severity":1,"message":"398","line":6,"column":10,"nodeType":"377","messageId":"378","endLine":6,"endColumn":21},{"ruleId":"375","severity":1,"message":"399","line":7,"column":10,"nodeType":"377","messageId":"378","endLine":7,"endColumn":17},{"ruleId":"416","severity":1,"message":"417","line":84,"column":31,"nodeType":"418","endLine":84,"endColumn":59},{"ruleId":"375","severity":1,"message":"396","line":1,"column":17,"nodeType":"377","messageId":"378","endLine":1,"endColumn":25},{"ruleId":"375","severity":1,"message":"407","line":2,"column":16,"nodeType":"377","messageId":"378","endLine":2,"endColumn":27},{"ruleId":"375","severity":1,"message":"396","line":2,"column":29,"nodeType":"377","messageId":"378","endLine":2,"endColumn":37},{"ruleId":"375","severity":1,"message":"437","line":14,"column":9,"nodeType":"377","messageId":"378","endLine":14,"endColumn":13},{"ruleId":"375","severity":1,"message":"407","line":2,"column":16,"nodeType":"377","messageId":"378","endLine":2,"endColumn":27},{"ruleId":"375","severity":1,"message":"396","line":2,"column":29,"nodeType":"377","messageId":"378","endLine":2,"endColumn":37},{"ruleId":"375","severity":1,"message":"442","line":10,"column":9,"nodeType":"377","messageId":"378","endLine":10,"endColumn":24},{"ruleId":"375","severity":1,"message":"443","line":11,"column":9,"nodeType":"377","messageId":"378","endLine":11,"endColumn":22},{"ruleId":"375","severity":1,"message":"444","line":12,"column":9,"nodeType":"377","messageId":"378","endLine":12,"endColumn":19},{"ruleId":"375","severity":1,"message":"445","line":13,"column":9,"nodeType":"377","messageId":"378","endLine":13,"endColumn":26},{"ruleId":"410","severity":1,"message":"411","line":47,"column":14,"nodeType":"377","messageId":"412","endLine":47,"endColumn":15},{"ruleId":"410","severity":1,"message":"411","line":57,"column":14,"nodeType":"377","messageId":"412","endLine":57,"endColumn":15},{"ruleId":"410","severity":1,"message":"411","line":67,"column":14,"nodeType":"377","messageId":"412","endLine":67,"endColumn":15},{"ruleId":"410","severity":1,"message":"446","line":70,"column":16,"nodeType":"377","messageId":"412","endLine":70,"endColumn":17},{"ruleId":"410","severity":1,"message":"411","line":92,"column":13,"nodeType":"377","messageId":"412","endLine":92,"endColumn":14},{"ruleId":"375","severity":1,"message":"447","line":99,"column":9,"nodeType":"377","messageId":"378","endLine":99,"endColumn":19},{"ruleId":"410","severity":1,"message":"411","line":100,"column":14,"nodeType":"377","messageId":"412","endLine":100,"endColumn":15},{"ruleId":"410","severity":1,"message":"446","line":102,"column":16,"nodeType":"377","messageId":"412","endLine":102,"endColumn":17},{"ruleId":"410","severity":1,"message":"411","line":116,"column":12,"nodeType":"377","messageId":"412","endLine":116,"endColumn":13},{"ruleId":"375","severity":1,"message":"407","line":2,"column":16,"nodeType":"377","messageId":"378","endLine":2,"endColumn":27},{"ruleId":"375","severity":1,"message":"396","line":2,"column":29,"nodeType":"377","messageId":"378","endLine":2,"endColumn":37},{"ruleId":"375","severity":1,"message":"407","line":2,"column":16,"nodeType":"377","messageId":"378","endLine":2,"endColumn":27},{"ruleId":"375","severity":1,"message":"396","line":2,"column":29,"nodeType":"377","messageId":"378","endLine":2,"endColumn":37},{"ruleId":"375","severity":1,"message":"437","line":13,"column":9,"nodeType":"377","messageId":"378","endLine":13,"endColumn":13},{"ruleId":"375","severity":1,"message":"407","line":1,"column":16,"nodeType":"377","messageId":"378","endLine":1,"endColumn":27},{"ruleId":"375","severity":1,"message":"439","line":15,"column":8,"nodeType":"377","messageId":"378","endLine":15,"endColumn":14},{"ruleId":"410","severity":1,"message":"411","line":75,"column":14,"nodeType":"377","messageId":"412","endLine":75,"endColumn":15},{"ruleId":"375","severity":1,"message":"429","line":102,"column":12,"nodeType":"377","messageId":"378","endLine":102,"endColumn":22},{"ruleId":"375","severity":1,"message":"430","line":113,"column":12,"nodeType":"377","messageId":"378","endLine":113,"endColumn":24},{"ruleId":"375","severity":1,"message":"448","line":118,"column":9,"nodeType":"377","messageId":"378","endLine":118,"endColumn":12},{"ruleId":"382","severity":1,"message":"419","line":120,"column":14,"nodeType":"384","endLine":120,"endColumn":79},{"ruleId":"416","severity":1,"message":"417","line":131,"column":41,"nodeType":"418","endLine":131,"endColumn":65},{"ruleId":"375","severity":1,"message":"396","line":1,"column":17,"nodeType":"377","messageId":"378","endLine":1,"endColumn":25},{"ruleId":"375","severity":1,"message":"402","line":2,"column":8,"nodeType":"377","messageId":"378","endLine":2,"endColumn":13},{"ruleId":"375","severity":1,"message":"397","line":3,"column":8,"nodeType":"377","messageId":"378","endLine":3,"endColumn":11},{"ruleId":"375","severity":1,"message":"398","line":5,"column":10,"nodeType":"377","messageId":"378","endLine":5,"endColumn":21},{"ruleId":"375","severity":1,"message":"399","line":6,"column":10,"nodeType":"377","messageId":"378","endLine":6,"endColumn":17},{"ruleId":"375","severity":1,"message":"449","line":7,"column":8,"nodeType":"377","messageId":"378","endLine":7,"endColumn":21},{"ruleId":"375","severity":1,"message":"450","line":9,"column":8,"nodeType":"377","messageId":"378","endLine":9,"endColumn":21},{"ruleId":"375","severity":1,"message":"439","line":11,"column":8,"nodeType":"377","messageId":"378","endLine":11,"endColumn":14},{"ruleId":"375","severity":1,"message":"390","line":52,"column":11,"nodeType":"377","messageId":"378","endLine":52,"endColumn":18},{"ruleId":"375","severity":1,"message":"385","line":4,"column":8,"nodeType":"377","messageId":"378","endLine":4,"endColumn":21},{"ruleId":"375","severity":1,"message":"388","line":9,"column":10,"nodeType":"377","messageId":"378","endLine":9,"endColumn":17},{"ruleId":"375","severity":1,"message":"389","line":9,"column":19,"nodeType":"377","messageId":"378","endLine":9,"endColumn":23},{"ruleId":"375","severity":1,"message":"390","line":24,"column":11,"nodeType":"377","messageId":"378","endLine":24,"endColumn":18},{"ruleId":"375","severity":1,"message":"391","line":25,"column":11,"nodeType":"377","messageId":"378","endLine":25,"endColumn":18},{"ruleId":"375","severity":1,"message":"392","line":26,"column":12,"nodeType":"377","messageId":"378","endLine":26,"endColumn":21},{"ruleId":"375","severity":1,"message":"393","line":26,"column":22,"nodeType":"377","messageId":"378","endLine":26,"endColumn":34},{"ruleId":"375","severity":1,"message":"394","line":33,"column":13,"nodeType":"377","messageId":"378","endLine":33,"endColumn":19},{"ruleId":"375","severity":1,"message":"395","line":35,"column":24,"nodeType":"377","messageId":"378","endLine":35,"endColumn":32},{"ruleId":"375","severity":1,"message":"396","line":1,"column":17,"nodeType":"377","messageId":"378","endLine":1,"endColumn":25},{"ruleId":"375","severity":1,"message":"386","line":1,"column":27,"nodeType":"377","messageId":"378","endLine":1,"endColumn":37},{"ruleId":"375","severity":1,"message":"439","line":2,"column":8,"nodeType":"377","messageId":"378","endLine":2,"endColumn":14},{"ruleId":"375","severity":1,"message":"451","line":3,"column":8,"nodeType":"377","messageId":"378","endLine":3,"endColumn":19},{"ruleId":"375","severity":1,"message":"440","line":4,"column":10,"nodeType":"377","messageId":"378","endLine":4,"endColumn":19},{"ruleId":"375","severity":1,"message":"441","line":5,"column":8,"nodeType":"377","messageId":"378","endLine":5,"endColumn":12},{"ruleId":"375","severity":1,"message":"452","line":6,"column":8,"nodeType":"377","messageId":"378","endLine":6,"endColumn":18},{"ruleId":"375","severity":1,"message":"453","line":8,"column":8,"nodeType":"377","messageId":"378","endLine":8,"endColumn":17},{"ruleId":"375","severity":1,"message":"397","line":9,"column":8,"nodeType":"377","messageId":"378","endLine":9,"endColumn":11},{"ruleId":"375","severity":1,"message":"398","line":10,"column":10,"nodeType":"377","messageId":"378","endLine":10,"endColumn":21},{"ruleId":"375","severity":1,"message":"399","line":11,"column":10,"nodeType":"377","messageId":"378","endLine":11,"endColumn":17},{"ruleId":"375","severity":1,"message":"387","line":12,"column":10,"nodeType":"377","messageId":"378","endLine":12,"endColumn":15},{"ruleId":"375","severity":1,"message":"454","line":63,"column":7,"nodeType":"377","messageId":"378","endLine":63,"endColumn":13},"no-native-reassign",["455"],"no-negated-in-lhs",["456"],"no-unused-vars","'setContext' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Router' is defined but never used.","'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'SideAndNavbar' is defined but never used.","'useContext' is defined but never used.","'Input' is defined but never used.","'Message' is defined but never used.","'Form' is defined but never used.","'history' is assigned a value but never used.","'classes' is assigned a value but never used.","'formError' is assigned a value but never used.","'setFormError' is assigned a value but never used.","'errors' is assigned a value but never used.","'loading1' is assigned a value but never used.","'useState' is defined but never used.","'gql' is defined but never used.","'useMutation' is defined but never used.","'useForm' is defined but never used.","'users' is assigned a value but never used.","'makeStyles' is defined but never used.","'Paper' is defined but never used.","'setErrors' is assigned a value but never used.","'usersValue' is assigned a value but never used.","'setUserValue' is assigned a value but never used.","'assignLoading' is assigned a value but never used.","'useCallback' is defined but never used.","'usersloading' is assigned a value but never used.","'projectsloading' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'select' is already defined.","'opt' is already defined.","'el' is already defined.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'UserTable' is defined but never used.","'list' is defined but never used.","'personCircleOutline' is defined but never used.","'reorderFourOutline' is defined but never used.","'UserList' is defined but never used.","'HandleOnClickAssignUser' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Collapse' is defined but never used.","'AssignUser' is defined but never used.","'CreateTicket' is defined but never used.","'query' is defined but never used.","'createData' is defined but never used.","'indexVal' is assigned a value but never used.","'index' is assigned a value but never used.","'markersArray' is assigned a value but never used.","'setMarkersArray' is assigned a value but never used.","'rows' is assigned a value but never used.","'length' is assigned a value but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Grid' is defined but never used.","'featureRequests' is assigned a value but never used.","'otherComments' is assigned a value but never used.","'BugsErrors' is assigned a value but never used.","'trainingDocuments' is assigned a value but never used.","'j' is already defined.","'countArray' is assigned a value but never used.","'one' is assigned a value but never used.","'ProjectTable2' is defined but never used.","'TicketsTable2' is defined but never used.","'CssBaseline' is defined but never used.","'Typography' is defined but never used.","'Container' is defined but never used.","'styles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]